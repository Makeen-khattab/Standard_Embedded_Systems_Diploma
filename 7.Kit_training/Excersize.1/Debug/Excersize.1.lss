
Excersize.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000092c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000d74  00000000  00000000  00000980  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000a7d  00000000  00000000  000016f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 94 04 	jmp	0x928	; 0x928 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
 */
#include"button.h"
#include<avr/io.h>
#include "gpio.h"
int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
/* Application initialization*/
BUTTON_init(BUTTON_PORTDID, BUTTON_PIN2ID);
  74:	83 e0       	ldi	r24, 0x03	; 3
  76:	62 e0       	ldi	r22, 0x02	; 2
  78:	0e 94 5b 00 	call	0xb6	; 0xb6 <BUTTON_init>
DDRC|=1<<1;
  7c:	a4 e3       	ldi	r26, 0x34	; 52
  7e:	b0 e0       	ldi	r27, 0x00	; 0
  80:	e4 e3       	ldi	r30, 0x34	; 52
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	82 60       	ori	r24, 0x02	; 2
  88:	8c 93       	st	X, r24
/* Super_Loop*/
while(1)
{
	if((GPIO_readPin(BUTTON_PORTDID, BUTTON_PIN2ID)== BUTTON_PRESSED_PULLUP))
  8a:	83 e0       	ldi	r24, 0x03	; 3
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	0e 94 23 03 	call	0x646	; 0x646 <GPIO_readPin>
  92:	88 23       	and	r24, r24
  94:	41 f4       	brne	.+16     	; 0xa6 <main+0x3a>
	{
		PORTC|=1<<1;
  96:	a5 e3       	ldi	r26, 0x35	; 53
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	e5 e3       	ldi	r30, 0x35	; 53
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	8c 93       	st	X, r24
  a4:	f2 cf       	rjmp	.-28     	; 0x8a <main+0x1e>
	}
	else
		PORTC&=~(1<<1);
  a6:	a5 e3       	ldi	r26, 0x35	; 53
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	e5 e3       	ldi	r30, 0x35	; 53
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	8d 7f       	andi	r24, 0xFD	; 253
  b2:	8c 93       	st	X, r24
  b4:	ea cf       	rjmp	.-44     	; 0x8a <main+0x1e>

000000b6 <BUTTON_init>:
#include "gpio.h"
#include "button.h"

void BUTTON_init(uint8 a_portId,uint8 a_pinId)
{
  b6:	df 93       	push	r29
  b8:	cf 93       	push	r28
  ba:	00 d0       	rcall	.+0      	; 0xbc <BUTTON_init+0x6>
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	89 83       	std	Y+1, r24	; 0x01
  c2:	6a 83       	std	Y+2, r22	; 0x02
	GPIO_setupPinDirection(a_portId, a_pinId, PIN_INPUT);
  c4:	89 81       	ldd	r24, Y+1	; 0x01
  c6:	6a 81       	ldd	r22, Y+2	; 0x02
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	0e 94 aa 00 	call	0x154	; 0x154 <GPIO_setupPinDirection>

}
  ce:	0f 90       	pop	r0
  d0:	0f 90       	pop	r0
  d2:	cf 91       	pop	r28
  d4:	df 91       	pop	r29
  d6:	08 95       	ret

000000d8 <BUTTON_state>:

uint8 BUTTON_state(uint8 a_portId,uint8 a_pinId,uint8 a_mode)
{
  d8:	df 93       	push	r29
  da:	cf 93       	push	r28
  dc:	cd b7       	in	r28, 0x3d	; 61
  de:	de b7       	in	r29, 0x3e	; 62
  e0:	27 97       	sbiw	r28, 0x07	; 7
  e2:	0f b6       	in	r0, 0x3f	; 63
  e4:	f8 94       	cli
  e6:	de bf       	out	0x3e, r29	; 62
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	cd bf       	out	0x3d, r28	; 61
  ec:	89 83       	std	Y+1, r24	; 0x01
  ee:	6a 83       	std	Y+2, r22	; 0x02
  f0:	4b 83       	std	Y+3, r20	; 0x03
	switch(a_mode)
  f2:	8b 81       	ldd	r24, Y+3	; 0x03
  f4:	28 2f       	mov	r18, r24
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	3e 83       	std	Y+6, r19	; 0x06
  fa:	2d 83       	std	Y+5, r18	; 0x05
  fc:	8d 81       	ldd	r24, Y+5	; 0x05
  fe:	9e 81       	ldd	r25, Y+6	; 0x06
 100:	00 97       	sbiw	r24, 0x00	; 0
 102:	81 f0       	breq	.+32     	; 0x124 <BUTTON_state+0x4c>
 104:	2d 81       	ldd	r18, Y+5	; 0x05
 106:	3e 81       	ldd	r19, Y+6	; 0x06
 108:	21 30       	cpi	r18, 0x01	; 1
 10a:	31 05       	cpc	r19, r1
 10c:	b1 f4       	brne	.+44     	; 0x13a <BUTTON_state+0x62>
	{
	case BUTTON_PULLUP :

		if(GPIO_readPin(a_portId, a_pinId) == BUTTON_COMPVALUE_PULLUP )
 10e:	89 81       	ldd	r24, Y+1	; 0x01
 110:	6a 81       	ldd	r22, Y+2	; 0x02
 112:	0e 94 23 03 	call	0x646	; 0x646 <GPIO_readPin>
 116:	88 23       	and	r24, r24
 118:	11 f4       	brne	.+4      	; 0x11e <BUTTON_state+0x46>
		{
			return BUTTON_PRESSED_PULLUP;
 11a:	1c 82       	std	Y+4, r1	; 0x04
 11c:	0f c0       	rjmp	.+30     	; 0x13c <BUTTON_state+0x64>
		}
		else
			return (!BUTTON_PRESSED_PULLUP);
 11e:	31 e0       	ldi	r19, 0x01	; 1
 120:	3c 83       	std	Y+4, r19	; 0x04
 122:	0c c0       	rjmp	.+24     	; 0x13c <BUTTON_state+0x64>
		break;


	case BUTTON_PULLDOWN :

		if(GPIO_readPin(a_portId, a_pinId) == BUTTON_COMPVALUE_PULLDOWN )
 124:	89 81       	ldd	r24, Y+1	; 0x01
 126:	6a 81       	ldd	r22, Y+2	; 0x02
 128:	0e 94 23 03 	call	0x646	; 0x646 <GPIO_readPin>
 12c:	81 30       	cpi	r24, 0x01	; 1
 12e:	19 f4       	brne	.+6      	; 0x136 <BUTTON_state+0x5e>
		{
			return BUTTON_PRESSED_PULLDOWN;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	8c 83       	std	Y+4, r24	; 0x04
 134:	03 c0       	rjmp	.+6      	; 0x13c <BUTTON_state+0x64>
		}
		else
			return (!BUTTON_PRESSED_PULLDOWN);
 136:	1c 82       	std	Y+4, r1	; 0x04
 138:	01 c0       	rjmp	.+2      	; 0x13c <BUTTON_state+0x64>
 13a:	02 c0       	rjmp	.+4      	; 0x140 <BUTTON_state+0x68>

default:
;
	}

}
 13c:	9c 81       	ldd	r25, Y+4	; 0x04
 13e:	9f 83       	std	Y+7, r25	; 0x07
 140:	8f 81       	ldd	r24, Y+7	; 0x07
 142:	27 96       	adiw	r28, 0x07	; 7
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	f8 94       	cli
 148:	de bf       	out	0x3e, r29	; 62
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	cd bf       	out	0x3d, r28	; 61
 14e:	cf 91       	pop	r28
 150:	df 91       	pop	r29
 152:	08 95       	ret

00000154 <GPIO_setupPinDirection>:
/*-----------------------FUNCTION Definitions------------------*/


/* Setting the pin on each port to be either Input pin or Output pin */
void GPIO_setupPinDirection( uint8 a_portNum,uint8 a_pinNum,GPIO_PinDirectionType a_direction )
{
 154:	df 93       	push	r29
 156:	cf 93       	push	r28
 158:	00 d0       	rcall	.+0      	; 0x15a <GPIO_setupPinDirection+0x6>
 15a:	00 d0       	rcall	.+0      	; 0x15c <GPIO_setupPinDirection+0x8>
 15c:	0f 92       	push	r0
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
 162:	89 83       	std	Y+1, r24	; 0x01
 164:	6a 83       	std	Y+2, r22	; 0x02
 166:	4b 83       	std	Y+3, r20	; 0x03

	/* Checking the number given by the user is valid  for Port number and Pin number */
	if( a_portNum>=GPIO_NUM_OF_PORTS || a_pinNum>=GPIO_NUM_OF_PINS )
 168:	89 81       	ldd	r24, Y+1	; 0x01
 16a:	84 30       	cpi	r24, 0x04	; 4
 16c:	08 f0       	brcs	.+2      	; 0x170 <GPIO_setupPinDirection+0x1c>
 16e:	e4 c0       	rjmp	.+456    	; 0x338 <GPIO_setupPinDirection+0x1e4>
 170:	8a 81       	ldd	r24, Y+2	; 0x02
 172:	88 30       	cpi	r24, 0x08	; 8
 174:	08 f0       	brcs	.+2      	; 0x178 <GPIO_setupPinDirection+0x24>
 176:	e0 c0       	rjmp	.+448    	; 0x338 <GPIO_setupPinDirection+0x1e4>
	/*------- If the number is within the range--------*/
	else
	{

		/*------- Selecting the Port you will set the Pin Direction in --------*/
		switch ( a_portNum )
 178:	89 81       	ldd	r24, Y+1	; 0x01
 17a:	28 2f       	mov	r18, r24
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	3d 83       	std	Y+5, r19	; 0x05
 180:	2c 83       	std	Y+4, r18	; 0x04
 182:	8c 81       	ldd	r24, Y+4	; 0x04
 184:	9d 81       	ldd	r25, Y+5	; 0x05
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	91 05       	cpc	r25, r1
 18a:	09 f4       	brne	.+2      	; 0x18e <GPIO_setupPinDirection+0x3a>
 18c:	47 c0       	rjmp	.+142    	; 0x21c <GPIO_setupPinDirection+0xc8>
 18e:	2c 81       	ldd	r18, Y+4	; 0x04
 190:	3d 81       	ldd	r19, Y+5	; 0x05
 192:	22 30       	cpi	r18, 0x02	; 2
 194:	31 05       	cpc	r19, r1
 196:	2c f4       	brge	.+10     	; 0x1a2 <GPIO_setupPinDirection+0x4e>
 198:	8c 81       	ldd	r24, Y+4	; 0x04
 19a:	9d 81       	ldd	r25, Y+5	; 0x05
 19c:	00 97       	sbiw	r24, 0x00	; 0
 19e:	71 f0       	breq	.+28     	; 0x1bc <GPIO_setupPinDirection+0x68>
 1a0:	cb c0       	rjmp	.+406    	; 0x338 <GPIO_setupPinDirection+0x1e4>
 1a2:	2c 81       	ldd	r18, Y+4	; 0x04
 1a4:	3d 81       	ldd	r19, Y+5	; 0x05
 1a6:	22 30       	cpi	r18, 0x02	; 2
 1a8:	31 05       	cpc	r19, r1
 1aa:	09 f4       	brne	.+2      	; 0x1ae <GPIO_setupPinDirection+0x5a>
 1ac:	67 c0       	rjmp	.+206    	; 0x27c <GPIO_setupPinDirection+0x128>
 1ae:	8c 81       	ldd	r24, Y+4	; 0x04
 1b0:	9d 81       	ldd	r25, Y+5	; 0x05
 1b2:	83 30       	cpi	r24, 0x03	; 3
 1b4:	91 05       	cpc	r25, r1
 1b6:	09 f4       	brne	.+2      	; 0x1ba <GPIO_setupPinDirection+0x66>
 1b8:	91 c0       	rjmp	.+290    	; 0x2dc <GPIO_setupPinDirection+0x188>
 1ba:	be c0       	rjmp	.+380    	; 0x338 <GPIO_setupPinDirection+0x1e4>
		{

				case PORTA_ID :

		/*------- Selecting the Mode you will set the Pin Direction to --------*/
					if( a_direction == PIN_INPUT)
 1bc:	8b 81       	ldd	r24, Y+3	; 0x03
 1be:	88 23       	and	r24, r24
 1c0:	a9 f4       	brne	.+42     	; 0x1ec <GPIO_setupPinDirection+0x98>
					{

						/* Common Macro function to clear a bit*/
						CLEAR_BIT( DDRA,a_pinNum );
 1c2:	aa e3       	ldi	r26, 0x3A	; 58
 1c4:	b0 e0       	ldi	r27, 0x00	; 0
 1c6:	ea e3       	ldi	r30, 0x3A	; 58
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	48 2f       	mov	r20, r24
 1ce:	8a 81       	ldd	r24, Y+2	; 0x02
 1d0:	28 2f       	mov	r18, r24
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	02 2e       	mov	r0, r18
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <GPIO_setupPinDirection+0x8c>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	0a 94       	dec	r0
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <GPIO_setupPinDirection+0x88>
 1e4:	80 95       	com	r24
 1e6:	84 23       	and	r24, r20
 1e8:	8c 93       	st	X, r24
 1ea:	a6 c0       	rjmp	.+332    	; 0x338 <GPIO_setupPinDirection+0x1e4>

					}
					else if ( a_direction == PIN_OUTPUT )
 1ec:	8b 81       	ldd	r24, Y+3	; 0x03
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	09 f0       	breq	.+2      	; 0x1f4 <GPIO_setupPinDirection+0xa0>
 1f2:	a2 c0       	rjmp	.+324    	; 0x338 <GPIO_setupPinDirection+0x1e4>
					{

						/* Common Macro function to Set a bit to 1*/
						SET_BIT( DDRA,a_pinNum );
 1f4:	aa e3       	ldi	r26, 0x3A	; 58
 1f6:	b0 e0       	ldi	r27, 0x00	; 0
 1f8:	ea e3       	ldi	r30, 0x3A	; 58
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	48 2f       	mov	r20, r24
 200:	8a 81       	ldd	r24, Y+2	; 0x02
 202:	28 2f       	mov	r18, r24
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 2e       	mov	r0, r18
 20c:	02 c0       	rjmp	.+4      	; 0x212 <GPIO_setupPinDirection+0xbe>
 20e:	88 0f       	add	r24, r24
 210:	99 1f       	adc	r25, r25
 212:	0a 94       	dec	r0
 214:	e2 f7       	brpl	.-8      	; 0x20e <GPIO_setupPinDirection+0xba>
 216:	84 2b       	or	r24, r20
 218:	8c 93       	st	X, r24
 21a:	8e c0       	rjmp	.+284    	; 0x338 <GPIO_setupPinDirection+0x1e4>
					break;

				case PORTB_ID :

				/*------- Selecting the Mode you will set the Pin Direction to --------*/
					if( a_direction == PIN_INPUT )
 21c:	8b 81       	ldd	r24, Y+3	; 0x03
 21e:	88 23       	and	r24, r24
 220:	a9 f4       	brne	.+42     	; 0x24c <GPIO_setupPinDirection+0xf8>
					{

						/* Common Macro function to clear a bit*/
						 CLEAR_BIT( DDRB,a_pinNum );
 222:	a7 e3       	ldi	r26, 0x37	; 55
 224:	b0 e0       	ldi	r27, 0x00	; 0
 226:	e7 e3       	ldi	r30, 0x37	; 55
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	48 2f       	mov	r20, r24
 22e:	8a 81       	ldd	r24, Y+2	; 0x02
 230:	28 2f       	mov	r18, r24
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	02 2e       	mov	r0, r18
 23a:	02 c0       	rjmp	.+4      	; 0x240 <GPIO_setupPinDirection+0xec>
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	0a 94       	dec	r0
 242:	e2 f7       	brpl	.-8      	; 0x23c <GPIO_setupPinDirection+0xe8>
 244:	80 95       	com	r24
 246:	84 23       	and	r24, r20
 248:	8c 93       	st	X, r24
 24a:	76 c0       	rjmp	.+236    	; 0x338 <GPIO_setupPinDirection+0x1e4>

					}

					else if ( a_direction == PIN_OUTPUT )
 24c:	8b 81       	ldd	r24, Y+3	; 0x03
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	09 f0       	breq	.+2      	; 0x254 <GPIO_setupPinDirection+0x100>
 252:	72 c0       	rjmp	.+228    	; 0x338 <GPIO_setupPinDirection+0x1e4>
					{

						/* Common Macro function to Set a bit to 1*/
						SET_BIT( DDRB,a_pinNum );
 254:	a7 e3       	ldi	r26, 0x37	; 55
 256:	b0 e0       	ldi	r27, 0x00	; 0
 258:	e7 e3       	ldi	r30, 0x37	; 55
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	48 2f       	mov	r20, r24
 260:	8a 81       	ldd	r24, Y+2	; 0x02
 262:	28 2f       	mov	r18, r24
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 2e       	mov	r0, r18
 26c:	02 c0       	rjmp	.+4      	; 0x272 <GPIO_setupPinDirection+0x11e>
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	0a 94       	dec	r0
 274:	e2 f7       	brpl	.-8      	; 0x26e <GPIO_setupPinDirection+0x11a>
 276:	84 2b       	or	r24, r20
 278:	8c 93       	st	X, r24
 27a:	5e c0       	rjmp	.+188    	; 0x338 <GPIO_setupPinDirection+0x1e4>
					break;

				case PORTC_ID :

					/*------- Selecting the Mode you will set the Pin Direction to --------*/
					if( a_direction == PIN_INPUT )
 27c:	8b 81       	ldd	r24, Y+3	; 0x03
 27e:	88 23       	and	r24, r24
 280:	a9 f4       	brne	.+42     	; 0x2ac <GPIO_setupPinDirection+0x158>
					{
					/* Common Macro function to clear a bit*/
						 CLEAR_BIT( DDRC,a_pinNum );
 282:	a4 e3       	ldi	r26, 0x34	; 52
 284:	b0 e0       	ldi	r27, 0x00	; 0
 286:	e4 e3       	ldi	r30, 0x34	; 52
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	48 2f       	mov	r20, r24
 28e:	8a 81       	ldd	r24, Y+2	; 0x02
 290:	28 2f       	mov	r18, r24
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 2e       	mov	r0, r18
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <GPIO_setupPinDirection+0x14c>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	0a 94       	dec	r0
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <GPIO_setupPinDirection+0x148>
 2a4:	80 95       	com	r24
 2a6:	84 23       	and	r24, r20
 2a8:	8c 93       	st	X, r24
 2aa:	46 c0       	rjmp	.+140    	; 0x338 <GPIO_setupPinDirection+0x1e4>

					}

					else if ( a_direction == PIN_OUTPUT )
 2ac:	8b 81       	ldd	r24, Y+3	; 0x03
 2ae:	81 30       	cpi	r24, 0x01	; 1
 2b0:	09 f0       	breq	.+2      	; 0x2b4 <GPIO_setupPinDirection+0x160>
 2b2:	42 c0       	rjmp	.+132    	; 0x338 <GPIO_setupPinDirection+0x1e4>
					{

						/* Common Macro function to Set a bit to 1*/
	   					 SET_BIT( DDRC,a_pinNum );
 2b4:	a4 e3       	ldi	r26, 0x34	; 52
 2b6:	b0 e0       	ldi	r27, 0x00	; 0
 2b8:	e4 e3       	ldi	r30, 0x34	; 52
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	48 2f       	mov	r20, r24
 2c0:	8a 81       	ldd	r24, Y+2	; 0x02
 2c2:	28 2f       	mov	r18, r24
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 2e       	mov	r0, r18
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <GPIO_setupPinDirection+0x17e>
 2ce:	88 0f       	add	r24, r24
 2d0:	99 1f       	adc	r25, r25
 2d2:	0a 94       	dec	r0
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <GPIO_setupPinDirection+0x17a>
 2d6:	84 2b       	or	r24, r20
 2d8:	8c 93       	st	X, r24
 2da:	2e c0       	rjmp	.+92     	; 0x338 <GPIO_setupPinDirection+0x1e4>
					break;

				case PORTD_ID :

					/*------- Selecting the Mode you will set the Pin Direction to --------*/
					if( a_direction == PIN_INPUT )
 2dc:	8b 81       	ldd	r24, Y+3	; 0x03
 2de:	88 23       	and	r24, r24
 2e0:	a9 f4       	brne	.+42     	; 0x30c <GPIO_setupPinDirection+0x1b8>
					{

						/* Common Macro function to clear a bit*/
						CLEAR_BIT( DDRD,a_pinNum );
 2e2:	a1 e3       	ldi	r26, 0x31	; 49
 2e4:	b0 e0       	ldi	r27, 0x00	; 0
 2e6:	e1 e3       	ldi	r30, 0x31	; 49
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	48 2f       	mov	r20, r24
 2ee:	8a 81       	ldd	r24, Y+2	; 0x02
 2f0:	28 2f       	mov	r18, r24
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 2e       	mov	r0, r18
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <GPIO_setupPinDirection+0x1ac>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	0a 94       	dec	r0
 302:	e2 f7       	brpl	.-8      	; 0x2fc <GPIO_setupPinDirection+0x1a8>
 304:	80 95       	com	r24
 306:	84 23       	and	r24, r20
 308:	8c 93       	st	X, r24
 30a:	16 c0       	rjmp	.+44     	; 0x338 <GPIO_setupPinDirection+0x1e4>

					}

					else if ( a_direction == PIN_OUTPUT )
 30c:	8b 81       	ldd	r24, Y+3	; 0x03
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	99 f4       	brne	.+38     	; 0x338 <GPIO_setupPinDirection+0x1e4>
					{
						/* Common Macro function to Set a bit to 1*/
						SET_BIT( DDRD,a_pinNum );
 312:	a1 e3       	ldi	r26, 0x31	; 49
 314:	b0 e0       	ldi	r27, 0x00	; 0
 316:	e1 e3       	ldi	r30, 0x31	; 49
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	48 2f       	mov	r20, r24
 31e:	8a 81       	ldd	r24, Y+2	; 0x02
 320:	28 2f       	mov	r18, r24
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	02 2e       	mov	r0, r18
 32a:	02 c0       	rjmp	.+4      	; 0x330 <GPIO_setupPinDirection+0x1dc>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	0a 94       	dec	r0
 332:	e2 f7       	brpl	.-8      	; 0x32c <GPIO_setupPinDirection+0x1d8>
 334:	84 2b       	or	r24, r20
 336:	8c 93       	st	X, r24

	}



}
 338:	0f 90       	pop	r0
 33a:	0f 90       	pop	r0
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
 342:	cf 91       	pop	r28
 344:	df 91       	pop	r29
 346:	08 95       	ret

00000348 <GPIO_writePin>:


/* Writing a logic 0 or 1 on an Output pin */
void GPIO_writePin(uint8 a_portNum,uint8 a_pinNum,uint8 a_value)
{
 348:	df 93       	push	r29
 34a:	cf 93       	push	r28
 34c:	00 d0       	rcall	.+0      	; 0x34e <GPIO_writePin+0x6>
 34e:	00 d0       	rcall	.+0      	; 0x350 <GPIO_writePin+0x8>
 350:	0f 92       	push	r0
 352:	cd b7       	in	r28, 0x3d	; 61
 354:	de b7       	in	r29, 0x3e	; 62
 356:	89 83       	std	Y+1, r24	; 0x01
 358:	6a 83       	std	Y+2, r22	; 0x02
 35a:	4b 83       	std	Y+3, r20	; 0x03

	/* Checking the number given by the user is valid  for Port number and Pin number */

	if( a_portNum>=GPIO_NUM_OF_PORTS || a_pinNum>=GPIO_NUM_OF_PINS )
 35c:	89 81       	ldd	r24, Y+1	; 0x01
 35e:	84 30       	cpi	r24, 0x04	; 4
 360:	08 f0       	brcs	.+2      	; 0x364 <GPIO_writePin+0x1c>
 362:	e4 c0       	rjmp	.+456    	; 0x52c <GPIO_writePin+0x1e4>
 364:	8a 81       	ldd	r24, Y+2	; 0x02
 366:	88 30       	cpi	r24, 0x08	; 8
 368:	08 f0       	brcs	.+2      	; 0x36c <GPIO_writePin+0x24>
 36a:	e0 c0       	rjmp	.+448    	; 0x52c <GPIO_writePin+0x1e4>
	/*------- If the number is within the range--------*/
		else
		{

		/*------- Selecting the Port you will write on a Pin in --------*/
			switch ( a_portNum )
 36c:	89 81       	ldd	r24, Y+1	; 0x01
 36e:	28 2f       	mov	r18, r24
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	3d 83       	std	Y+5, r19	; 0x05
 374:	2c 83       	std	Y+4, r18	; 0x04
 376:	8c 81       	ldd	r24, Y+4	; 0x04
 378:	9d 81       	ldd	r25, Y+5	; 0x05
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	91 05       	cpc	r25, r1
 37e:	09 f4       	brne	.+2      	; 0x382 <GPIO_writePin+0x3a>
 380:	47 c0       	rjmp	.+142    	; 0x410 <GPIO_writePin+0xc8>
 382:	2c 81       	ldd	r18, Y+4	; 0x04
 384:	3d 81       	ldd	r19, Y+5	; 0x05
 386:	22 30       	cpi	r18, 0x02	; 2
 388:	31 05       	cpc	r19, r1
 38a:	2c f4       	brge	.+10     	; 0x396 <GPIO_writePin+0x4e>
 38c:	8c 81       	ldd	r24, Y+4	; 0x04
 38e:	9d 81       	ldd	r25, Y+5	; 0x05
 390:	00 97       	sbiw	r24, 0x00	; 0
 392:	71 f0       	breq	.+28     	; 0x3b0 <GPIO_writePin+0x68>
 394:	cb c0       	rjmp	.+406    	; 0x52c <GPIO_writePin+0x1e4>
 396:	2c 81       	ldd	r18, Y+4	; 0x04
 398:	3d 81       	ldd	r19, Y+5	; 0x05
 39a:	22 30       	cpi	r18, 0x02	; 2
 39c:	31 05       	cpc	r19, r1
 39e:	09 f4       	brne	.+2      	; 0x3a2 <GPIO_writePin+0x5a>
 3a0:	67 c0       	rjmp	.+206    	; 0x470 <GPIO_writePin+0x128>
 3a2:	8c 81       	ldd	r24, Y+4	; 0x04
 3a4:	9d 81       	ldd	r25, Y+5	; 0x05
 3a6:	83 30       	cpi	r24, 0x03	; 3
 3a8:	91 05       	cpc	r25, r1
 3aa:	09 f4       	brne	.+2      	; 0x3ae <GPIO_writePin+0x66>
 3ac:	91 c0       	rjmp	.+290    	; 0x4d0 <GPIO_writePin+0x188>
 3ae:	be c0       	rjmp	.+380    	; 0x52c <GPIO_writePin+0x1e4>
			{
					case PORTA_ID :

		/*------- Selecting the value you will write on a Pin in --------*/
						if( a_value == LOGIC_LOW )
 3b0:	8b 81       	ldd	r24, Y+3	; 0x03
 3b2:	88 23       	and	r24, r24
 3b4:	a9 f4       	brne	.+42     	; 0x3e0 <GPIO_writePin+0x98>
						{

							/* Common Macro function to clear a bit*/
							CLEAR_BIT( PORTA,a_pinNum );
 3b6:	ab e3       	ldi	r26, 0x3B	; 59
 3b8:	b0 e0       	ldi	r27, 0x00	; 0
 3ba:	eb e3       	ldi	r30, 0x3B	; 59
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	80 81       	ld	r24, Z
 3c0:	48 2f       	mov	r20, r24
 3c2:	8a 81       	ldd	r24, Y+2	; 0x02
 3c4:	28 2f       	mov	r18, r24
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 2e       	mov	r0, r18
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <GPIO_writePin+0x8c>
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	0a 94       	dec	r0
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <GPIO_writePin+0x88>
 3d8:	80 95       	com	r24
 3da:	84 23       	and	r24, r20
 3dc:	8c 93       	st	X, r24
 3de:	a6 c0       	rjmp	.+332    	; 0x52c <GPIO_writePin+0x1e4>

						}
						else if ( a_value == LOGIC_HIGH )
 3e0:	8b 81       	ldd	r24, Y+3	; 0x03
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	09 f0       	breq	.+2      	; 0x3e8 <GPIO_writePin+0xa0>
 3e6:	a2 c0       	rjmp	.+324    	; 0x52c <GPIO_writePin+0x1e4>
						{

							/* Common Macro function to Set a bit to 1*/
							SET_BIT( PORTA,a_pinNum );
 3e8:	ab e3       	ldi	r26, 0x3B	; 59
 3ea:	b0 e0       	ldi	r27, 0x00	; 0
 3ec:	eb e3       	ldi	r30, 0x3B	; 59
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 81       	ld	r24, Z
 3f2:	48 2f       	mov	r20, r24
 3f4:	8a 81       	ldd	r24, Y+2	; 0x02
 3f6:	28 2f       	mov	r18, r24
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	02 2e       	mov	r0, r18
 400:	02 c0       	rjmp	.+4      	; 0x406 <GPIO_writePin+0xbe>
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	0a 94       	dec	r0
 408:	e2 f7       	brpl	.-8      	; 0x402 <GPIO_writePin+0xba>
 40a:	84 2b       	or	r24, r20
 40c:	8c 93       	st	X, r24
 40e:	8e c0       	rjmp	.+284    	; 0x52c <GPIO_writePin+0x1e4>
						break;

					case PORTB_ID :

					/*------- Selecting the value you will write on a Pin in --------*/
						if( a_value == LOGIC_LOW )
 410:	8b 81       	ldd	r24, Y+3	; 0x03
 412:	88 23       	and	r24, r24
 414:	a9 f4       	brne	.+42     	; 0x440 <GPIO_writePin+0xf8>
						{

							/* Common Macro function to clear a bit*/
							 CLEAR_BIT( PORTB,a_pinNum );
 416:	a8 e3       	ldi	r26, 0x38	; 56
 418:	b0 e0       	ldi	r27, 0x00	; 0
 41a:	e8 e3       	ldi	r30, 0x38	; 56
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	80 81       	ld	r24, Z
 420:	48 2f       	mov	r20, r24
 422:	8a 81       	ldd	r24, Y+2	; 0x02
 424:	28 2f       	mov	r18, r24
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	02 2e       	mov	r0, r18
 42e:	02 c0       	rjmp	.+4      	; 0x434 <GPIO_writePin+0xec>
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	0a 94       	dec	r0
 436:	e2 f7       	brpl	.-8      	; 0x430 <GPIO_writePin+0xe8>
 438:	80 95       	com	r24
 43a:	84 23       	and	r24, r20
 43c:	8c 93       	st	X, r24
 43e:	76 c0       	rjmp	.+236    	; 0x52c <GPIO_writePin+0x1e4>

						}

						else if ( a_value == LOGIC_HIGH )
 440:	8b 81       	ldd	r24, Y+3	; 0x03
 442:	81 30       	cpi	r24, 0x01	; 1
 444:	09 f0       	breq	.+2      	; 0x448 <GPIO_writePin+0x100>
 446:	72 c0       	rjmp	.+228    	; 0x52c <GPIO_writePin+0x1e4>
						{

							/* Common Macro function to Set a bit to 1*/
							SET_BIT( PORTB,a_pinNum );
 448:	a8 e3       	ldi	r26, 0x38	; 56
 44a:	b0 e0       	ldi	r27, 0x00	; 0
 44c:	e8 e3       	ldi	r30, 0x38	; 56
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 81       	ld	r24, Z
 452:	48 2f       	mov	r20, r24
 454:	8a 81       	ldd	r24, Y+2	; 0x02
 456:	28 2f       	mov	r18, r24
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	81 e0       	ldi	r24, 0x01	; 1
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	02 2e       	mov	r0, r18
 460:	02 c0       	rjmp	.+4      	; 0x466 <GPIO_writePin+0x11e>
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	0a 94       	dec	r0
 468:	e2 f7       	brpl	.-8      	; 0x462 <GPIO_writePin+0x11a>
 46a:	84 2b       	or	r24, r20
 46c:	8c 93       	st	X, r24
 46e:	5e c0       	rjmp	.+188    	; 0x52c <GPIO_writePin+0x1e4>
						break;

					case PORTC_ID :

						/*------- Selecting the value you will write on a Pin in --------*/
						if( a_value == LOGIC_LOW )
 470:	8b 81       	ldd	r24, Y+3	; 0x03
 472:	88 23       	and	r24, r24
 474:	a9 f4       	brne	.+42     	; 0x4a0 <GPIO_writePin+0x158>
						{

							/* Common Macro function to clear a bit*/
							 CLEAR_BIT( PORTC,a_pinNum );
 476:	a5 e3       	ldi	r26, 0x35	; 53
 478:	b0 e0       	ldi	r27, 0x00	; 0
 47a:	e5 e3       	ldi	r30, 0x35	; 53
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	80 81       	ld	r24, Z
 480:	48 2f       	mov	r20, r24
 482:	8a 81       	ldd	r24, Y+2	; 0x02
 484:	28 2f       	mov	r18, r24
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	02 2e       	mov	r0, r18
 48e:	02 c0       	rjmp	.+4      	; 0x494 <GPIO_writePin+0x14c>
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	0a 94       	dec	r0
 496:	e2 f7       	brpl	.-8      	; 0x490 <GPIO_writePin+0x148>
 498:	80 95       	com	r24
 49a:	84 23       	and	r24, r20
 49c:	8c 93       	st	X, r24
 49e:	46 c0       	rjmp	.+140    	; 0x52c <GPIO_writePin+0x1e4>

						}

						else if ( a_value == LOGIC_HIGH )
 4a0:	8b 81       	ldd	r24, Y+3	; 0x03
 4a2:	81 30       	cpi	r24, 0x01	; 1
 4a4:	09 f0       	breq	.+2      	; 0x4a8 <GPIO_writePin+0x160>
 4a6:	42 c0       	rjmp	.+132    	; 0x52c <GPIO_writePin+0x1e4>
						{

							/* Common Macro function to Set a bit to 1*/
		   					 SET_BIT( PORTC,a_pinNum );
 4a8:	a5 e3       	ldi	r26, 0x35	; 53
 4aa:	b0 e0       	ldi	r27, 0x00	; 0
 4ac:	e5 e3       	ldi	r30, 0x35	; 53
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	48 2f       	mov	r20, r24
 4b4:	8a 81       	ldd	r24, Y+2	; 0x02
 4b6:	28 2f       	mov	r18, r24
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	02 2e       	mov	r0, r18
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <GPIO_writePin+0x17e>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	0a 94       	dec	r0
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <GPIO_writePin+0x17a>
 4ca:	84 2b       	or	r24, r20
 4cc:	8c 93       	st	X, r24
 4ce:	2e c0       	rjmp	.+92     	; 0x52c <GPIO_writePin+0x1e4>
						break;

					case PORTD_ID :

						/*------- Selecting the value you will write on a Pin in --------*/
						if( a_value == LOGIC_LOW )
 4d0:	8b 81       	ldd	r24, Y+3	; 0x03
 4d2:	88 23       	and	r24, r24
 4d4:	a9 f4       	brne	.+42     	; 0x500 <GPIO_writePin+0x1b8>
						{

							/* Common Macro function to clear a bit*/
							CLEAR_BIT( PORTD,a_pinNum );
 4d6:	a2 e3       	ldi	r26, 0x32	; 50
 4d8:	b0 e0       	ldi	r27, 0x00	; 0
 4da:	e2 e3       	ldi	r30, 0x32	; 50
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	80 81       	ld	r24, Z
 4e0:	48 2f       	mov	r20, r24
 4e2:	8a 81       	ldd	r24, Y+2	; 0x02
 4e4:	28 2f       	mov	r18, r24
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	02 2e       	mov	r0, r18
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <GPIO_writePin+0x1ac>
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	0a 94       	dec	r0
 4f6:	e2 f7       	brpl	.-8      	; 0x4f0 <GPIO_writePin+0x1a8>
 4f8:	80 95       	com	r24
 4fa:	84 23       	and	r24, r20
 4fc:	8c 93       	st	X, r24
 4fe:	16 c0       	rjmp	.+44     	; 0x52c <GPIO_writePin+0x1e4>

						}

						else if ( a_value == LOGIC_HIGH )
 500:	8b 81       	ldd	r24, Y+3	; 0x03
 502:	81 30       	cpi	r24, 0x01	; 1
 504:	99 f4       	brne	.+38     	; 0x52c <GPIO_writePin+0x1e4>
						{

							/* Common Macro function to Set a bit to 1*/
							SET_BIT( PORTD,a_pinNum );
 506:	a2 e3       	ldi	r26, 0x32	; 50
 508:	b0 e0       	ldi	r27, 0x00	; 0
 50a:	e2 e3       	ldi	r30, 0x32	; 50
 50c:	f0 e0       	ldi	r31, 0x00	; 0
 50e:	80 81       	ld	r24, Z
 510:	48 2f       	mov	r20, r24
 512:	8a 81       	ldd	r24, Y+2	; 0x02
 514:	28 2f       	mov	r18, r24
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	81 e0       	ldi	r24, 0x01	; 1
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	02 2e       	mov	r0, r18
 51e:	02 c0       	rjmp	.+4      	; 0x524 <GPIO_writePin+0x1dc>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	0a 94       	dec	r0
 526:	e2 f7       	brpl	.-8      	; 0x520 <GPIO_writePin+0x1d8>
 528:	84 2b       	or	r24, r20
 52a:	8c 93       	st	X, r24
		}




}
 52c:	0f 90       	pop	r0
 52e:	0f 90       	pop	r0
 530:	0f 90       	pop	r0
 532:	0f 90       	pop	r0
 534:	0f 90       	pop	r0
 536:	cf 91       	pop	r28
 538:	df 91       	pop	r29
 53a:	08 95       	ret

0000053c <GPIO_togglePin>:



void GPIO_togglePin(uint8 a_portNum,uint8 a_pinNum)
{
 53c:	df 93       	push	r29
 53e:	cf 93       	push	r28
 540:	00 d0       	rcall	.+0      	; 0x542 <GPIO_togglePin+0x6>
 542:	00 d0       	rcall	.+0      	; 0x544 <GPIO_togglePin+0x8>
 544:	cd b7       	in	r28, 0x3d	; 61
 546:	de b7       	in	r29, 0x3e	; 62
 548:	89 83       	std	Y+1, r24	; 0x01
 54a:	6a 83       	std	Y+2, r22	; 0x02
	/* Checking the number given by the user is valid  for Port number and Pin number */

	if( a_portNum>=GPIO_NUM_OF_PORTS || a_pinNum>=GPIO_NUM_OF_PINS )
 54c:	89 81       	ldd	r24, Y+1	; 0x01
 54e:	84 30       	cpi	r24, 0x04	; 4
 550:	08 f0       	brcs	.+2      	; 0x554 <GPIO_togglePin+0x18>
 552:	72 c0       	rjmp	.+228    	; 0x638 <GPIO_togglePin+0xfc>
 554:	8a 81       	ldd	r24, Y+2	; 0x02
 556:	88 30       	cpi	r24, 0x08	; 8
 558:	08 f0       	brcs	.+2      	; 0x55c <GPIO_togglePin+0x20>
 55a:	6e c0       	rjmp	.+220    	; 0x638 <GPIO_togglePin+0xfc>
	/*------- If the number is within the range--------*/
		else
		{

		/*------- Selecting the Port you will toggle a Pin in --------*/
			switch ( a_portNum )
 55c:	89 81       	ldd	r24, Y+1	; 0x01
 55e:	28 2f       	mov	r18, r24
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	3c 83       	std	Y+4, r19	; 0x04
 564:	2b 83       	std	Y+3, r18	; 0x03
 566:	8b 81       	ldd	r24, Y+3	; 0x03
 568:	9c 81       	ldd	r25, Y+4	; 0x04
 56a:	81 30       	cpi	r24, 0x01	; 1
 56c:	91 05       	cpc	r25, r1
 56e:	49 f1       	breq	.+82     	; 0x5c2 <GPIO_togglePin+0x86>
 570:	2b 81       	ldd	r18, Y+3	; 0x03
 572:	3c 81       	ldd	r19, Y+4	; 0x04
 574:	22 30       	cpi	r18, 0x02	; 2
 576:	31 05       	cpc	r19, r1
 578:	2c f4       	brge	.+10     	; 0x584 <GPIO_togglePin+0x48>
 57a:	8b 81       	ldd	r24, Y+3	; 0x03
 57c:	9c 81       	ldd	r25, Y+4	; 0x04
 57e:	00 97       	sbiw	r24, 0x00	; 0
 580:	61 f0       	breq	.+24     	; 0x59a <GPIO_togglePin+0x5e>
 582:	5a c0       	rjmp	.+180    	; 0x638 <GPIO_togglePin+0xfc>
 584:	2b 81       	ldd	r18, Y+3	; 0x03
 586:	3c 81       	ldd	r19, Y+4	; 0x04
 588:	22 30       	cpi	r18, 0x02	; 2
 58a:	31 05       	cpc	r19, r1
 58c:	71 f1       	breq	.+92     	; 0x5ea <GPIO_togglePin+0xae>
 58e:	8b 81       	ldd	r24, Y+3	; 0x03
 590:	9c 81       	ldd	r25, Y+4	; 0x04
 592:	83 30       	cpi	r24, 0x03	; 3
 594:	91 05       	cpc	r25, r1
 596:	e9 f1       	breq	.+122    	; 0x612 <GPIO_togglePin+0xd6>
 598:	4f c0       	rjmp	.+158    	; 0x638 <GPIO_togglePin+0xfc>
			{
					case PORTA_ID :

				/* Common Macro function to Toggle a bit*/
					TOGGLE_BIT(PORTA,a_pinNum);
 59a:	ab e3       	ldi	r26, 0x3B	; 59
 59c:	b0 e0       	ldi	r27, 0x00	; 0
 59e:	eb e3       	ldi	r30, 0x3B	; 59
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	80 81       	ld	r24, Z
 5a4:	48 2f       	mov	r20, r24
 5a6:	8a 81       	ldd	r24, Y+2	; 0x02
 5a8:	28 2f       	mov	r18, r24
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	02 2e       	mov	r0, r18
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <GPIO_togglePin+0x7c>
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	0a 94       	dec	r0
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <GPIO_togglePin+0x78>
 5bc:	84 27       	eor	r24, r20
 5be:	8c 93       	st	X, r24
 5c0:	3b c0       	rjmp	.+118    	; 0x638 <GPIO_togglePin+0xfc>
						break;

					case PORTB_ID :

				/* Common Macro function to Toggle a bit*/
						TOGGLE_BIT(PORTB,a_pinNum);
 5c2:	a8 e3       	ldi	r26, 0x38	; 56
 5c4:	b0 e0       	ldi	r27, 0x00	; 0
 5c6:	e8 e3       	ldi	r30, 0x38	; 56
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	80 81       	ld	r24, Z
 5cc:	48 2f       	mov	r20, r24
 5ce:	8a 81       	ldd	r24, Y+2	; 0x02
 5d0:	28 2f       	mov	r18, r24
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	02 2e       	mov	r0, r18
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <GPIO_togglePin+0xa4>
 5dc:	88 0f       	add	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	0a 94       	dec	r0
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <GPIO_togglePin+0xa0>
 5e4:	84 27       	eor	r24, r20
 5e6:	8c 93       	st	X, r24
 5e8:	27 c0       	rjmp	.+78     	; 0x638 <GPIO_togglePin+0xfc>
						break;

					case PORTC_ID :

				/* Common Macro function to Toggle a bit*/
						TOGGLE_BIT(PORTC,a_pinNum);
 5ea:	a5 e3       	ldi	r26, 0x35	; 53
 5ec:	b0 e0       	ldi	r27, 0x00	; 0
 5ee:	e5 e3       	ldi	r30, 0x35	; 53
 5f0:	f0 e0       	ldi	r31, 0x00	; 0
 5f2:	80 81       	ld	r24, Z
 5f4:	48 2f       	mov	r20, r24
 5f6:	8a 81       	ldd	r24, Y+2	; 0x02
 5f8:	28 2f       	mov	r18, r24
 5fa:	30 e0       	ldi	r19, 0x00	; 0
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	02 2e       	mov	r0, r18
 602:	02 c0       	rjmp	.+4      	; 0x608 <GPIO_togglePin+0xcc>
 604:	88 0f       	add	r24, r24
 606:	99 1f       	adc	r25, r25
 608:	0a 94       	dec	r0
 60a:	e2 f7       	brpl	.-8      	; 0x604 <GPIO_togglePin+0xc8>
 60c:	84 27       	eor	r24, r20
 60e:	8c 93       	st	X, r24
 610:	13 c0       	rjmp	.+38     	; 0x638 <GPIO_togglePin+0xfc>
						break;

					case PORTD_ID :

				/* Common Macro function to Toggle a bit*/
						TOGGLE_BIT(PORTD,a_pinNum);
 612:	a2 e3       	ldi	r26, 0x32	; 50
 614:	b0 e0       	ldi	r27, 0x00	; 0
 616:	e2 e3       	ldi	r30, 0x32	; 50
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	80 81       	ld	r24, Z
 61c:	48 2f       	mov	r20, r24
 61e:	8a 81       	ldd	r24, Y+2	; 0x02
 620:	28 2f       	mov	r18, r24
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	02 2e       	mov	r0, r18
 62a:	02 c0       	rjmp	.+4      	; 0x630 <GPIO_togglePin+0xf4>
 62c:	88 0f       	add	r24, r24
 62e:	99 1f       	adc	r25, r25
 630:	0a 94       	dec	r0
 632:	e2 f7       	brpl	.-8      	; 0x62c <GPIO_togglePin+0xf0>
 634:	84 27       	eor	r24, r20
 636:	8c 93       	st	X, r24


		}


}
 638:	0f 90       	pop	r0
 63a:	0f 90       	pop	r0
 63c:	0f 90       	pop	r0
 63e:	0f 90       	pop	r0
 640:	cf 91       	pop	r28
 642:	df 91       	pop	r29
 644:	08 95       	ret

00000646 <GPIO_readPin>:



/* Reading the value on an Input pin and returning it's value */
uint8 GPIO_readPin( uint8 a_portNum,uint8 a_pinNum )
{
 646:	df 93       	push	r29
 648:	cf 93       	push	r28
 64a:	00 d0       	rcall	.+0      	; 0x64c <GPIO_readPin+0x6>
 64c:	00 d0       	rcall	.+0      	; 0x64e <GPIO_readPin+0x8>
 64e:	00 d0       	rcall	.+0      	; 0x650 <GPIO_readPin+0xa>
 650:	cd b7       	in	r28, 0x3d	; 61
 652:	de b7       	in	r29, 0x3e	; 62
 654:	8a 83       	std	Y+2, r24	; 0x02
 656:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_pinValue = LOGIC_LOW;
 658:	19 82       	std	Y+1, r1	; 0x01

	/* Checking the number given by the user is valid  for Port number and Pin number */
	if( a_portNum>=GPIO_NUM_OF_PORTS || a_pinNum>=GPIO_NUM_OF_PINS )
 65a:	8a 81       	ldd	r24, Y+2	; 0x02
 65c:	84 30       	cpi	r24, 0x04	; 4
 65e:	18 f4       	brcc	.+6      	; 0x666 <GPIO_readPin+0x20>
 660:	8b 81       	ldd	r24, Y+3	; 0x03
 662:	88 30       	cpi	r24, 0x08	; 8
 664:	18 f0       	brcs	.+6      	; 0x66c <GPIO_readPin+0x26>
	{

		/*------- If the number is not within the range--------*/

						return a_pinValue;
 666:	29 81       	ldd	r18, Y+1	; 0x01
 668:	2e 83       	std	Y+6, r18	; 0x06
 66a:	82 c0       	rjmp	.+260    	; 0x770 <GPIO_readPin+0x12a>

	/*------- If the number is within the range--------*/
	else
	{
		/*------- Selecting the Port you will read a Pin from --------*/
		switch ( a_portNum )
 66c:	8a 81       	ldd	r24, Y+2	; 0x02
 66e:	48 2f       	mov	r20, r24
 670:	50 e0       	ldi	r21, 0x00	; 0
 672:	5d 83       	std	Y+5, r21	; 0x05
 674:	4c 83       	std	Y+4, r20	; 0x04
 676:	8c 81       	ldd	r24, Y+4	; 0x04
 678:	9d 81       	ldd	r25, Y+5	; 0x05
 67a:	81 30       	cpi	r24, 0x01	; 1
 67c:	91 05       	cpc	r25, r1
 67e:	79 f1       	breq	.+94     	; 0x6de <GPIO_readPin+0x98>
 680:	2c 81       	ldd	r18, Y+4	; 0x04
 682:	3d 81       	ldd	r19, Y+5	; 0x05
 684:	22 30       	cpi	r18, 0x02	; 2
 686:	31 05       	cpc	r19, r1
 688:	34 f4       	brge	.+12     	; 0x696 <GPIO_readPin+0x50>
 68a:	4c 81       	ldd	r20, Y+4	; 0x04
 68c:	5d 81       	ldd	r21, Y+5	; 0x05
 68e:	41 15       	cp	r20, r1
 690:	51 05       	cpc	r21, r1
 692:	69 f0       	breq	.+26     	; 0x6ae <GPIO_readPin+0x68>
 694:	6b c0       	rjmp	.+214    	; 0x76c <GPIO_readPin+0x126>
 696:	8c 81       	ldd	r24, Y+4	; 0x04
 698:	9d 81       	ldd	r25, Y+5	; 0x05
 69a:	82 30       	cpi	r24, 0x02	; 2
 69c:	91 05       	cpc	r25, r1
 69e:	b9 f1       	breq	.+110    	; 0x70e <GPIO_readPin+0xc8>
 6a0:	2c 81       	ldd	r18, Y+4	; 0x04
 6a2:	3d 81       	ldd	r19, Y+5	; 0x05
 6a4:	23 30       	cpi	r18, 0x03	; 3
 6a6:	31 05       	cpc	r19, r1
 6a8:	09 f4       	brne	.+2      	; 0x6ac <GPIO_readPin+0x66>
 6aa:	49 c0       	rjmp	.+146    	; 0x73e <GPIO_readPin+0xf8>
 6ac:	5f c0       	rjmp	.+190    	; 0x76c <GPIO_readPin+0x126>
		{
		case PORTA_ID :
		/*------- Checking the Pin value by a Common macro function--------*/
			if( BIT_IS_SET(PINA,a_pinNum) )
 6ae:	e9 e3       	ldi	r30, 0x39	; 57
 6b0:	f0 e0       	ldi	r31, 0x00	; 0
 6b2:	80 81       	ld	r24, Z
 6b4:	28 2f       	mov	r18, r24
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ba:	88 2f       	mov	r24, r24
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	a9 01       	movw	r20, r18
 6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <GPIO_readPin+0x80>
 6c2:	55 95       	asr	r21
 6c4:	47 95       	ror	r20
 6c6:	8a 95       	dec	r24
 6c8:	e2 f7       	brpl	.-8      	; 0x6c2 <GPIO_readPin+0x7c>
 6ca:	ca 01       	movw	r24, r20
 6cc:	81 70       	andi	r24, 0x01	; 1
 6ce:	90 70       	andi	r25, 0x00	; 0
 6d0:	88 23       	and	r24, r24
 6d2:	19 f0       	breq	.+6      	; 0x6da <GPIO_readPin+0x94>
			{
				a_pinValue=LOGIC_HIGH;
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	89 83       	std	Y+1, r24	; 0x01
 6d8:	49 c0       	rjmp	.+146    	; 0x76c <GPIO_readPin+0x126>

			}
			else
				a_pinValue=LOGIC_LOW;
 6da:	19 82       	std	Y+1, r1	; 0x01
 6dc:	47 c0       	rjmp	.+142    	; 0x76c <GPIO_readPin+0x126>

			break;

		case PORTB_ID :
			/*------- Checking the Pin value by a Common macro function--------*/
			if( BIT_IS_SET(PINB,a_pinNum) )
 6de:	e6 e3       	ldi	r30, 0x36	; 54
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	80 81       	ld	r24, Z
 6e4:	28 2f       	mov	r18, r24
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ea:	88 2f       	mov	r24, r24
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	a9 01       	movw	r20, r18
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <GPIO_readPin+0xb0>
 6f2:	55 95       	asr	r21
 6f4:	47 95       	ror	r20
 6f6:	8a 95       	dec	r24
 6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <GPIO_readPin+0xac>
 6fa:	ca 01       	movw	r24, r20
 6fc:	81 70       	andi	r24, 0x01	; 1
 6fe:	90 70       	andi	r25, 0x00	; 0
 700:	88 23       	and	r24, r24
 702:	19 f0       	breq	.+6      	; 0x70a <GPIO_readPin+0xc4>
			{
				a_pinValue=LOGIC_HIGH;
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	89 83       	std	Y+1, r24	; 0x01
 708:	31 c0       	rjmp	.+98     	; 0x76c <GPIO_readPin+0x126>

			}
			else
				a_pinValue=LOGIC_LOW;
 70a:	19 82       	std	Y+1, r1	; 0x01
 70c:	2f c0       	rjmp	.+94     	; 0x76c <GPIO_readPin+0x126>

					break;

		case PORTC_ID :
			/*------- Checking the Pin value by a Common macro function--------*/
			if( BIT_IS_SET(PINC,a_pinNum) )
 70e:	e3 e3       	ldi	r30, 0x33	; 51
 710:	f0 e0       	ldi	r31, 0x00	; 0
 712:	80 81       	ld	r24, Z
 714:	28 2f       	mov	r18, r24
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	8b 81       	ldd	r24, Y+3	; 0x03
 71a:	88 2f       	mov	r24, r24
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	a9 01       	movw	r20, r18
 720:	02 c0       	rjmp	.+4      	; 0x726 <GPIO_readPin+0xe0>
 722:	55 95       	asr	r21
 724:	47 95       	ror	r20
 726:	8a 95       	dec	r24
 728:	e2 f7       	brpl	.-8      	; 0x722 <GPIO_readPin+0xdc>
 72a:	ca 01       	movw	r24, r20
 72c:	81 70       	andi	r24, 0x01	; 1
 72e:	90 70       	andi	r25, 0x00	; 0
 730:	88 23       	and	r24, r24
 732:	19 f0       	breq	.+6      	; 0x73a <GPIO_readPin+0xf4>
			{
				a_pinValue=LOGIC_HIGH;
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	89 83       	std	Y+1, r24	; 0x01
 738:	19 c0       	rjmp	.+50     	; 0x76c <GPIO_readPin+0x126>

			}
			else
				a_pinValue=LOGIC_LOW;
 73a:	19 82       	std	Y+1, r1	; 0x01
 73c:	17 c0       	rjmp	.+46     	; 0x76c <GPIO_readPin+0x126>
					break;

		case PORTD_ID :
			/*------- Checking the Pin value by a Common macro function--------*/

			if( BIT_IS_SET(PIND,a_pinNum) )
 73e:	e0 e3       	ldi	r30, 0x30	; 48
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	80 81       	ld	r24, Z
 744:	28 2f       	mov	r18, r24
 746:	30 e0       	ldi	r19, 0x00	; 0
 748:	8b 81       	ldd	r24, Y+3	; 0x03
 74a:	88 2f       	mov	r24, r24
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	a9 01       	movw	r20, r18
 750:	02 c0       	rjmp	.+4      	; 0x756 <GPIO_readPin+0x110>
 752:	55 95       	asr	r21
 754:	47 95       	ror	r20
 756:	8a 95       	dec	r24
 758:	e2 f7       	brpl	.-8      	; 0x752 <GPIO_readPin+0x10c>
 75a:	ca 01       	movw	r24, r20
 75c:	81 70       	andi	r24, 0x01	; 1
 75e:	90 70       	andi	r25, 0x00	; 0
 760:	88 23       	and	r24, r24
 762:	19 f0       	breq	.+6      	; 0x76a <GPIO_readPin+0x124>
			{
				a_pinValue=LOGIC_HIGH;
 764:	81 e0       	ldi	r24, 0x01	; 1
 766:	89 83       	std	Y+1, r24	; 0x01
 768:	01 c0       	rjmp	.+2      	; 0x76c <GPIO_readPin+0x126>

			}
			else
				a_pinValue=LOGIC_LOW;
 76a:	19 82       	std	Y+1, r1	; 0x01
		}


	}

	return a_pinValue;
 76c:	59 81       	ldd	r21, Y+1	; 0x01
 76e:	5e 83       	std	Y+6, r21	; 0x06
 770:	8e 81       	ldd	r24, Y+6	; 0x06
}
 772:	26 96       	adiw	r28, 0x06	; 6
 774:	0f b6       	in	r0, 0x3f	; 63
 776:	f8 94       	cli
 778:	de bf       	out	0x3e, r29	; 62
 77a:	0f be       	out	0x3f, r0	; 63
 77c:	cd bf       	out	0x3d, r28	; 61
 77e:	cf 91       	pop	r28
 780:	df 91       	pop	r29
 782:	08 95       	ret

00000784 <GPIO_setupPortDirection>:


/* Setting the whole Port to be either Input or Output Port
 * */
void GPIO_setupPortDirection( uint8 a_portNum,GPIO_PortDirectionType a_direction )
{
 784:	df 93       	push	r29
 786:	cf 93       	push	r28
 788:	00 d0       	rcall	.+0      	; 0x78a <GPIO_setupPortDirection+0x6>
 78a:	00 d0       	rcall	.+0      	; 0x78c <GPIO_setupPortDirection+0x8>
 78c:	cd b7       	in	r28, 0x3d	; 61
 78e:	de b7       	in	r29, 0x3e	; 62
 790:	89 83       	std	Y+1, r24	; 0x01
 792:	6a 83       	std	Y+2, r22	; 0x02
	/* Checking the number given by the user is valid  for Port number and Pin number
	 *
	 *
	 *  Direction of Port must be either PORT_INPUT or PORT_OUTPUT
	 *  */
	if( a_portNum>=GPIO_NUM_OF_PORTS || ((a_direction !=PORT_INPUT ) && (a_direction !=PORT_OUTPUT )) )
 794:	89 81       	ldd	r24, Y+1	; 0x01
 796:	84 30       	cpi	r24, 0x04	; 4
 798:	c0 f5       	brcc	.+112    	; 0x80a <GPIO_setupPortDirection+0x86>
 79a:	8a 81       	ldd	r24, Y+2	; 0x02
 79c:	88 23       	and	r24, r24
 79e:	19 f0       	breq	.+6      	; 0x7a6 <GPIO_setupPortDirection+0x22>
 7a0:	8a 81       	ldd	r24, Y+2	; 0x02
 7a2:	8f 3f       	cpi	r24, 0xFF	; 255
 7a4:	91 f5       	brne	.+100    	; 0x80a <GPIO_setupPortDirection+0x86>

		/*------- If the number is within the range--------*/
	else
	{
		/*------- Selecting the Port you will set the it's Direction --------*/
		switch ( a_portNum )
 7a6:	89 81       	ldd	r24, Y+1	; 0x01
 7a8:	28 2f       	mov	r18, r24
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	3c 83       	std	Y+4, r19	; 0x04
 7ae:	2b 83       	std	Y+3, r18	; 0x03
 7b0:	8b 81       	ldd	r24, Y+3	; 0x03
 7b2:	9c 81       	ldd	r25, Y+4	; 0x04
 7b4:	81 30       	cpi	r24, 0x01	; 1
 7b6:	91 05       	cpc	r25, r1
 7b8:	d1 f0       	breq	.+52     	; 0x7ee <GPIO_setupPortDirection+0x6a>
 7ba:	2b 81       	ldd	r18, Y+3	; 0x03
 7bc:	3c 81       	ldd	r19, Y+4	; 0x04
 7be:	22 30       	cpi	r18, 0x02	; 2
 7c0:	31 05       	cpc	r19, r1
 7c2:	2c f4       	brge	.+10     	; 0x7ce <GPIO_setupPortDirection+0x4a>
 7c4:	8b 81       	ldd	r24, Y+3	; 0x03
 7c6:	9c 81       	ldd	r25, Y+4	; 0x04
 7c8:	00 97       	sbiw	r24, 0x00	; 0
 7ca:	61 f0       	breq	.+24     	; 0x7e4 <GPIO_setupPortDirection+0x60>
 7cc:	1e c0       	rjmp	.+60     	; 0x80a <GPIO_setupPortDirection+0x86>
 7ce:	2b 81       	ldd	r18, Y+3	; 0x03
 7d0:	3c 81       	ldd	r19, Y+4	; 0x04
 7d2:	22 30       	cpi	r18, 0x02	; 2
 7d4:	31 05       	cpc	r19, r1
 7d6:	81 f0       	breq	.+32     	; 0x7f8 <GPIO_setupPortDirection+0x74>
 7d8:	8b 81       	ldd	r24, Y+3	; 0x03
 7da:	9c 81       	ldd	r25, Y+4	; 0x04
 7dc:	83 30       	cpi	r24, 0x03	; 3
 7de:	91 05       	cpc	r25, r1
 7e0:	81 f0       	breq	.+32     	; 0x802 <GPIO_setupPortDirection+0x7e>
 7e2:	13 c0       	rjmp	.+38     	; 0x80a <GPIO_setupPortDirection+0x86>
		{
				case PORTA_ID :

				DDRA=a_direction;
 7e4:	ea e3       	ldi	r30, 0x3A	; 58
 7e6:	f0 e0       	ldi	r31, 0x00	; 0
 7e8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ea:	80 83       	st	Z, r24
 7ec:	0e c0       	rjmp	.+28     	; 0x80a <GPIO_setupPortDirection+0x86>

					break;

				case PORTB_ID :

				DDRB=a_direction;
 7ee:	e7 e3       	ldi	r30, 0x37	; 55
 7f0:	f0 e0       	ldi	r31, 0x00	; 0
 7f2:	8a 81       	ldd	r24, Y+2	; 0x02
 7f4:	80 83       	st	Z, r24
 7f6:	09 c0       	rjmp	.+18     	; 0x80a <GPIO_setupPortDirection+0x86>

					break;

				case PORTC_ID :

				DDRC=a_direction;
 7f8:	e4 e3       	ldi	r30, 0x34	; 52
 7fa:	f0 e0       	ldi	r31, 0x00	; 0
 7fc:	8a 81       	ldd	r24, Y+2	; 0x02
 7fe:	80 83       	st	Z, r24
 800:	04 c0       	rjmp	.+8      	; 0x80a <GPIO_setupPortDirection+0x86>

					break;

				case PORTD_ID :

				DDRD=a_direction;
 802:	e1 e3       	ldi	r30, 0x31	; 49
 804:	f0 e0       	ldi	r31, 0x00	; 0
 806:	8a 81       	ldd	r24, Y+2	; 0x02
 808:	80 83       	st	Z, r24





}
 80a:	0f 90       	pop	r0
 80c:	0f 90       	pop	r0
 80e:	0f 90       	pop	r0
 810:	0f 90       	pop	r0
 812:	cf 91       	pop	r28
 814:	df 91       	pop	r29
 816:	08 95       	ret

00000818 <GPIO_writePort>:



/* Writing any value ranged between (0000 0000 "0x00") to (1111 1111 "0xFF") on a Port */
void GPIO_writePort( uint8 a_portNum,uint8 a_value )
{
 818:	df 93       	push	r29
 81a:	cf 93       	push	r28
 81c:	00 d0       	rcall	.+0      	; 0x81e <GPIO_writePort+0x6>
 81e:	00 d0       	rcall	.+0      	; 0x820 <GPIO_writePort+0x8>
 820:	cd b7       	in	r28, 0x3d	; 61
 822:	de b7       	in	r29, 0x3e	; 62
 824:	89 83       	std	Y+1, r24	; 0x01
 826:	6a 83       	std	Y+2, r22	; 0x02

	/* Checking the number given by the user is valid  for Port number and Pin number
	 *
	 */
	if( a_portNum>=GPIO_NUM_OF_PORTS )
 828:	89 81       	ldd	r24, Y+1	; 0x01
 82a:	84 30       	cpi	r24, 0x04	; 4
 82c:	90 f5       	brcc	.+100    	; 0x892 <__stack+0x33>
			/*------- If the number is within the range--------*/
	else
	{

	/*------- Selecting the Port you will write a value on --------*/
	switch (a_portNum)
 82e:	89 81       	ldd	r24, Y+1	; 0x01
 830:	28 2f       	mov	r18, r24
 832:	30 e0       	ldi	r19, 0x00	; 0
 834:	3c 83       	std	Y+4, r19	; 0x04
 836:	2b 83       	std	Y+3, r18	; 0x03
 838:	8b 81       	ldd	r24, Y+3	; 0x03
 83a:	9c 81       	ldd	r25, Y+4	; 0x04
 83c:	81 30       	cpi	r24, 0x01	; 1
 83e:	91 05       	cpc	r25, r1
 840:	d1 f0       	breq	.+52     	; 0x876 <__stack+0x17>
 842:	2b 81       	ldd	r18, Y+3	; 0x03
 844:	3c 81       	ldd	r19, Y+4	; 0x04
 846:	22 30       	cpi	r18, 0x02	; 2
 848:	31 05       	cpc	r19, r1
 84a:	2c f4       	brge	.+10     	; 0x856 <GPIO_writePort+0x3e>
 84c:	8b 81       	ldd	r24, Y+3	; 0x03
 84e:	9c 81       	ldd	r25, Y+4	; 0x04
 850:	00 97       	sbiw	r24, 0x00	; 0
 852:	61 f0       	breq	.+24     	; 0x86c <__stack+0xd>
 854:	1e c0       	rjmp	.+60     	; 0x892 <__stack+0x33>
 856:	2b 81       	ldd	r18, Y+3	; 0x03
 858:	3c 81       	ldd	r19, Y+4	; 0x04
 85a:	22 30       	cpi	r18, 0x02	; 2
 85c:	31 05       	cpc	r19, r1
 85e:	81 f0       	breq	.+32     	; 0x880 <__stack+0x21>
 860:	8b 81       	ldd	r24, Y+3	; 0x03
 862:	9c 81       	ldd	r25, Y+4	; 0x04
 864:	83 30       	cpi	r24, 0x03	; 3
 866:	91 05       	cpc	r25, r1
 868:	81 f0       	breq	.+32     	; 0x88a <__stack+0x2b>
 86a:	13 c0       	rjmp	.+38     	; 0x892 <__stack+0x33>
			{
			case PORTA_ID :
				PORTA=a_value;
 86c:	eb e3       	ldi	r30, 0x3B	; 59
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	8a 81       	ldd	r24, Y+2	; 0x02
 872:	80 83       	st	Z, r24
 874:	0e c0       	rjmp	.+28     	; 0x892 <__stack+0x33>
				break;

			case PORTB_ID :
				PORTB=a_value;
 876:	e8 e3       	ldi	r30, 0x38	; 56
 878:	f0 e0       	ldi	r31, 0x00	; 0
 87a:	8a 81       	ldd	r24, Y+2	; 0x02
 87c:	80 83       	st	Z, r24
 87e:	09 c0       	rjmp	.+18     	; 0x892 <__stack+0x33>
						break;

			case PORTC_ID :
				PORTC=a_value;
 880:	e5 e3       	ldi	r30, 0x35	; 53
 882:	f0 e0       	ldi	r31, 0x00	; 0
 884:	8a 81       	ldd	r24, Y+2	; 0x02
 886:	80 83       	st	Z, r24
 888:	04 c0       	rjmp	.+8      	; 0x892 <__stack+0x33>
						break;

			case PORTD_ID :
				PORTD=a_value;
 88a:	e2 e3       	ldi	r30, 0x32	; 50
 88c:	f0 e0       	ldi	r31, 0x00	; 0
 88e:	8a 81       	ldd	r24, Y+2	; 0x02
 890:	80 83       	st	Z, r24
						break;

			}
	}

}
 892:	0f 90       	pop	r0
 894:	0f 90       	pop	r0
 896:	0f 90       	pop	r0
 898:	0f 90       	pop	r0
 89a:	cf 91       	pop	r28
 89c:	df 91       	pop	r29
 89e:	08 95       	ret

000008a0 <GPIO_readPort>:


/* Reading any value ranged between (0000 0000 "0x00") to (1111 1111 "0xFF") on a Port */
uint8 GPIO_readPort(uint8 a_portNum)
{
 8a0:	df 93       	push	r29
 8a2:	cf 93       	push	r28
 8a4:	00 d0       	rcall	.+0      	; 0x8a6 <GPIO_readPort+0x6>
 8a6:	00 d0       	rcall	.+0      	; 0x8a8 <GPIO_readPort+0x8>
 8a8:	cd b7       	in	r28, 0x3d	; 61
 8aa:	de b7       	in	r29, 0x3e	; 62
 8ac:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_portValue;
	/* Checking the number given by the user is valid  for Port number and Pin number */
	if( a_portNum>=GPIO_NUM_OF_PORTS )
 8ae:	8a 81       	ldd	r24, Y+2	; 0x02
 8b0:	84 30       	cpi	r24, 0x04	; 4
 8b2:	90 f5       	brcc	.+100    	; 0x918 <GPIO_readPort+0x78>
				/*------- If the number is within the range--------*/
		else
		{

			/*------- Selecting the Port you will read a value from --------*/
		switch (a_portNum)
 8b4:	8a 81       	ldd	r24, Y+2	; 0x02
 8b6:	28 2f       	mov	r18, r24
 8b8:	30 e0       	ldi	r19, 0x00	; 0
 8ba:	3c 83       	std	Y+4, r19	; 0x04
 8bc:	2b 83       	std	Y+3, r18	; 0x03
 8be:	8b 81       	ldd	r24, Y+3	; 0x03
 8c0:	9c 81       	ldd	r25, Y+4	; 0x04
 8c2:	81 30       	cpi	r24, 0x01	; 1
 8c4:	91 05       	cpc	r25, r1
 8c6:	d1 f0       	breq	.+52     	; 0x8fc <GPIO_readPort+0x5c>
 8c8:	2b 81       	ldd	r18, Y+3	; 0x03
 8ca:	3c 81       	ldd	r19, Y+4	; 0x04
 8cc:	22 30       	cpi	r18, 0x02	; 2
 8ce:	31 05       	cpc	r19, r1
 8d0:	2c f4       	brge	.+10     	; 0x8dc <GPIO_readPort+0x3c>
 8d2:	8b 81       	ldd	r24, Y+3	; 0x03
 8d4:	9c 81       	ldd	r25, Y+4	; 0x04
 8d6:	00 97       	sbiw	r24, 0x00	; 0
 8d8:	61 f0       	breq	.+24     	; 0x8f2 <GPIO_readPort+0x52>
 8da:	1e c0       	rjmp	.+60     	; 0x918 <GPIO_readPort+0x78>
 8dc:	2b 81       	ldd	r18, Y+3	; 0x03
 8de:	3c 81       	ldd	r19, Y+4	; 0x04
 8e0:	22 30       	cpi	r18, 0x02	; 2
 8e2:	31 05       	cpc	r19, r1
 8e4:	81 f0       	breq	.+32     	; 0x906 <GPIO_readPort+0x66>
 8e6:	8b 81       	ldd	r24, Y+3	; 0x03
 8e8:	9c 81       	ldd	r25, Y+4	; 0x04
 8ea:	83 30       	cpi	r24, 0x03	; 3
 8ec:	91 05       	cpc	r25, r1
 8ee:	81 f0       	breq	.+32     	; 0x910 <GPIO_readPort+0x70>
 8f0:	13 c0       	rjmp	.+38     	; 0x918 <GPIO_readPort+0x78>
				{
				case PORTA_ID :

					a_portValue=PINA;
 8f2:	e9 e3       	ldi	r30, 0x39	; 57
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	80 81       	ld	r24, Z
 8f8:	89 83       	std	Y+1, r24	; 0x01
 8fa:	0e c0       	rjmp	.+28     	; 0x918 <GPIO_readPort+0x78>

					break;

				case PORTB_ID :

					a_portValue=PINB;
 8fc:	e6 e3       	ldi	r30, 0x36	; 54
 8fe:	f0 e0       	ldi	r31, 0x00	; 0
 900:	80 81       	ld	r24, Z
 902:	89 83       	std	Y+1, r24	; 0x01
 904:	09 c0       	rjmp	.+18     	; 0x918 <GPIO_readPort+0x78>

					break;

				case PORTC_ID :

					a_portValue=PINC;
 906:	e3 e3       	ldi	r30, 0x33	; 51
 908:	f0 e0       	ldi	r31, 0x00	; 0
 90a:	80 81       	ld	r24, Z
 90c:	89 83       	std	Y+1, r24	; 0x01
 90e:	04 c0       	rjmp	.+8      	; 0x918 <GPIO_readPort+0x78>

					break;

				case PORTD_ID :

					a_portValue=PIND;
 910:	e0 e3       	ldi	r30, 0x30	; 48
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	80 81       	ld	r24, Z
 916:	89 83       	std	Y+1, r24	; 0x01
					;
				}

		}

	return a_portValue;
 918:	89 81       	ldd	r24, Y+1	; 0x01

}
 91a:	0f 90       	pop	r0
 91c:	0f 90       	pop	r0
 91e:	0f 90       	pop	r0
 920:	0f 90       	pop	r0
 922:	cf 91       	pop	r28
 924:	df 91       	pop	r29
 926:	08 95       	ret

00000928 <_exit>:
 928:	f8 94       	cli

0000092a <__stop_program>:
 92a:	ff cf       	rjmp	.-2      	; 0x92a <__stop_program>
