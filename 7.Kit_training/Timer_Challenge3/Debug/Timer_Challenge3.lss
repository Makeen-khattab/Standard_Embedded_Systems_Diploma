
Timer_Challenge3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000360  00000000  00000000  0000011c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006ba  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/interrupt.h>
#include<util/delay.h>
void Timer0_Pwm(unsigned char);
#define F_CPU					8000000UL
int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	/* Application initialization*/
	Timer0_Pwm(128);
  74:	80 e8       	ldi	r24, 0x80	; 128
  76:	0e 94 3e 00 	call	0x7c	; 0x7c <Timer0_Pwm>
  7a:	ff cf       	rjmp	.-2      	; 0x7a <main+0xe>

0000007c <Timer0_Pwm>:
				}


}
void Timer0_Pwm(unsigned char Duty_Cycle)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	0f 92       	push	r0
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	89 83       	std	Y+1, r24	; 0x01

	/*We will not Activate the global interrupt flag is the PWM automatically Toggle the state of the pin
		* Also we will not activate FOC0 as its activated in any mode rather than PWM*/

		DDRB|=(1<<PB3);// We must define oc0 as an output and it is initially given High Voltage
  88:	a7 e3       	ldi	r26, 0x37	; 55
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	e7 e3       	ldi	r30, 0x37	; 55
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	88 60       	ori	r24, 0x08	; 8
  94:	8c 93       	st	X, r24
		TCCR0= (1<<WGM00) | (1<<WGM01) | (1<<COM01)|(1<<CS01);
  96:	e3 e5       	ldi	r30, 0x53	; 83
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	8a e6       	ldi	r24, 0x6A	; 106
  9c:	80 83       	st	Z, r24
		TCNT0=0;
  9e:	e2 e5       	ldi	r30, 0x52	; 82
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	10 82       	st	Z, r1
		OCR0=Duty_Cycle;
  a4:	ec e5       	ldi	r30, 0x5C	; 92
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	80 83       	st	Z, r24
		TIMSK=(TIMSK&0xFC);// Setting the peripheral interrupt enable to 0;
  ac:	a9 e5       	ldi	r26, 0x59	; 89
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e9 e5       	ldi	r30, 0x59	; 89
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8c 7f       	andi	r24, 0xFC	; 252
  b8:	8c 93       	st	X, r24


}
  ba:	0f 90       	pop	r0
  bc:	cf 91       	pop	r28
  be:	df 91       	pop	r29
  c0:	08 95       	ret

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
