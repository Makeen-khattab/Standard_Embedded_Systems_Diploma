
Dc_Motor_Ex1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000154  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003c0  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006fc  00000000  00000000  00000568  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
	ANTI_CLOCK_WISE,
	STOP
} Motor_Direction;
void Motor(Motor_Direction);
int main(void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	/* Application initialization*/
		DDRA&= (~(1<<PA0))&(~(1<<PA1))&(~(1<<PA2));
  74:	aa e3       	ldi	r26, 0x3A	; 58
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	ea e3       	ldi	r30, 0x3A	; 58
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	88 7f       	andi	r24, 0xF8	; 248
  80:	8c 93       	st	X, r24
		DDRC|= (1<<PC0) | (1<<PC1);
  82:	a4 e3       	ldi	r26, 0x34	; 52
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e4 e3       	ldi	r30, 0x34	; 52
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	83 60       	ori	r24, 0x03	; 3
  8e:	8c 93       	st	X, r24
			/* Super_Loop*/
				while(1)
				{

if((1<<PA0 )& (PINA))
  90:	e9 e3       	ldi	r30, 0x39	; 57
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	88 2f       	mov	r24, r24
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	81 70       	andi	r24, 0x01	; 1
  9c:	90 70       	andi	r25, 0x00	; 0
  9e:	88 23       	and	r24, r24
  a0:	21 f0       	breq	.+8      	; 0xaa <main+0x3e>
{

	Motor(CLOCK_WISE);
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	0e 94 6f 00 	call	0xde	; 0xde <Motor>
  a8:	f3 cf       	rjmp	.-26     	; 0x90 <main+0x24>

}
else if((1<<PA1 )& (PINA))
  aa:	e9 e3       	ldi	r30, 0x39	; 57
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	88 2f       	mov	r24, r24
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	82 70       	andi	r24, 0x02	; 2
  b6:	90 70       	andi	r25, 0x00	; 0
  b8:	00 97       	sbiw	r24, 0x00	; 0
  ba:	21 f0       	breq	.+8      	; 0xc4 <main+0x58>
{

	Motor(ANTI_CLOCK_WISE);
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 6f 00 	call	0xde	; 0xde <Motor>
  c2:	e6 cf       	rjmp	.-52     	; 0x90 <main+0x24>

}
else if((1<<PA2 )& (PINA))
  c4:	e9 e3       	ldi	r30, 0x39	; 57
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	88 2f       	mov	r24, r24
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	84 70       	andi	r24, 0x04	; 4
  d0:	90 70       	andi	r25, 0x00	; 0
  d2:	00 97       	sbiw	r24, 0x00	; 0
  d4:	e9 f2       	breq	.-70     	; 0x90 <main+0x24>
{

	Motor(STOP);
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	0e 94 6f 00 	call	0xde	; 0xde <Motor>
  dc:	d9 cf       	rjmp	.-78     	; 0x90 <main+0x24>

000000de <Motor>:
				}


}
void Motor(Motor_Direction Direction)
{
  de:	df 93       	push	r29
  e0:	cf 93       	push	r28
  e2:	00 d0       	rcall	.+0      	; 0xe4 <Motor+0x6>
  e4:	0f 92       	push	r0
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
  ea:	89 83       	std	Y+1, r24	; 0x01
	switch(Direction)
  ec:	89 81       	ldd	r24, Y+1	; 0x01
  ee:	28 2f       	mov	r18, r24
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	3b 83       	std	Y+3, r19	; 0x03
  f4:	2a 83       	std	Y+2, r18	; 0x02
  f6:	8a 81       	ldd	r24, Y+2	; 0x02
  f8:	9b 81       	ldd	r25, Y+3	; 0x03
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	91 05       	cpc	r25, r1
  fe:	91 f0       	breq	.+36     	; 0x124 <Motor+0x46>
 100:	2a 81       	ldd	r18, Y+2	; 0x02
 102:	3b 81       	ldd	r19, Y+3	; 0x03
 104:	22 30       	cpi	r18, 0x02	; 2
 106:	31 05       	cpc	r19, r1
 108:	b1 f0       	breq	.+44     	; 0x136 <Motor+0x58>
 10a:	8a 81       	ldd	r24, Y+2	; 0x02
 10c:	9b 81       	ldd	r25, Y+3	; 0x03
 10e:	00 97       	sbiw	r24, 0x00	; 0
 110:	c9 f4       	brne	.+50     	; 0x144 <Motor+0x66>
	{
	case CLOCK_WISE:
	PORTC= (PORTC&0xFC) | 1<<PC1;
 112:	a5 e3       	ldi	r26, 0x35	; 53
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	e5 e3       	ldi	r30, 0x35	; 53
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	80 81       	ld	r24, Z
 11c:	8c 7f       	andi	r24, 0xFC	; 252
 11e:	82 60       	ori	r24, 0x02	; 2
 120:	8c 93       	st	X, r24
 122:	10 c0       	rjmp	.+32     	; 0x144 <Motor+0x66>
	break;
	case ANTI_CLOCK_WISE:
		PORTC= (PORTC&0xFC) | 1<<PC0;
 124:	a5 e3       	ldi	r26, 0x35	; 53
 126:	b0 e0       	ldi	r27, 0x00	; 0
 128:	e5 e3       	ldi	r30, 0x35	; 53
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	8c 7f       	andi	r24, 0xFC	; 252
 130:	81 60       	ori	r24, 0x01	; 1
 132:	8c 93       	st	X, r24
 134:	07 c0       	rjmp	.+14     	; 0x144 <Motor+0x66>
		break;
	case STOP:
		PORTC= (PORTC&0xFC);
 136:	a5 e3       	ldi	r26, 0x35	; 53
 138:	b0 e0       	ldi	r27, 0x00	; 0
 13a:	e5 e3       	ldi	r30, 0x35	; 53
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	8c 7f       	andi	r24, 0xFC	; 252
 142:	8c 93       	st	X, r24
	}


}
 144:	0f 90       	pop	r0
 146:	0f 90       	pop	r0
 148:	0f 90       	pop	r0
 14a:	cf 91       	pop	r28
 14c:	df 91       	pop	r29
 14e:	08 95       	ret

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
