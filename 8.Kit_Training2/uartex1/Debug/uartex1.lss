
uartex1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a36  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00002a36  00002aaa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002004  00000000  00000000  00002abc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000010b0  00000000  00000000  00004ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007a69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008954  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009704  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009864  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009af1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a2bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 89 14 	call	0x2912	; 0x2912 <main>
      7a:	0c 94 19 15 	jmp	0x2a32	; 0x2a32 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 f2 14 	jmp	0x29e4	; 0x29e4 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <GPIO_setupPinDirection>:
/*-----------------------FUNCTION Definitions------------------*/


/* Setting the pin on each port to be either Input pin or Output pin */
void GPIO_setupPinDirection( uint8 a_portNum,uint8 a_pinNum,GPIO_PinDirectionType a_direction )
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <GPIO_setupPinDirection+0x6>
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <GPIO_setupPinDirection+0x8>
     b3e:	0f 92       	push	r0
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	89 83       	std	Y+1, r24	; 0x01
     b46:	6a 83       	std	Y+2, r22	; 0x02
     b48:	4b 83       	std	Y+3, r20	; 0x03

	/* Checking the number given by the user is valid  for Port number and Pin number */
	if( a_portNum>=GPIO_NUM_OF_PORTS || a_pinNum>=GPIO_NUM_OF_PINS )
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	84 30       	cpi	r24, 0x04	; 4
     b4e:	08 f0       	brcs	.+2      	; 0xb52 <GPIO_setupPinDirection+0x1c>
     b50:	e4 c0       	rjmp	.+456    	; 0xd1a <GPIO_setupPinDirection+0x1e4>
     b52:	8a 81       	ldd	r24, Y+2	; 0x02
     b54:	88 30       	cpi	r24, 0x08	; 8
     b56:	08 f0       	brcs	.+2      	; 0xb5a <GPIO_setupPinDirection+0x24>
     b58:	e0 c0       	rjmp	.+448    	; 0xd1a <GPIO_setupPinDirection+0x1e4>
	/*------- If the number is within the range--------*/
	else
	{

		/*------- Selecting the Port you will set the Pin Direction in --------*/
		switch ( a_portNum )
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	28 2f       	mov	r18, r24
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	3d 83       	std	Y+5, r19	; 0x05
     b62:	2c 83       	std	Y+4, r18	; 0x04
     b64:	8c 81       	ldd	r24, Y+4	; 0x04
     b66:	9d 81       	ldd	r25, Y+5	; 0x05
     b68:	81 30       	cpi	r24, 0x01	; 1
     b6a:	91 05       	cpc	r25, r1
     b6c:	09 f4       	brne	.+2      	; 0xb70 <GPIO_setupPinDirection+0x3a>
     b6e:	47 c0       	rjmp	.+142    	; 0xbfe <GPIO_setupPinDirection+0xc8>
     b70:	2c 81       	ldd	r18, Y+4	; 0x04
     b72:	3d 81       	ldd	r19, Y+5	; 0x05
     b74:	22 30       	cpi	r18, 0x02	; 2
     b76:	31 05       	cpc	r19, r1
     b78:	2c f4       	brge	.+10     	; 0xb84 <GPIO_setupPinDirection+0x4e>
     b7a:	8c 81       	ldd	r24, Y+4	; 0x04
     b7c:	9d 81       	ldd	r25, Y+5	; 0x05
     b7e:	00 97       	sbiw	r24, 0x00	; 0
     b80:	71 f0       	breq	.+28     	; 0xb9e <GPIO_setupPinDirection+0x68>
     b82:	cb c0       	rjmp	.+406    	; 0xd1a <GPIO_setupPinDirection+0x1e4>
     b84:	2c 81       	ldd	r18, Y+4	; 0x04
     b86:	3d 81       	ldd	r19, Y+5	; 0x05
     b88:	22 30       	cpi	r18, 0x02	; 2
     b8a:	31 05       	cpc	r19, r1
     b8c:	09 f4       	brne	.+2      	; 0xb90 <GPIO_setupPinDirection+0x5a>
     b8e:	67 c0       	rjmp	.+206    	; 0xc5e <GPIO_setupPinDirection+0x128>
     b90:	8c 81       	ldd	r24, Y+4	; 0x04
     b92:	9d 81       	ldd	r25, Y+5	; 0x05
     b94:	83 30       	cpi	r24, 0x03	; 3
     b96:	91 05       	cpc	r25, r1
     b98:	09 f4       	brne	.+2      	; 0xb9c <GPIO_setupPinDirection+0x66>
     b9a:	91 c0       	rjmp	.+290    	; 0xcbe <GPIO_setupPinDirection+0x188>
     b9c:	be c0       	rjmp	.+380    	; 0xd1a <GPIO_setupPinDirection+0x1e4>
		{

				case PORTA_ID :

		/*------- Selecting the Mode you will set the Pin Direction to --------*/
					if( a_direction == PIN_INPUT)
     b9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ba0:	88 23       	and	r24, r24
     ba2:	a9 f4       	brne	.+42     	; 0xbce <GPIO_setupPinDirection+0x98>
					{

						/* Common Macro function to clear a bit*/
						CLEAR_BIT( DDRA,a_pinNum );
     ba4:	aa e3       	ldi	r26, 0x3A	; 58
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	ea e3       	ldi	r30, 0x3A	; 58
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	48 2f       	mov	r20, r24
     bb0:	8a 81       	ldd	r24, Y+2	; 0x02
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	02 2e       	mov	r0, r18
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <GPIO_setupPinDirection+0x8c>
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	0a 94       	dec	r0
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <GPIO_setupPinDirection+0x88>
     bc6:	80 95       	com	r24
     bc8:	84 23       	and	r24, r20
     bca:	8c 93       	st	X, r24
     bcc:	a6 c0       	rjmp	.+332    	; 0xd1a <GPIO_setupPinDirection+0x1e4>

					}
					else if ( a_direction == PIN_OUTPUT )
     bce:	8b 81       	ldd	r24, Y+3	; 0x03
     bd0:	81 30       	cpi	r24, 0x01	; 1
     bd2:	09 f0       	breq	.+2      	; 0xbd6 <GPIO_setupPinDirection+0xa0>
     bd4:	a2 c0       	rjmp	.+324    	; 0xd1a <GPIO_setupPinDirection+0x1e4>
					{

						/* Common Macro function to Set a bit to 1*/
						SET_BIT( DDRA,a_pinNum );
     bd6:	aa e3       	ldi	r26, 0x3A	; 58
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	ea e3       	ldi	r30, 0x3A	; 58
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	48 2f       	mov	r20, r24
     be2:	8a 81       	ldd	r24, Y+2	; 0x02
     be4:	28 2f       	mov	r18, r24
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	02 2e       	mov	r0, r18
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <GPIO_setupPinDirection+0xbe>
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	0a 94       	dec	r0
     bf6:	e2 f7       	brpl	.-8      	; 0xbf0 <GPIO_setupPinDirection+0xba>
     bf8:	84 2b       	or	r24, r20
     bfa:	8c 93       	st	X, r24
     bfc:	8e c0       	rjmp	.+284    	; 0xd1a <GPIO_setupPinDirection+0x1e4>
					break;

				case PORTB_ID :

				/*------- Selecting the Mode you will set the Pin Direction to --------*/
					if( a_direction == PIN_INPUT )
     bfe:	8b 81       	ldd	r24, Y+3	; 0x03
     c00:	88 23       	and	r24, r24
     c02:	a9 f4       	brne	.+42     	; 0xc2e <GPIO_setupPinDirection+0xf8>
					{

						/* Common Macro function to clear a bit*/
						 CLEAR_BIT( DDRB,a_pinNum );
     c04:	a7 e3       	ldi	r26, 0x37	; 55
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e7 e3       	ldi	r30, 0x37	; 55
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	48 2f       	mov	r20, r24
     c10:	8a 81       	ldd	r24, Y+2	; 0x02
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	02 2e       	mov	r0, r18
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <GPIO_setupPinDirection+0xec>
     c1e:	88 0f       	add	r24, r24
     c20:	99 1f       	adc	r25, r25
     c22:	0a 94       	dec	r0
     c24:	e2 f7       	brpl	.-8      	; 0xc1e <GPIO_setupPinDirection+0xe8>
     c26:	80 95       	com	r24
     c28:	84 23       	and	r24, r20
     c2a:	8c 93       	st	X, r24
     c2c:	76 c0       	rjmp	.+236    	; 0xd1a <GPIO_setupPinDirection+0x1e4>

					}

					else if ( a_direction == PIN_OUTPUT )
     c2e:	8b 81       	ldd	r24, Y+3	; 0x03
     c30:	81 30       	cpi	r24, 0x01	; 1
     c32:	09 f0       	breq	.+2      	; 0xc36 <GPIO_setupPinDirection+0x100>
     c34:	72 c0       	rjmp	.+228    	; 0xd1a <GPIO_setupPinDirection+0x1e4>
					{

						/* Common Macro function to Set a bit to 1*/
						SET_BIT( DDRB,a_pinNum );
     c36:	a7 e3       	ldi	r26, 0x37	; 55
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	e7 e3       	ldi	r30, 0x37	; 55
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	48 2f       	mov	r20, r24
     c42:	8a 81       	ldd	r24, Y+2	; 0x02
     c44:	28 2f       	mov	r18, r24
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	02 2e       	mov	r0, r18
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <GPIO_setupPinDirection+0x11e>
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	0a 94       	dec	r0
     c56:	e2 f7       	brpl	.-8      	; 0xc50 <GPIO_setupPinDirection+0x11a>
     c58:	84 2b       	or	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	5e c0       	rjmp	.+188    	; 0xd1a <GPIO_setupPinDirection+0x1e4>
					break;

				case PORTC_ID :

					/*------- Selecting the Mode you will set the Pin Direction to --------*/
					if( a_direction == PIN_INPUT )
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	88 23       	and	r24, r24
     c62:	a9 f4       	brne	.+42     	; 0xc8e <GPIO_setupPinDirection+0x158>
					{
					/* Common Macro function to clear a bit*/
						 CLEAR_BIT( DDRC,a_pinNum );
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x14c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x148>
     c86:	80 95       	com	r24
     c88:	84 23       	and	r24, r20
     c8a:	8c 93       	st	X, r24
     c8c:	46 c0       	rjmp	.+140    	; 0xd1a <GPIO_setupPinDirection+0x1e4>

					}

					else if ( a_direction == PIN_OUTPUT )
     c8e:	8b 81       	ldd	r24, Y+3	; 0x03
     c90:	81 30       	cpi	r24, 0x01	; 1
     c92:	09 f0       	breq	.+2      	; 0xc96 <GPIO_setupPinDirection+0x160>
     c94:	42 c0       	rjmp	.+132    	; 0xd1a <GPIO_setupPinDirection+0x1e4>
					{

						/* Common Macro function to Set a bit to 1*/
	   					 SET_BIT( DDRC,a_pinNum );
     c96:	a4 e3       	ldi	r26, 0x34	; 52
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e4 e3       	ldi	r30, 0x34	; 52
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	48 2f       	mov	r20, r24
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	02 2e       	mov	r0, r18
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <GPIO_setupPinDirection+0x17e>
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	0a 94       	dec	r0
     cb6:	e2 f7       	brpl	.-8      	; 0xcb0 <GPIO_setupPinDirection+0x17a>
     cb8:	84 2b       	or	r24, r20
     cba:	8c 93       	st	X, r24
     cbc:	2e c0       	rjmp	.+92     	; 0xd1a <GPIO_setupPinDirection+0x1e4>
					break;

				case PORTD_ID :

					/*------- Selecting the Mode you will set the Pin Direction to --------*/
					if( a_direction == PIN_INPUT )
     cbe:	8b 81       	ldd	r24, Y+3	; 0x03
     cc0:	88 23       	and	r24, r24
     cc2:	a9 f4       	brne	.+42     	; 0xcee <GPIO_setupPinDirection+0x1b8>
					{

						/* Common Macro function to clear a bit*/
						CLEAR_BIT( DDRD,a_pinNum );
     cc4:	a1 e3       	ldi	r26, 0x31	; 49
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e1 e3       	ldi	r30, 0x31	; 49
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	48 2f       	mov	r20, r24
     cd0:	8a 81       	ldd	r24, Y+2	; 0x02
     cd2:	28 2f       	mov	r18, r24
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	02 2e       	mov	r0, r18
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <GPIO_setupPinDirection+0x1ac>
     cde:	88 0f       	add	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	0a 94       	dec	r0
     ce4:	e2 f7       	brpl	.-8      	; 0xcde <GPIO_setupPinDirection+0x1a8>
     ce6:	80 95       	com	r24
     ce8:	84 23       	and	r24, r20
     cea:	8c 93       	st	X, r24
     cec:	16 c0       	rjmp	.+44     	; 0xd1a <GPIO_setupPinDirection+0x1e4>

					}

					else if ( a_direction == PIN_OUTPUT )
     cee:	8b 81       	ldd	r24, Y+3	; 0x03
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	99 f4       	brne	.+38     	; 0xd1a <GPIO_setupPinDirection+0x1e4>
					{
						/* Common Macro function to Set a bit to 1*/
						SET_BIT( DDRD,a_pinNum );
     cf4:	a1 e3       	ldi	r26, 0x31	; 49
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	e1 e3       	ldi	r30, 0x31	; 49
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	48 2f       	mov	r20, r24
     d00:	8a 81       	ldd	r24, Y+2	; 0x02
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	02 2e       	mov	r0, r18
     d0c:	02 c0       	rjmp	.+4      	; 0xd12 <GPIO_setupPinDirection+0x1dc>
     d0e:	88 0f       	add	r24, r24
     d10:	99 1f       	adc	r25, r25
     d12:	0a 94       	dec	r0
     d14:	e2 f7       	brpl	.-8      	; 0xd0e <GPIO_setupPinDirection+0x1d8>
     d16:	84 2b       	or	r24, r20
     d18:	8c 93       	st	X, r24

	}



}
     d1a:	0f 90       	pop	r0
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	08 95       	ret

00000d2a <GPIO_writePin>:


/* Writing a logic 0 or 1 on an Output pin */
void GPIO_writePin(uint8 a_portNum,uint8 a_pinNum,uint8 a_value)
{
     d2a:	df 93       	push	r29
     d2c:	cf 93       	push	r28
     d2e:	00 d0       	rcall	.+0      	; 0xd30 <GPIO_writePin+0x6>
     d30:	00 d0       	rcall	.+0      	; 0xd32 <GPIO_writePin+0x8>
     d32:	0f 92       	push	r0
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	89 83       	std	Y+1, r24	; 0x01
     d3a:	6a 83       	std	Y+2, r22	; 0x02
     d3c:	4b 83       	std	Y+3, r20	; 0x03

	/* Checking the number given by the user is valid  for Port number and Pin number */

	if( a_portNum>=GPIO_NUM_OF_PORTS || a_pinNum>=GPIO_NUM_OF_PINS )
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	84 30       	cpi	r24, 0x04	; 4
     d42:	08 f0       	brcs	.+2      	; 0xd46 <GPIO_writePin+0x1c>
     d44:	e4 c0       	rjmp	.+456    	; 0xf0e <GPIO_writePin+0x1e4>
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	88 30       	cpi	r24, 0x08	; 8
     d4a:	08 f0       	brcs	.+2      	; 0xd4e <GPIO_writePin+0x24>
     d4c:	e0 c0       	rjmp	.+448    	; 0xf0e <GPIO_writePin+0x1e4>
	/*------- If the number is within the range--------*/
		else
		{

		/*------- Selecting the Port you will write on a Pin in --------*/
			switch ( a_portNum )
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	3d 83       	std	Y+5, r19	; 0x05
     d56:	2c 83       	std	Y+4, r18	; 0x04
     d58:	8c 81       	ldd	r24, Y+4	; 0x04
     d5a:	9d 81       	ldd	r25, Y+5	; 0x05
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	91 05       	cpc	r25, r1
     d60:	09 f4       	brne	.+2      	; 0xd64 <GPIO_writePin+0x3a>
     d62:	47 c0       	rjmp	.+142    	; 0xdf2 <GPIO_writePin+0xc8>
     d64:	2c 81       	ldd	r18, Y+4	; 0x04
     d66:	3d 81       	ldd	r19, Y+5	; 0x05
     d68:	22 30       	cpi	r18, 0x02	; 2
     d6a:	31 05       	cpc	r19, r1
     d6c:	2c f4       	brge	.+10     	; 0xd78 <GPIO_writePin+0x4e>
     d6e:	8c 81       	ldd	r24, Y+4	; 0x04
     d70:	9d 81       	ldd	r25, Y+5	; 0x05
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	71 f0       	breq	.+28     	; 0xd92 <GPIO_writePin+0x68>
     d76:	cb c0       	rjmp	.+406    	; 0xf0e <GPIO_writePin+0x1e4>
     d78:	2c 81       	ldd	r18, Y+4	; 0x04
     d7a:	3d 81       	ldd	r19, Y+5	; 0x05
     d7c:	22 30       	cpi	r18, 0x02	; 2
     d7e:	31 05       	cpc	r19, r1
     d80:	09 f4       	brne	.+2      	; 0xd84 <GPIO_writePin+0x5a>
     d82:	67 c0       	rjmp	.+206    	; 0xe52 <GPIO_writePin+0x128>
     d84:	8c 81       	ldd	r24, Y+4	; 0x04
     d86:	9d 81       	ldd	r25, Y+5	; 0x05
     d88:	83 30       	cpi	r24, 0x03	; 3
     d8a:	91 05       	cpc	r25, r1
     d8c:	09 f4       	brne	.+2      	; 0xd90 <GPIO_writePin+0x66>
     d8e:	91 c0       	rjmp	.+290    	; 0xeb2 <GPIO_writePin+0x188>
     d90:	be c0       	rjmp	.+380    	; 0xf0e <GPIO_writePin+0x1e4>
			{
					case PORTA_ID :

		/*------- Selecting the value you will write on a Pin in --------*/
						if( a_value == LOGIC_LOW )
     d92:	8b 81       	ldd	r24, Y+3	; 0x03
     d94:	88 23       	and	r24, r24
     d96:	a9 f4       	brne	.+42     	; 0xdc2 <GPIO_writePin+0x98>
						{

							/* Common Macro function to clear a bit*/
							CLEAR_BIT( PORTA,a_pinNum );
     d98:	ab e3       	ldi	r26, 0x3B	; 59
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	eb e3       	ldi	r30, 0x3B	; 59
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	48 2f       	mov	r20, r24
     da4:	8a 81       	ldd	r24, Y+2	; 0x02
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	02 2e       	mov	r0, r18
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <GPIO_writePin+0x8c>
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	0a 94       	dec	r0
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <GPIO_writePin+0x88>
     dba:	80 95       	com	r24
     dbc:	84 23       	and	r24, r20
     dbe:	8c 93       	st	X, r24
     dc0:	a6 c0       	rjmp	.+332    	; 0xf0e <GPIO_writePin+0x1e4>

						}
						else if ( a_value == LOGIC_HIGH )
     dc2:	8b 81       	ldd	r24, Y+3	; 0x03
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	09 f0       	breq	.+2      	; 0xdca <GPIO_writePin+0xa0>
     dc8:	a2 c0       	rjmp	.+324    	; 0xf0e <GPIO_writePin+0x1e4>
						{

							/* Common Macro function to Set a bit to 1*/
							SET_BIT( PORTA,a_pinNum );
     dca:	ab e3       	ldi	r26, 0x3B	; 59
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	eb e3       	ldi	r30, 0x3B	; 59
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	48 2f       	mov	r20, r24
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	02 2e       	mov	r0, r18
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <GPIO_writePin+0xbe>
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	0a 94       	dec	r0
     dea:	e2 f7       	brpl	.-8      	; 0xde4 <GPIO_writePin+0xba>
     dec:	84 2b       	or	r24, r20
     dee:	8c 93       	st	X, r24
     df0:	8e c0       	rjmp	.+284    	; 0xf0e <GPIO_writePin+0x1e4>
						break;

					case PORTB_ID :

					/*------- Selecting the value you will write on a Pin in --------*/
						if( a_value == LOGIC_LOW )
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	88 23       	and	r24, r24
     df6:	a9 f4       	brne	.+42     	; 0xe22 <GPIO_writePin+0xf8>
						{

							/* Common Macro function to clear a bit*/
							 CLEAR_BIT( PORTB,a_pinNum );
     df8:	a8 e3       	ldi	r26, 0x38	; 56
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	e8 e3       	ldi	r30, 0x38	; 56
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	48 2f       	mov	r20, r24
     e04:	8a 81       	ldd	r24, Y+2	; 0x02
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	02 2e       	mov	r0, r18
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <GPIO_writePin+0xec>
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	0a 94       	dec	r0
     e18:	e2 f7       	brpl	.-8      	; 0xe12 <GPIO_writePin+0xe8>
     e1a:	80 95       	com	r24
     e1c:	84 23       	and	r24, r20
     e1e:	8c 93       	st	X, r24
     e20:	76 c0       	rjmp	.+236    	; 0xf0e <GPIO_writePin+0x1e4>

						}

						else if ( a_value == LOGIC_HIGH )
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	81 30       	cpi	r24, 0x01	; 1
     e26:	09 f0       	breq	.+2      	; 0xe2a <GPIO_writePin+0x100>
     e28:	72 c0       	rjmp	.+228    	; 0xf0e <GPIO_writePin+0x1e4>
						{

							/* Common Macro function to Set a bit to 1*/
							SET_BIT( PORTB,a_pinNum );
     e2a:	a8 e3       	ldi	r26, 0x38	; 56
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e8 e3       	ldi	r30, 0x38	; 56
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	48 2f       	mov	r20, r24
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <GPIO_writePin+0x11e>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <GPIO_writePin+0x11a>
     e4c:	84 2b       	or	r24, r20
     e4e:	8c 93       	st	X, r24
     e50:	5e c0       	rjmp	.+188    	; 0xf0e <GPIO_writePin+0x1e4>
						break;

					case PORTC_ID :

						/*------- Selecting the value you will write on a Pin in --------*/
						if( a_value == LOGIC_LOW )
     e52:	8b 81       	ldd	r24, Y+3	; 0x03
     e54:	88 23       	and	r24, r24
     e56:	a9 f4       	brne	.+42     	; 0xe82 <GPIO_writePin+0x158>
						{

							/* Common Macro function to clear a bit*/
							 CLEAR_BIT( PORTC,a_pinNum );
     e58:	a5 e3       	ldi	r26, 0x35	; 53
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	e5 e3       	ldi	r30, 0x35	; 53
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	48 2f       	mov	r20, r24
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	02 2e       	mov	r0, r18
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <GPIO_writePin+0x14c>
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	0a 94       	dec	r0
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <GPIO_writePin+0x148>
     e7a:	80 95       	com	r24
     e7c:	84 23       	and	r24, r20
     e7e:	8c 93       	st	X, r24
     e80:	46 c0       	rjmp	.+140    	; 0xf0e <GPIO_writePin+0x1e4>

						}

						else if ( a_value == LOGIC_HIGH )
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	81 30       	cpi	r24, 0x01	; 1
     e86:	09 f0       	breq	.+2      	; 0xe8a <GPIO_writePin+0x160>
     e88:	42 c0       	rjmp	.+132    	; 0xf0e <GPIO_writePin+0x1e4>
						{

							/* Common Macro function to Set a bit to 1*/
		   					 SET_BIT( PORTC,a_pinNum );
     e8a:	a5 e3       	ldi	r26, 0x35	; 53
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e5 e3       	ldi	r30, 0x35	; 53
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	48 2f       	mov	r20, r24
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	02 2e       	mov	r0, r18
     ea2:	02 c0       	rjmp	.+4      	; 0xea8 <GPIO_writePin+0x17e>
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	0a 94       	dec	r0
     eaa:	e2 f7       	brpl	.-8      	; 0xea4 <GPIO_writePin+0x17a>
     eac:	84 2b       	or	r24, r20
     eae:	8c 93       	st	X, r24
     eb0:	2e c0       	rjmp	.+92     	; 0xf0e <GPIO_writePin+0x1e4>
						break;

					case PORTD_ID :

						/*------- Selecting the value you will write on a Pin in --------*/
						if( a_value == LOGIC_LOW )
     eb2:	8b 81       	ldd	r24, Y+3	; 0x03
     eb4:	88 23       	and	r24, r24
     eb6:	a9 f4       	brne	.+42     	; 0xee2 <GPIO_writePin+0x1b8>
						{

							/* Common Macro function to clear a bit*/
							CLEAR_BIT( PORTD,a_pinNum );
     eb8:	a2 e3       	ldi	r26, 0x32	; 50
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e2 e3       	ldi	r30, 0x32	; 50
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	48 2f       	mov	r20, r24
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 2e       	mov	r0, r18
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <GPIO_writePin+0x1ac>
     ed2:	88 0f       	add	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	0a 94       	dec	r0
     ed8:	e2 f7       	brpl	.-8      	; 0xed2 <GPIO_writePin+0x1a8>
     eda:	80 95       	com	r24
     edc:	84 23       	and	r24, r20
     ede:	8c 93       	st	X, r24
     ee0:	16 c0       	rjmp	.+44     	; 0xf0e <GPIO_writePin+0x1e4>

						}

						else if ( a_value == LOGIC_HIGH )
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	99 f4       	brne	.+38     	; 0xf0e <GPIO_writePin+0x1e4>
						{

							/* Common Macro function to Set a bit to 1*/
							SET_BIT( PORTD,a_pinNum );
     ee8:	a2 e3       	ldi	r26, 0x32	; 50
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e2 e3       	ldi	r30, 0x32	; 50
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	48 2f       	mov	r20, r24
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	02 2e       	mov	r0, r18
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <GPIO_writePin+0x1dc>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	0a 94       	dec	r0
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <GPIO_writePin+0x1d8>
     f0a:	84 2b       	or	r24, r20
     f0c:	8c 93       	st	X, r24
		}




}
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	cf 91       	pop	r28
     f1a:	df 91       	pop	r29
     f1c:	08 95       	ret

00000f1e <GPIO_togglePin>:



void GPIO_togglePin(uint8 a_portNum,uint8 a_pinNum)
{
     f1e:	df 93       	push	r29
     f20:	cf 93       	push	r28
     f22:	00 d0       	rcall	.+0      	; 0xf24 <GPIO_togglePin+0x6>
     f24:	00 d0       	rcall	.+0      	; 0xf26 <GPIO_togglePin+0x8>
     f26:	cd b7       	in	r28, 0x3d	; 61
     f28:	de b7       	in	r29, 0x3e	; 62
     f2a:	89 83       	std	Y+1, r24	; 0x01
     f2c:	6a 83       	std	Y+2, r22	; 0x02
	/* Checking the number given by the user is valid  for Port number and Pin number */

	if( a_portNum>=GPIO_NUM_OF_PORTS || a_pinNum>=GPIO_NUM_OF_PINS )
     f2e:	89 81       	ldd	r24, Y+1	; 0x01
     f30:	84 30       	cpi	r24, 0x04	; 4
     f32:	08 f0       	brcs	.+2      	; 0xf36 <GPIO_togglePin+0x18>
     f34:	72 c0       	rjmp	.+228    	; 0x101a <GPIO_togglePin+0xfc>
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	88 30       	cpi	r24, 0x08	; 8
     f3a:	08 f0       	brcs	.+2      	; 0xf3e <GPIO_togglePin+0x20>
     f3c:	6e c0       	rjmp	.+220    	; 0x101a <GPIO_togglePin+0xfc>
	/*------- If the number is within the range--------*/
		else
		{

		/*------- Selecting the Port you will toggle a Pin in --------*/
			switch ( a_portNum )
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	3c 83       	std	Y+4, r19	; 0x04
     f46:	2b 83       	std	Y+3, r18	; 0x03
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	9c 81       	ldd	r25, Y+4	; 0x04
     f4c:	81 30       	cpi	r24, 0x01	; 1
     f4e:	91 05       	cpc	r25, r1
     f50:	49 f1       	breq	.+82     	; 0xfa4 <GPIO_togglePin+0x86>
     f52:	2b 81       	ldd	r18, Y+3	; 0x03
     f54:	3c 81       	ldd	r19, Y+4	; 0x04
     f56:	22 30       	cpi	r18, 0x02	; 2
     f58:	31 05       	cpc	r19, r1
     f5a:	2c f4       	brge	.+10     	; 0xf66 <GPIO_togglePin+0x48>
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	9c 81       	ldd	r25, Y+4	; 0x04
     f60:	00 97       	sbiw	r24, 0x00	; 0
     f62:	61 f0       	breq	.+24     	; 0xf7c <GPIO_togglePin+0x5e>
     f64:	5a c0       	rjmp	.+180    	; 0x101a <GPIO_togglePin+0xfc>
     f66:	2b 81       	ldd	r18, Y+3	; 0x03
     f68:	3c 81       	ldd	r19, Y+4	; 0x04
     f6a:	22 30       	cpi	r18, 0x02	; 2
     f6c:	31 05       	cpc	r19, r1
     f6e:	71 f1       	breq	.+92     	; 0xfcc <GPIO_togglePin+0xae>
     f70:	8b 81       	ldd	r24, Y+3	; 0x03
     f72:	9c 81       	ldd	r25, Y+4	; 0x04
     f74:	83 30       	cpi	r24, 0x03	; 3
     f76:	91 05       	cpc	r25, r1
     f78:	e9 f1       	breq	.+122    	; 0xff4 <GPIO_togglePin+0xd6>
     f7a:	4f c0       	rjmp	.+158    	; 0x101a <GPIO_togglePin+0xfc>
			{
					case PORTA_ID :

				/* Common Macro function to Toggle a bit*/
					TOGGLE_BIT(PORTA,a_pinNum);
     f7c:	ab e3       	ldi	r26, 0x3B	; 59
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	eb e3       	ldi	r30, 0x3B	; 59
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	48 2f       	mov	r20, r24
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	02 2e       	mov	r0, r18
     f94:	02 c0       	rjmp	.+4      	; 0xf9a <GPIO_togglePin+0x7c>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	0a 94       	dec	r0
     f9c:	e2 f7       	brpl	.-8      	; 0xf96 <GPIO_togglePin+0x78>
     f9e:	84 27       	eor	r24, r20
     fa0:	8c 93       	st	X, r24
     fa2:	3b c0       	rjmp	.+118    	; 0x101a <GPIO_togglePin+0xfc>
						break;

					case PORTB_ID :

				/* Common Macro function to Toggle a bit*/
						TOGGLE_BIT(PORTB,a_pinNum);
     fa4:	a8 e3       	ldi	r26, 0x38	; 56
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e8 e3       	ldi	r30, 0x38	; 56
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	48 2f       	mov	r20, r24
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	28 2f       	mov	r18, r24
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	02 2e       	mov	r0, r18
     fbc:	02 c0       	rjmp	.+4      	; 0xfc2 <GPIO_togglePin+0xa4>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	0a 94       	dec	r0
     fc4:	e2 f7       	brpl	.-8      	; 0xfbe <GPIO_togglePin+0xa0>
     fc6:	84 27       	eor	r24, r20
     fc8:	8c 93       	st	X, r24
     fca:	27 c0       	rjmp	.+78     	; 0x101a <GPIO_togglePin+0xfc>
						break;

					case PORTC_ID :

				/* Common Macro function to Toggle a bit*/
						TOGGLE_BIT(PORTC,a_pinNum);
     fcc:	a5 e3       	ldi	r26, 0x35	; 53
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e5 e3       	ldi	r30, 0x35	; 53
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	48 2f       	mov	r20, r24
     fd8:	8a 81       	ldd	r24, Y+2	; 0x02
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	02 2e       	mov	r0, r18
     fe4:	02 c0       	rjmp	.+4      	; 0xfea <GPIO_togglePin+0xcc>
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	0a 94       	dec	r0
     fec:	e2 f7       	brpl	.-8      	; 0xfe6 <GPIO_togglePin+0xc8>
     fee:	84 27       	eor	r24, r20
     ff0:	8c 93       	st	X, r24
     ff2:	13 c0       	rjmp	.+38     	; 0x101a <GPIO_togglePin+0xfc>
						break;

					case PORTD_ID :

				/* Common Macro function to Toggle a bit*/
						TOGGLE_BIT(PORTD,a_pinNum);
     ff4:	a2 e3       	ldi	r26, 0x32	; 50
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e2 e3       	ldi	r30, 0x32	; 50
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	48 2f       	mov	r20, r24
    1000:	8a 81       	ldd	r24, Y+2	; 0x02
    1002:	28 2f       	mov	r18, r24
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 2e       	mov	r0, r18
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <GPIO_togglePin+0xf4>
    100e:	88 0f       	add	r24, r24
    1010:	99 1f       	adc	r25, r25
    1012:	0a 94       	dec	r0
    1014:	e2 f7       	brpl	.-8      	; 0x100e <GPIO_togglePin+0xf0>
    1016:	84 27       	eor	r24, r20
    1018:	8c 93       	st	X, r24


		}


}
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_readPin>:



/* Reading the value on an Input pin and returning it's value */
uint8 GPIO_readPin( uint8 a_portNum,uint8 a_pinNum )
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_readPin+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_readPin+0x8>
    1030:	00 d0       	rcall	.+0      	; 0x1032 <GPIO_readPin+0xa>
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	8a 83       	std	Y+2, r24	; 0x02
    1038:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_pinValue = LOGIC_LOW;
    103a:	19 82       	std	Y+1, r1	; 0x01

	/* Checking the number given by the user is valid  for Port number and Pin number */
	if( a_portNum>=GPIO_NUM_OF_PORTS || a_pinNum>=GPIO_NUM_OF_PINS )
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	84 30       	cpi	r24, 0x04	; 4
    1040:	18 f4       	brcc	.+6      	; 0x1048 <GPIO_readPin+0x20>
    1042:	8b 81       	ldd	r24, Y+3	; 0x03
    1044:	88 30       	cpi	r24, 0x08	; 8
    1046:	18 f0       	brcs	.+6      	; 0x104e <GPIO_readPin+0x26>
	{

		/*------- If the number is not within the range--------*/

						return a_pinValue;
    1048:	29 81       	ldd	r18, Y+1	; 0x01
    104a:	2e 83       	std	Y+6, r18	; 0x06
    104c:	82 c0       	rjmp	.+260    	; 0x1152 <GPIO_readPin+0x12a>

	/*------- If the number is within the range--------*/
	else
	{
		/*------- Selecting the Port you will read a Pin from --------*/
		switch ( a_portNum )
    104e:	8a 81       	ldd	r24, Y+2	; 0x02
    1050:	48 2f       	mov	r20, r24
    1052:	50 e0       	ldi	r21, 0x00	; 0
    1054:	5d 83       	std	Y+5, r21	; 0x05
    1056:	4c 83       	std	Y+4, r20	; 0x04
    1058:	8c 81       	ldd	r24, Y+4	; 0x04
    105a:	9d 81       	ldd	r25, Y+5	; 0x05
    105c:	81 30       	cpi	r24, 0x01	; 1
    105e:	91 05       	cpc	r25, r1
    1060:	79 f1       	breq	.+94     	; 0x10c0 <GPIO_readPin+0x98>
    1062:	2c 81       	ldd	r18, Y+4	; 0x04
    1064:	3d 81       	ldd	r19, Y+5	; 0x05
    1066:	22 30       	cpi	r18, 0x02	; 2
    1068:	31 05       	cpc	r19, r1
    106a:	34 f4       	brge	.+12     	; 0x1078 <GPIO_readPin+0x50>
    106c:	4c 81       	ldd	r20, Y+4	; 0x04
    106e:	5d 81       	ldd	r21, Y+5	; 0x05
    1070:	41 15       	cp	r20, r1
    1072:	51 05       	cpc	r21, r1
    1074:	69 f0       	breq	.+26     	; 0x1090 <GPIO_readPin+0x68>
    1076:	6b c0       	rjmp	.+214    	; 0x114e <GPIO_readPin+0x126>
    1078:	8c 81       	ldd	r24, Y+4	; 0x04
    107a:	9d 81       	ldd	r25, Y+5	; 0x05
    107c:	82 30       	cpi	r24, 0x02	; 2
    107e:	91 05       	cpc	r25, r1
    1080:	b9 f1       	breq	.+110    	; 0x10f0 <GPIO_readPin+0xc8>
    1082:	2c 81       	ldd	r18, Y+4	; 0x04
    1084:	3d 81       	ldd	r19, Y+5	; 0x05
    1086:	23 30       	cpi	r18, 0x03	; 3
    1088:	31 05       	cpc	r19, r1
    108a:	09 f4       	brne	.+2      	; 0x108e <GPIO_readPin+0x66>
    108c:	49 c0       	rjmp	.+146    	; 0x1120 <GPIO_readPin+0xf8>
    108e:	5f c0       	rjmp	.+190    	; 0x114e <GPIO_readPin+0x126>
		{
		case PORTA_ID :
		/*------- Checking the Pin value by a Common macro function--------*/
			if( BIT_IS_SET(PINA,a_pinNum) )
    1090:	e9 e3       	ldi	r30, 0x39	; 57
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	a9 01       	movw	r20, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <GPIO_readPin+0x80>
    10a4:	55 95       	asr	r21
    10a6:	47 95       	ror	r20
    10a8:	8a 95       	dec	r24
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <GPIO_readPin+0x7c>
    10ac:	ca 01       	movw	r24, r20
    10ae:	81 70       	andi	r24, 0x01	; 1
    10b0:	90 70       	andi	r25, 0x00	; 0
    10b2:	88 23       	and	r24, r24
    10b4:	19 f0       	breq	.+6      	; 0x10bc <GPIO_readPin+0x94>
			{
				a_pinValue=LOGIC_HIGH;
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	89 83       	std	Y+1, r24	; 0x01
    10ba:	49 c0       	rjmp	.+146    	; 0x114e <GPIO_readPin+0x126>

			}
			else
				a_pinValue=LOGIC_LOW;
    10bc:	19 82       	std	Y+1, r1	; 0x01
    10be:	47 c0       	rjmp	.+142    	; 0x114e <GPIO_readPin+0x126>

			break;

		case PORTB_ID :
			/*------- Checking the Pin value by a Common macro function--------*/
			if( BIT_IS_SET(PINB,a_pinNum) )
    10c0:	e6 e3       	ldi	r30, 0x36	; 54
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	28 2f       	mov	r18, r24
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	88 2f       	mov	r24, r24
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	a9 01       	movw	r20, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <GPIO_readPin+0xb0>
    10d4:	55 95       	asr	r21
    10d6:	47 95       	ror	r20
    10d8:	8a 95       	dec	r24
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <GPIO_readPin+0xac>
    10dc:	ca 01       	movw	r24, r20
    10de:	81 70       	andi	r24, 0x01	; 1
    10e0:	90 70       	andi	r25, 0x00	; 0
    10e2:	88 23       	and	r24, r24
    10e4:	19 f0       	breq	.+6      	; 0x10ec <GPIO_readPin+0xc4>
			{
				a_pinValue=LOGIC_HIGH;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	89 83       	std	Y+1, r24	; 0x01
    10ea:	31 c0       	rjmp	.+98     	; 0x114e <GPIO_readPin+0x126>

			}
			else
				a_pinValue=LOGIC_LOW;
    10ec:	19 82       	std	Y+1, r1	; 0x01
    10ee:	2f c0       	rjmp	.+94     	; 0x114e <GPIO_readPin+0x126>

					break;

		case PORTC_ID :
			/*------- Checking the Pin value by a Common macro function--------*/
			if( BIT_IS_SET(PINC,a_pinNum) )
    10f0:	e3 e3       	ldi	r30, 0x33	; 51
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	a9 01       	movw	r20, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <GPIO_readPin+0xe0>
    1104:	55 95       	asr	r21
    1106:	47 95       	ror	r20
    1108:	8a 95       	dec	r24
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <GPIO_readPin+0xdc>
    110c:	ca 01       	movw	r24, r20
    110e:	81 70       	andi	r24, 0x01	; 1
    1110:	90 70       	andi	r25, 0x00	; 0
    1112:	88 23       	and	r24, r24
    1114:	19 f0       	breq	.+6      	; 0x111c <GPIO_readPin+0xf4>
			{
				a_pinValue=LOGIC_HIGH;
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	89 83       	std	Y+1, r24	; 0x01
    111a:	19 c0       	rjmp	.+50     	; 0x114e <GPIO_readPin+0x126>

			}
			else
				a_pinValue=LOGIC_LOW;
    111c:	19 82       	std	Y+1, r1	; 0x01
    111e:	17 c0       	rjmp	.+46     	; 0x114e <GPIO_readPin+0x126>
					break;

		case PORTD_ID :
			/*------- Checking the Pin value by a Common macro function--------*/

			if( BIT_IS_SET(PIND,a_pinNum) )
    1120:	e0 e3       	ldi	r30, 0x30	; 48
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a9 01       	movw	r20, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <GPIO_readPin+0x110>
    1134:	55 95       	asr	r21
    1136:	47 95       	ror	r20
    1138:	8a 95       	dec	r24
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <GPIO_readPin+0x10c>
    113c:	ca 01       	movw	r24, r20
    113e:	81 70       	andi	r24, 0x01	; 1
    1140:	90 70       	andi	r25, 0x00	; 0
    1142:	88 23       	and	r24, r24
    1144:	19 f0       	breq	.+6      	; 0x114c <GPIO_readPin+0x124>
			{
				a_pinValue=LOGIC_HIGH;
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	89 83       	std	Y+1, r24	; 0x01
    114a:	01 c0       	rjmp	.+2      	; 0x114e <GPIO_readPin+0x126>

			}
			else
				a_pinValue=LOGIC_LOW;
    114c:	19 82       	std	Y+1, r1	; 0x01
		}


	}

	return a_pinValue;
    114e:	59 81       	ldd	r21, Y+1	; 0x01
    1150:	5e 83       	std	Y+6, r21	; 0x06
    1152:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1154:	26 96       	adiw	r28, 0x06	; 6
    1156:	0f b6       	in	r0, 0x3f	; 63
    1158:	f8 94       	cli
    115a:	de bf       	out	0x3e, r29	; 62
    115c:	0f be       	out	0x3f, r0	; 63
    115e:	cd bf       	out	0x3d, r28	; 61
    1160:	cf 91       	pop	r28
    1162:	df 91       	pop	r29
    1164:	08 95       	ret

00001166 <GPIO_setupPortDirection>:


/* Setting the whole Port to be either Input or Output Port
 * */
void GPIO_setupPortDirection( uint8 a_portNum,GPIO_PortDirectionType a_direction )
{
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	00 d0       	rcall	.+0      	; 0x116c <GPIO_setupPortDirection+0x6>
    116c:	00 d0       	rcall	.+0      	; 0x116e <GPIO_setupPortDirection+0x8>
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	89 83       	std	Y+1, r24	; 0x01
    1174:	6a 83       	std	Y+2, r22	; 0x02
	/* Checking the number given by the user is valid  for Port number and Pin number
	 *
	 *
	 *  Direction of Port must be either PORT_INPUT or PORT_OUTPUT
	 *  */
	if( a_portNum>=GPIO_NUM_OF_PORTS || ((a_direction !=PORT_INPUT ) && (a_direction !=PORT_OUTPUT )) )
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	84 30       	cpi	r24, 0x04	; 4
    117a:	c0 f5       	brcc	.+112    	; 0x11ec <GPIO_setupPortDirection+0x86>
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	88 23       	and	r24, r24
    1180:	19 f0       	breq	.+6      	; 0x1188 <GPIO_setupPortDirection+0x22>
    1182:	8a 81       	ldd	r24, Y+2	; 0x02
    1184:	8f 3f       	cpi	r24, 0xFF	; 255
    1186:	91 f5       	brne	.+100    	; 0x11ec <GPIO_setupPortDirection+0x86>

		/*------- If the number is within the range--------*/
	else
	{
		/*------- Selecting the Port you will set the it's Direction --------*/
		switch ( a_portNum )
    1188:	89 81       	ldd	r24, Y+1	; 0x01
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	3c 83       	std	Y+4, r19	; 0x04
    1190:	2b 83       	std	Y+3, r18	; 0x03
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	9c 81       	ldd	r25, Y+4	; 0x04
    1196:	81 30       	cpi	r24, 0x01	; 1
    1198:	91 05       	cpc	r25, r1
    119a:	d1 f0       	breq	.+52     	; 0x11d0 <GPIO_setupPortDirection+0x6a>
    119c:	2b 81       	ldd	r18, Y+3	; 0x03
    119e:	3c 81       	ldd	r19, Y+4	; 0x04
    11a0:	22 30       	cpi	r18, 0x02	; 2
    11a2:	31 05       	cpc	r19, r1
    11a4:	2c f4       	brge	.+10     	; 0x11b0 <GPIO_setupPortDirection+0x4a>
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	9c 81       	ldd	r25, Y+4	; 0x04
    11aa:	00 97       	sbiw	r24, 0x00	; 0
    11ac:	61 f0       	breq	.+24     	; 0x11c6 <GPIO_setupPortDirection+0x60>
    11ae:	1e c0       	rjmp	.+60     	; 0x11ec <GPIO_setupPortDirection+0x86>
    11b0:	2b 81       	ldd	r18, Y+3	; 0x03
    11b2:	3c 81       	ldd	r19, Y+4	; 0x04
    11b4:	22 30       	cpi	r18, 0x02	; 2
    11b6:	31 05       	cpc	r19, r1
    11b8:	81 f0       	breq	.+32     	; 0x11da <GPIO_setupPortDirection+0x74>
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	9c 81       	ldd	r25, Y+4	; 0x04
    11be:	83 30       	cpi	r24, 0x03	; 3
    11c0:	91 05       	cpc	r25, r1
    11c2:	81 f0       	breq	.+32     	; 0x11e4 <GPIO_setupPortDirection+0x7e>
    11c4:	13 c0       	rjmp	.+38     	; 0x11ec <GPIO_setupPortDirection+0x86>
		{
				case PORTA_ID :

				DDRA=a_direction;
    11c6:	ea e3       	ldi	r30, 0x3A	; 58
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	80 83       	st	Z, r24
    11ce:	0e c0       	rjmp	.+28     	; 0x11ec <GPIO_setupPortDirection+0x86>

					break;

				case PORTB_ID :

				DDRB=a_direction;
    11d0:	e7 e3       	ldi	r30, 0x37	; 55
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	80 83       	st	Z, r24
    11d8:	09 c0       	rjmp	.+18     	; 0x11ec <GPIO_setupPortDirection+0x86>

					break;

				case PORTC_ID :

				DDRC=a_direction;
    11da:	e4 e3       	ldi	r30, 0x34	; 52
    11dc:	f0 e0       	ldi	r31, 0x00	; 0
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	80 83       	st	Z, r24
    11e2:	04 c0       	rjmp	.+8      	; 0x11ec <GPIO_setupPortDirection+0x86>

					break;

				case PORTD_ID :

				DDRD=a_direction;
    11e4:	e1 e3       	ldi	r30, 0x31	; 49
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	80 83       	st	Z, r24





}
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	cf 91       	pop	r28
    11f6:	df 91       	pop	r29
    11f8:	08 95       	ret

000011fa <GPIO_writePort>:



/* Writing any value ranged between (0000 0000 "0x00") to (1111 1111 "0xFF") on a Port */
void GPIO_writePort( uint8 a_portNum,uint8 a_value )
{
    11fa:	df 93       	push	r29
    11fc:	cf 93       	push	r28
    11fe:	00 d0       	rcall	.+0      	; 0x1200 <GPIO_writePort+0x6>
    1200:	00 d0       	rcall	.+0      	; 0x1202 <GPIO_writePort+0x8>
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	89 83       	std	Y+1, r24	; 0x01
    1208:	6a 83       	std	Y+2, r22	; 0x02

	/* Checking the number given by the user is valid  for Port number and Pin number
	 *
	 */
	if( a_portNum>=GPIO_NUM_OF_PORTS )
    120a:	89 81       	ldd	r24, Y+1	; 0x01
    120c:	84 30       	cpi	r24, 0x04	; 4
    120e:	90 f5       	brcc	.+100    	; 0x1274 <GPIO_writePort+0x7a>
			/*------- If the number is within the range--------*/
	else
	{

	/*------- Selecting the Port you will write a value on --------*/
	switch (a_portNum)
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	3c 83       	std	Y+4, r19	; 0x04
    1218:	2b 83       	std	Y+3, r18	; 0x03
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	9c 81       	ldd	r25, Y+4	; 0x04
    121e:	81 30       	cpi	r24, 0x01	; 1
    1220:	91 05       	cpc	r25, r1
    1222:	d1 f0       	breq	.+52     	; 0x1258 <GPIO_writePort+0x5e>
    1224:	2b 81       	ldd	r18, Y+3	; 0x03
    1226:	3c 81       	ldd	r19, Y+4	; 0x04
    1228:	22 30       	cpi	r18, 0x02	; 2
    122a:	31 05       	cpc	r19, r1
    122c:	2c f4       	brge	.+10     	; 0x1238 <GPIO_writePort+0x3e>
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	9c 81       	ldd	r25, Y+4	; 0x04
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	61 f0       	breq	.+24     	; 0x124e <GPIO_writePort+0x54>
    1236:	1e c0       	rjmp	.+60     	; 0x1274 <GPIO_writePort+0x7a>
    1238:	2b 81       	ldd	r18, Y+3	; 0x03
    123a:	3c 81       	ldd	r19, Y+4	; 0x04
    123c:	22 30       	cpi	r18, 0x02	; 2
    123e:	31 05       	cpc	r19, r1
    1240:	81 f0       	breq	.+32     	; 0x1262 <GPIO_writePort+0x68>
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	9c 81       	ldd	r25, Y+4	; 0x04
    1246:	83 30       	cpi	r24, 0x03	; 3
    1248:	91 05       	cpc	r25, r1
    124a:	81 f0       	breq	.+32     	; 0x126c <GPIO_writePort+0x72>
    124c:	13 c0       	rjmp	.+38     	; 0x1274 <GPIO_writePort+0x7a>
			{
			case PORTA_ID :
				PORTA=a_value;
    124e:	eb e3       	ldi	r30, 0x3B	; 59
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	8a 81       	ldd	r24, Y+2	; 0x02
    1254:	80 83       	st	Z, r24
    1256:	0e c0       	rjmp	.+28     	; 0x1274 <GPIO_writePort+0x7a>
				break;

			case PORTB_ID :
				PORTB=a_value;
    1258:	e8 e3       	ldi	r30, 0x38	; 56
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	80 83       	st	Z, r24
    1260:	09 c0       	rjmp	.+18     	; 0x1274 <GPIO_writePort+0x7a>
						break;

			case PORTC_ID :
				PORTC=a_value;
    1262:	e5 e3       	ldi	r30, 0x35	; 53
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	80 83       	st	Z, r24
    126a:	04 c0       	rjmp	.+8      	; 0x1274 <GPIO_writePort+0x7a>
						break;

			case PORTD_ID :
				PORTD=a_value;
    126c:	e2 e3       	ldi	r30, 0x32	; 50
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	80 83       	st	Z, r24
						break;

			}
	}

}
    1274:	0f 90       	pop	r0
    1276:	0f 90       	pop	r0
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <GPIO_readPort>:


/* Reading any value ranged between (0000 0000 "0x00") to (1111 1111 "0xFF") on a Port */
uint8 GPIO_readPort(uint8 a_portNum)
{
    1282:	df 93       	push	r29
    1284:	cf 93       	push	r28
    1286:	00 d0       	rcall	.+0      	; 0x1288 <GPIO_readPort+0x6>
    1288:	00 d0       	rcall	.+0      	; 0x128a <GPIO_readPort+0x8>
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_portValue = LOGIC_LOW;
    1290:	19 82       	std	Y+1, r1	; 0x01
	/* Checking the number given by the user is valid  for Port number and Pin number */
	if( a_portNum>=GPIO_NUM_OF_PORTS )
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	84 30       	cpi	r24, 0x04	; 4
    1296:	90 f5       	brcc	.+100    	; 0x12fc <GPIO_readPort+0x7a>
				/*------- If the number is within the range--------*/
		else
		{

			/*------- Selecting the Port you will read a value from --------*/
		switch (a_portNum)
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	3c 83       	std	Y+4, r19	; 0x04
    12a0:	2b 83       	std	Y+3, r18	; 0x03
    12a2:	8b 81       	ldd	r24, Y+3	; 0x03
    12a4:	9c 81       	ldd	r25, Y+4	; 0x04
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	91 05       	cpc	r25, r1
    12aa:	d1 f0       	breq	.+52     	; 0x12e0 <GPIO_readPort+0x5e>
    12ac:	2b 81       	ldd	r18, Y+3	; 0x03
    12ae:	3c 81       	ldd	r19, Y+4	; 0x04
    12b0:	22 30       	cpi	r18, 0x02	; 2
    12b2:	31 05       	cpc	r19, r1
    12b4:	2c f4       	brge	.+10     	; 0x12c0 <GPIO_readPort+0x3e>
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ba:	00 97       	sbiw	r24, 0x00	; 0
    12bc:	61 f0       	breq	.+24     	; 0x12d6 <GPIO_readPort+0x54>
    12be:	1e c0       	rjmp	.+60     	; 0x12fc <GPIO_readPort+0x7a>
    12c0:	2b 81       	ldd	r18, Y+3	; 0x03
    12c2:	3c 81       	ldd	r19, Y+4	; 0x04
    12c4:	22 30       	cpi	r18, 0x02	; 2
    12c6:	31 05       	cpc	r19, r1
    12c8:	81 f0       	breq	.+32     	; 0x12ea <GPIO_readPort+0x68>
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	9c 81       	ldd	r25, Y+4	; 0x04
    12ce:	83 30       	cpi	r24, 0x03	; 3
    12d0:	91 05       	cpc	r25, r1
    12d2:	81 f0       	breq	.+32     	; 0x12f4 <GPIO_readPort+0x72>
    12d4:	13 c0       	rjmp	.+38     	; 0x12fc <GPIO_readPort+0x7a>
				{
				case PORTA_ID :

					a_portValue=PINA;
    12d6:	e9 e3       	ldi	r30, 0x39	; 57
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	0e c0       	rjmp	.+28     	; 0x12fc <GPIO_readPort+0x7a>

					break;

				case PORTB_ID :

					a_portValue=PINB;
    12e0:	e6 e3       	ldi	r30, 0x36	; 54
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	80 81       	ld	r24, Z
    12e6:	89 83       	std	Y+1, r24	; 0x01
    12e8:	09 c0       	rjmp	.+18     	; 0x12fc <GPIO_readPort+0x7a>

					break;

				case PORTC_ID :

					a_portValue=PINC;
    12ea:	e3 e3       	ldi	r30, 0x33	; 51
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	89 83       	std	Y+1, r24	; 0x01
    12f2:	04 c0       	rjmp	.+8      	; 0x12fc <GPIO_readPort+0x7a>

					break;

				case PORTD_ID :

					a_portValue=PIND;
    12f4:	e0 e3       	ldi	r30, 0x30	; 48
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	89 83       	std	Y+1, r24	; 0x01
					;
				}

		}

	return a_portValue;
    12fc:	89 81       	ldd	r24, Y+1	; 0x01

}
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <LCD_init>:
#include "Common_Macros.h"
#include <util/delay.h>

static void LCD_integerToString(uint8 *string_Ptr,uint32 a_num);
void LCD_init(void)
{
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	2e 97       	sbiw	r28, 0x0e	; 14
    1316:	0f b6       	in	r0, 0x3f	; 63
    1318:	f8 94       	cli
    131a:	de bf       	out	0x3e, r29	; 62
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORTID, LCD_RS_PINID, PIN_OUTPUT);
    1320:	83 e0       	ldi	r24, 0x03	; 3
    1322:	62 e0       	ldi	r22, 0x02	; 2
    1324:	41 e0       	ldi	r20, 0x01	; 1
    1326:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
GPIO_setupPinDirection(LCD_EN_PORTID, LCD_EN_PINID, PIN_OUTPUT);
    132a:	83 e0       	ldi	r24, 0x03	; 3
    132c:	63 e0       	ldi	r22, 0x03	; 3
    132e:	41 e0       	ldi	r20, 0x01	; 1
    1330:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
#if(LCD_8BITSMODE==1)
GPIO_setupPortDirection(LCD_DATA_PORTID, PORT_OUTPUT);


#elif(LCD_4BITSMODE ==1 )
GPIO_setupPinDirection(LCD_DATA_PORTID, LCD_PIN0ID, PIN_OUTPUT);
    1334:	82 e0       	ldi	r24, 0x02	; 2
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	41 e0       	ldi	r20, 0x01	; 1
    133a:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
GPIO_setupPinDirection(LCD_DATA_PORTID, LCD_PIN1ID, PIN_OUTPUT);
    133e:	82 e0       	ldi	r24, 0x02	; 2
    1340:	61 e0       	ldi	r22, 0x01	; 1
    1342:	41 e0       	ldi	r20, 0x01	; 1
    1344:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
GPIO_setupPinDirection(LCD_DATA_PORTID, LCD_PIN2ID, PIN_OUTPUT);
    1348:	82 e0       	ldi	r24, 0x02	; 2
    134a:	62 e0       	ldi	r22, 0x02	; 2
    134c:	41 e0       	ldi	r20, 0x01	; 1
    134e:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
GPIO_setupPinDirection(LCD_DATA_PORTID, LCD_PIN3ID, PIN_OUTPUT);
    1352:	82 e0       	ldi	r24, 0x02	; 2
    1354:	63 e0       	ldi	r22, 0x03	; 3
    1356:	41 e0       	ldi	r20, 0x01	; 1
    1358:	0e 94 9b 05 	call	0xb36	; 0xb36 <GPIO_setupPinDirection>
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	a0 ea       	ldi	r26, 0xA0	; 160
    1362:	b1 e4       	ldi	r27, 0x41	; 65
    1364:	8b 87       	std	Y+11, r24	; 0x0b
    1366:	9c 87       	std	Y+12, r25	; 0x0c
    1368:	ad 87       	std	Y+13, r26	; 0x0d
    136a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    136c:	6b 85       	ldd	r22, Y+11	; 0x0b
    136e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1370:	8d 85       	ldd	r24, Y+13	; 0x0d
    1372:	9e 85       	ldd	r25, Y+14	; 0x0e
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	4a e7       	ldi	r20, 0x7A	; 122
    137a:	55 e4       	ldi	r21, 0x45	; 69
    137c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	8f 83       	std	Y+7, r24	; 0x07
    1386:	98 87       	std	Y+8, r25	; 0x08
    1388:	a9 87       	std	Y+9, r26	; 0x09
    138a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    138c:	6f 81       	ldd	r22, Y+7	; 0x07
    138e:	78 85       	ldd	r23, Y+8	; 0x08
    1390:	89 85       	ldd	r24, Y+9	; 0x09
    1392:	9a 85       	ldd	r25, Y+10	; 0x0a
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	40 e8       	ldi	r20, 0x80	; 128
    139a:	5f e3       	ldi	r21, 0x3F	; 63
    139c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13a0:	88 23       	and	r24, r24
    13a2:	2c f4       	brge	.+10     	; 0x13ae <LCD_init+0xa2>
		__ticks = 1;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	9e 83       	std	Y+6, r25	; 0x06
    13aa:	8d 83       	std	Y+5, r24	; 0x05
    13ac:	3f c0       	rjmp	.+126    	; 0x142c <LCD_init+0x120>
	else if (__tmp > 65535)
    13ae:	6f 81       	ldd	r22, Y+7	; 0x07
    13b0:	78 85       	ldd	r23, Y+8	; 0x08
    13b2:	89 85       	ldd	r24, Y+9	; 0x09
    13b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	3f ef       	ldi	r19, 0xFF	; 255
    13ba:	4f e7       	ldi	r20, 0x7F	; 127
    13bc:	57 e4       	ldi	r21, 0x47	; 71
    13be:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    13c2:	18 16       	cp	r1, r24
    13c4:	4c f5       	brge	.+82     	; 0x1418 <LCD_init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    13cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	40 e2       	ldi	r20, 0x20	; 32
    13d4:	51 e4       	ldi	r21, 0x41	; 65
    13d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	bc 01       	movw	r22, r24
    13e0:	cd 01       	movw	r24, r26
    13e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	9e 83       	std	Y+6, r25	; 0x06
    13ec:	8d 83       	std	Y+5, r24	; 0x05
    13ee:	0f c0       	rjmp	.+30     	; 0x140e <LCD_init+0x102>
    13f0:	80 e9       	ldi	r24, 0x90	; 144
    13f2:	91 e0       	ldi	r25, 0x01	; 1
    13f4:	9c 83       	std	Y+4, r25	; 0x04
    13f6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	9c 81       	ldd	r25, Y+4	; 0x04
    13fc:	01 97       	sbiw	r24, 0x01	; 1
    13fe:	f1 f7       	brne	.-4      	; 0x13fc <LCD_init+0xf0>
    1400:	9c 83       	std	Y+4, r25	; 0x04
    1402:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1404:	8d 81       	ldd	r24, Y+5	; 0x05
    1406:	9e 81       	ldd	r25, Y+6	; 0x06
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	9e 83       	std	Y+6, r25	; 0x06
    140c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140e:	8d 81       	ldd	r24, Y+5	; 0x05
    1410:	9e 81       	ldd	r25, Y+6	; 0x06
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	69 f7       	brne	.-38     	; 0x13f0 <LCD_init+0xe4>
    1416:	14 c0       	rjmp	.+40     	; 0x1440 <LCD_init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1418:	6f 81       	ldd	r22, Y+7	; 0x07
    141a:	78 85       	ldd	r23, Y+8	; 0x08
    141c:	89 85       	ldd	r24, Y+9	; 0x09
    141e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1420:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	9e 83       	std	Y+6, r25	; 0x06
    142a:	8d 83       	std	Y+5, r24	; 0x05
    142c:	8d 81       	ldd	r24, Y+5	; 0x05
    142e:	9e 81       	ldd	r25, Y+6	; 0x06
    1430:	9a 83       	std	Y+2, r25	; 0x02
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	9a 81       	ldd	r25, Y+2	; 0x02
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	f1 f7       	brne	.-4      	; 0x1438 <LCD_init+0x12c>
    143c:	9a 83       	std	Y+2, r25	; 0x02
    143e:	89 83       	std	Y+1, r24	; 0x01
/* as the LCD takes 15 millisecond to start up	*/
	_delay_ms(20);
#if(LCD_8BITSMODE==1)
LCD_sendCommand(LCD_EIGHTBIT_TWOLINE);
#elif(LCD_4BITSMODE ==1 )
LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1 );
    1440:	83 e3       	ldi	r24, 0x33	; 51
    1442:	0e 94 38 0a 	call	0x1470	; 0x1470 <LCD_sendCommand>
LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2 );
    1446:	82 e3       	ldi	r24, 0x32	; 50
    1448:	0e 94 38 0a 	call	0x1470	; 0x1470 <LCD_sendCommand>
LCD_sendCommand(LCD_FOURBIT_TWOLINE);
    144c:	88 e2       	ldi	r24, 0x28	; 40
    144e:	0e 94 38 0a 	call	0x1470	; 0x1470 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_DISPLAYON_CURSOROFF	);
    1452:	8c e0       	ldi	r24, 0x0C	; 12
    1454:	0e 94 38 0a 	call	0x1470	; 0x1470 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	0e 94 38 0a 	call	0x1470	; 0x1470 <LCD_sendCommand>
}
    145e:	2e 96       	adiw	r28, 0x0e	; 14
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	de bf       	out	0x3e, r29	; 62
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	cd bf       	out	0x3d, r28	; 61
    146a:	cf 91       	pop	r28
    146c:	df 91       	pop	r29
    146e:	08 95       	ret

00001470 <LCD_sendCommand>:

void LCD_sendCommand(uint8 a_LCD_commands)
{
    1470:	0f 93       	push	r16
    1472:	1f 93       	push	r17
    1474:	df 93       	push	r29
    1476:	cf 93       	push	r28
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	c5 55       	subi	r28, 0x55	; 85
    147e:	d0 40       	sbci	r29, 0x00	; 0
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	de bf       	out	0x3e, r29	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	cd bf       	out	0x3d, r28	; 61
    148a:	fe 01       	movw	r30, r28
    148c:	eb 5a       	subi	r30, 0xAB	; 171
    148e:	ff 4f       	sbci	r31, 0xFF	; 255
    1490:	80 83       	st	Z, r24
	/* RS bit is responsible for register select for each of data and
	 *  commands to adjust settings*/
	GPIO_writePin(LCD_RS_PORTID,LCD_RS_PINID, LCD_SELECT_COMMAND_REGISTER);
    1492:	83 e0       	ldi	r24, 0x03	; 3
    1494:	62 e0       	ldi	r22, 0x02	; 2
    1496:	40 e0       	ldi	r20, 0x00	; 0
    1498:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
    149c:	fe 01       	movw	r30, r28
    149e:	ef 5a       	subi	r30, 0xAF	; 175
    14a0:	ff 4f       	sbci	r31, 0xFF	; 255
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	a0 e8       	ldi	r26, 0x80	; 128
    14a8:	bf e3       	ldi	r27, 0x3F	; 63
    14aa:	80 83       	st	Z, r24
    14ac:	91 83       	std	Z+1, r25	; 0x01
    14ae:	a2 83       	std	Z+2, r26	; 0x02
    14b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b2:	8e 01       	movw	r16, r28
    14b4:	03 5b       	subi	r16, 0xB3	; 179
    14b6:	1f 4f       	sbci	r17, 0xFF	; 255
    14b8:	fe 01       	movw	r30, r28
    14ba:	ef 5a       	subi	r30, 0xAF	; 175
    14bc:	ff 4f       	sbci	r31, 0xFF	; 255
    14be:	60 81       	ld	r22, Z
    14c0:	71 81       	ldd	r23, Z+1	; 0x01
    14c2:	82 81       	ldd	r24, Z+2	; 0x02
    14c4:	93 81       	ldd	r25, Z+3	; 0x03
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	4a e7       	ldi	r20, 0x7A	; 122
    14cc:	55 e4       	ldi	r21, 0x45	; 69
    14ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	f8 01       	movw	r30, r16
    14d8:	80 83       	st	Z, r24
    14da:	91 83       	std	Z+1, r25	; 0x01
    14dc:	a2 83       	std	Z+2, r26	; 0x02
    14de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14e0:	fe 01       	movw	r30, r28
    14e2:	e3 5b       	subi	r30, 0xB3	; 179
    14e4:	ff 4f       	sbci	r31, 0xFF	; 255
    14e6:	60 81       	ld	r22, Z
    14e8:	71 81       	ldd	r23, Z+1	; 0x01
    14ea:	82 81       	ldd	r24, Z+2	; 0x02
    14ec:	93 81       	ldd	r25, Z+3	; 0x03
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	40 e8       	ldi	r20, 0x80	; 128
    14f4:	5f e3       	ldi	r21, 0x3F	; 63
    14f6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    14fa:	88 23       	and	r24, r24
    14fc:	44 f4       	brge	.+16     	; 0x150e <LCD_sendCommand+0x9e>
		__ticks = 1;
    14fe:	fe 01       	movw	r30, r28
    1500:	e5 5b       	subi	r30, 0xB5	; 181
    1502:	ff 4f       	sbci	r31, 0xFF	; 255
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	91 83       	std	Z+1, r25	; 0x01
    150a:	80 83       	st	Z, r24
    150c:	64 c0       	rjmp	.+200    	; 0x15d6 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    150e:	fe 01       	movw	r30, r28
    1510:	e3 5b       	subi	r30, 0xB3	; 179
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	60 81       	ld	r22, Z
    1516:	71 81       	ldd	r23, Z+1	; 0x01
    1518:	82 81       	ldd	r24, Z+2	; 0x02
    151a:	93 81       	ldd	r25, Z+3	; 0x03
    151c:	20 e0       	ldi	r18, 0x00	; 0
    151e:	3f ef       	ldi	r19, 0xFF	; 255
    1520:	4f e7       	ldi	r20, 0x7F	; 127
    1522:	57 e4       	ldi	r21, 0x47	; 71
    1524:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1528:	18 16       	cp	r1, r24
    152a:	0c f0       	brlt	.+2      	; 0x152e <LCD_sendCommand+0xbe>
    152c:	43 c0       	rjmp	.+134    	; 0x15b4 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    152e:	fe 01       	movw	r30, r28
    1530:	ef 5a       	subi	r30, 0xAF	; 175
    1532:	ff 4f       	sbci	r31, 0xFF	; 255
    1534:	60 81       	ld	r22, Z
    1536:	71 81       	ldd	r23, Z+1	; 0x01
    1538:	82 81       	ldd	r24, Z+2	; 0x02
    153a:	93 81       	ldd	r25, Z+3	; 0x03
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	40 e2       	ldi	r20, 0x20	; 32
    1542:	51 e4       	ldi	r21, 0x41	; 65
    1544:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1548:	dc 01       	movw	r26, r24
    154a:	cb 01       	movw	r24, r22
    154c:	8e 01       	movw	r16, r28
    154e:	05 5b       	subi	r16, 0xB5	; 181
    1550:	1f 4f       	sbci	r17, 0xFF	; 255
    1552:	bc 01       	movw	r22, r24
    1554:	cd 01       	movw	r24, r26
    1556:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	f8 01       	movw	r30, r16
    1560:	91 83       	std	Z+1, r25	; 0x01
    1562:	80 83       	st	Z, r24
    1564:	1f c0       	rjmp	.+62     	; 0x15a4 <LCD_sendCommand+0x134>
    1566:	fe 01       	movw	r30, r28
    1568:	e7 5b       	subi	r30, 0xB7	; 183
    156a:	ff 4f       	sbci	r31, 0xFF	; 255
    156c:	80 e9       	ldi	r24, 0x90	; 144
    156e:	91 e0       	ldi	r25, 0x01	; 1
    1570:	91 83       	std	Z+1, r25	; 0x01
    1572:	80 83       	st	Z, r24
    1574:	fe 01       	movw	r30, r28
    1576:	e7 5b       	subi	r30, 0xB7	; 183
    1578:	ff 4f       	sbci	r31, 0xFF	; 255
    157a:	80 81       	ld	r24, Z
    157c:	91 81       	ldd	r25, Z+1	; 0x01
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	f1 f7       	brne	.-4      	; 0x157e <LCD_sendCommand+0x10e>
    1582:	fe 01       	movw	r30, r28
    1584:	e7 5b       	subi	r30, 0xB7	; 183
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	91 83       	std	Z+1, r25	; 0x01
    158a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    158c:	de 01       	movw	r26, r28
    158e:	a5 5b       	subi	r26, 0xB5	; 181
    1590:	bf 4f       	sbci	r27, 0xFF	; 255
    1592:	fe 01       	movw	r30, r28
    1594:	e5 5b       	subi	r30, 0xB5	; 181
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	80 81       	ld	r24, Z
    159a:	91 81       	ldd	r25, Z+1	; 0x01
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	11 96       	adiw	r26, 0x01	; 1
    15a0:	9c 93       	st	X, r25
    15a2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a4:	fe 01       	movw	r30, r28
    15a6:	e5 5b       	subi	r30, 0xB5	; 181
    15a8:	ff 4f       	sbci	r31, 0xFF	; 255
    15aa:	80 81       	ld	r24, Z
    15ac:	91 81       	ldd	r25, Z+1	; 0x01
    15ae:	00 97       	sbiw	r24, 0x00	; 0
    15b0:	d1 f6       	brne	.-76     	; 0x1566 <LCD_sendCommand+0xf6>
    15b2:	27 c0       	rjmp	.+78     	; 0x1602 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b4:	8e 01       	movw	r16, r28
    15b6:	05 5b       	subi	r16, 0xB5	; 181
    15b8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ba:	fe 01       	movw	r30, r28
    15bc:	e3 5b       	subi	r30, 0xB3	; 179
    15be:	ff 4f       	sbci	r31, 0xFF	; 255
    15c0:	60 81       	ld	r22, Z
    15c2:	71 81       	ldd	r23, Z+1	; 0x01
    15c4:	82 81       	ldd	r24, Z+2	; 0x02
    15c6:	93 81       	ldd	r25, Z+3	; 0x03
    15c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	f8 01       	movw	r30, r16
    15d2:	91 83       	std	Z+1, r25	; 0x01
    15d4:	80 83       	st	Z, r24
    15d6:	de 01       	movw	r26, r28
    15d8:	a9 5b       	subi	r26, 0xB9	; 185
    15da:	bf 4f       	sbci	r27, 0xFF	; 255
    15dc:	fe 01       	movw	r30, r28
    15de:	e5 5b       	subi	r30, 0xB5	; 181
    15e0:	ff 4f       	sbci	r31, 0xFF	; 255
    15e2:	80 81       	ld	r24, Z
    15e4:	91 81       	ldd	r25, Z+1	; 0x01
    15e6:	8d 93       	st	X+, r24
    15e8:	9c 93       	st	X, r25
    15ea:	fe 01       	movw	r30, r28
    15ec:	e9 5b       	subi	r30, 0xB9	; 185
    15ee:	ff 4f       	sbci	r31, 0xFF	; 255
    15f0:	80 81       	ld	r24, Z
    15f2:	91 81       	ldd	r25, Z+1	; 0x01
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	f1 f7       	brne	.-4      	; 0x15f4 <LCD_sendCommand+0x184>
    15f8:	fe 01       	movw	r30, r28
    15fa:	e9 5b       	subi	r30, 0xB9	; 185
    15fc:	ff 4f       	sbci	r31, 0xFF	; 255
    15fe:	91 83       	std	Z+1, r25	; 0x01
    1600:	80 83       	st	Z, r24
		_delay_ms(1);
	/* EN bit is used to turn on the screen*/
	GPIO_writePin(LCD_EN_PORTID,LCD_EN_PINID,LOGIC_HIGH);
    1602:	83 e0       	ldi	r24, 0x03	; 3
    1604:	63 e0       	ldi	r22, 0x03	; 3
    1606:	41 e0       	ldi	r20, 0x01	; 1
    1608:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
    160c:	fe 01       	movw	r30, r28
    160e:	ed 5b       	subi	r30, 0xBD	; 189
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	a0 e8       	ldi	r26, 0x80	; 128
    1618:	bf e3       	ldi	r27, 0x3F	; 63
    161a:	80 83       	st	Z, r24
    161c:	91 83       	std	Z+1, r25	; 0x01
    161e:	a2 83       	std	Z+2, r26	; 0x02
    1620:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1622:	8e 01       	movw	r16, r28
    1624:	01 5c       	subi	r16, 0xC1	; 193
    1626:	1f 4f       	sbci	r17, 0xFF	; 255
    1628:	fe 01       	movw	r30, r28
    162a:	ed 5b       	subi	r30, 0xBD	; 189
    162c:	ff 4f       	sbci	r31, 0xFF	; 255
    162e:	60 81       	ld	r22, Z
    1630:	71 81       	ldd	r23, Z+1	; 0x01
    1632:	82 81       	ldd	r24, Z+2	; 0x02
    1634:	93 81       	ldd	r25, Z+3	; 0x03
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	4a e7       	ldi	r20, 0x7A	; 122
    163c:	55 e4       	ldi	r21, 0x45	; 69
    163e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	f8 01       	movw	r30, r16
    1648:	80 83       	st	Z, r24
    164a:	91 83       	std	Z+1, r25	; 0x01
    164c:	a2 83       	std	Z+2, r26	; 0x02
    164e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1650:	fe 01       	movw	r30, r28
    1652:	ff 96       	adiw	r30, 0x3f	; 63
    1654:	60 81       	ld	r22, Z
    1656:	71 81       	ldd	r23, Z+1	; 0x01
    1658:	82 81       	ldd	r24, Z+2	; 0x02
    165a:	93 81       	ldd	r25, Z+3	; 0x03
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 e8       	ldi	r20, 0x80	; 128
    1662:	5f e3       	ldi	r21, 0x3F	; 63
    1664:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1668:	88 23       	and	r24, r24
    166a:	2c f4       	brge	.+10     	; 0x1676 <LCD_sendCommand+0x206>
		__ticks = 1;
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	9e af       	std	Y+62, r25	; 0x3e
    1672:	8d af       	std	Y+61, r24	; 0x3d
    1674:	46 c0       	rjmp	.+140    	; 0x1702 <LCD_sendCommand+0x292>
	else if (__tmp > 65535)
    1676:	fe 01       	movw	r30, r28
    1678:	ff 96       	adiw	r30, 0x3f	; 63
    167a:	60 81       	ld	r22, Z
    167c:	71 81       	ldd	r23, Z+1	; 0x01
    167e:	82 81       	ldd	r24, Z+2	; 0x02
    1680:	93 81       	ldd	r25, Z+3	; 0x03
    1682:	20 e0       	ldi	r18, 0x00	; 0
    1684:	3f ef       	ldi	r19, 0xFF	; 255
    1686:	4f e7       	ldi	r20, 0x7F	; 127
    1688:	57 e4       	ldi	r21, 0x47	; 71
    168a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    168e:	18 16       	cp	r1, r24
    1690:	64 f5       	brge	.+88     	; 0x16ea <LCD_sendCommand+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1692:	fe 01       	movw	r30, r28
    1694:	ed 5b       	subi	r30, 0xBD	; 189
    1696:	ff 4f       	sbci	r31, 0xFF	; 255
    1698:	60 81       	ld	r22, Z
    169a:	71 81       	ldd	r23, Z+1	; 0x01
    169c:	82 81       	ldd	r24, Z+2	; 0x02
    169e:	93 81       	ldd	r25, Z+3	; 0x03
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e2       	ldi	r20, 0x20	; 32
    16a6:	51 e4       	ldi	r21, 0x41	; 65
    16a8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16ac:	dc 01       	movw	r26, r24
    16ae:	cb 01       	movw	r24, r22
    16b0:	bc 01       	movw	r22, r24
    16b2:	cd 01       	movw	r24, r26
    16b4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	9e af       	std	Y+62, r25	; 0x3e
    16be:	8d af       	std	Y+61, r24	; 0x3d
    16c0:	0f c0       	rjmp	.+30     	; 0x16e0 <LCD_sendCommand+0x270>
    16c2:	80 e9       	ldi	r24, 0x90	; 144
    16c4:	91 e0       	ldi	r25, 0x01	; 1
    16c6:	9c af       	std	Y+60, r25	; 0x3c
    16c8:	8b af       	std	Y+59, r24	; 0x3b
    16ca:	8b ad       	ldd	r24, Y+59	; 0x3b
    16cc:	9c ad       	ldd	r25, Y+60	; 0x3c
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	f1 f7       	brne	.-4      	; 0x16ce <LCD_sendCommand+0x25e>
    16d2:	9c af       	std	Y+60, r25	; 0x3c
    16d4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    16d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    16da:	01 97       	sbiw	r24, 0x01	; 1
    16dc:	9e af       	std	Y+62, r25	; 0x3e
    16de:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    16e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    16e4:	00 97       	sbiw	r24, 0x00	; 0
    16e6:	69 f7       	brne	.-38     	; 0x16c2 <LCD_sendCommand+0x252>
    16e8:	16 c0       	rjmp	.+44     	; 0x1716 <LCD_sendCommand+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ea:	fe 01       	movw	r30, r28
    16ec:	ff 96       	adiw	r30, 0x3f	; 63
    16ee:	60 81       	ld	r22, Z
    16f0:	71 81       	ldd	r23, Z+1	; 0x01
    16f2:	82 81       	ldd	r24, Z+2	; 0x02
    16f4:	93 81       	ldd	r25, Z+3	; 0x03
    16f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    16fa:	dc 01       	movw	r26, r24
    16fc:	cb 01       	movw	r24, r22
    16fe:	9e af       	std	Y+62, r25	; 0x3e
    1700:	8d af       	std	Y+61, r24	; 0x3d
    1702:	8d ad       	ldd	r24, Y+61	; 0x3d
    1704:	9e ad       	ldd	r25, Y+62	; 0x3e
    1706:	9a af       	std	Y+58, r25	; 0x3a
    1708:	89 af       	std	Y+57, r24	; 0x39
    170a:	89 ad       	ldd	r24, Y+57	; 0x39
    170c:	9a ad       	ldd	r25, Y+58	; 0x3a
    170e:	01 97       	sbiw	r24, 0x01	; 1
    1710:	f1 f7       	brne	.-4      	; 0x170e <LCD_sendCommand+0x29e>
    1712:	9a af       	std	Y+58, r25	; 0x3a
    1714:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(1);
#if(LCD_8BITSMODE==1)
		GPIO_writePort(LCD_DATA_PORTID,a_LCD_commands);
#elif(LCD_4BITSMODE ==1 )
		GPIO_writePin(LCD_DATA_PORTID,LCD_PIN0ID,GET_BIT(a_LCD_commands,4));
    1716:	fe 01       	movw	r30, r28
    1718:	eb 5a       	subi	r30, 0xAB	; 171
    171a:	ff 4f       	sbci	r31, 0xFF	; 255
    171c:	80 81       	ld	r24, Z
    171e:	88 2f       	mov	r24, r24
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	80 71       	andi	r24, 0x10	; 16
    1724:	90 70       	andi	r25, 0x00	; 0
    1726:	95 95       	asr	r25
    1728:	87 95       	ror	r24
    172a:	95 95       	asr	r25
    172c:	87 95       	ror	r24
    172e:	95 95       	asr	r25
    1730:	87 95       	ror	r24
    1732:	95 95       	asr	r25
    1734:	87 95       	ror	r24
    1736:	98 2f       	mov	r25, r24
    1738:	82 e0       	ldi	r24, 0x02	; 2
    173a:	60 e0       	ldi	r22, 0x00	; 0
    173c:	49 2f       	mov	r20, r25
    173e:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORTID,LCD_PIN1ID,GET_BIT(a_LCD_commands,5));
    1742:	fe 01       	movw	r30, r28
    1744:	eb 5a       	subi	r30, 0xAB	; 171
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	80 81       	ld	r24, Z
    174a:	88 2f       	mov	r24, r24
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	80 72       	andi	r24, 0x20	; 32
    1750:	90 70       	andi	r25, 0x00	; 0
    1752:	95 95       	asr	r25
    1754:	87 95       	ror	r24
    1756:	95 95       	asr	r25
    1758:	87 95       	ror	r24
    175a:	95 95       	asr	r25
    175c:	87 95       	ror	r24
    175e:	95 95       	asr	r25
    1760:	87 95       	ror	r24
    1762:	95 95       	asr	r25
    1764:	87 95       	ror	r24
    1766:	98 2f       	mov	r25, r24
    1768:	82 e0       	ldi	r24, 0x02	; 2
    176a:	61 e0       	ldi	r22, 0x01	; 1
    176c:	49 2f       	mov	r20, r25
    176e:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORTID,LCD_PIN2ID,GET_BIT(a_LCD_commands,6));
    1772:	fe 01       	movw	r30, r28
    1774:	eb 5a       	subi	r30, 0xAB	; 171
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	80 81       	ld	r24, Z
    177a:	88 2f       	mov	r24, r24
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	80 74       	andi	r24, 0x40	; 64
    1780:	90 70       	andi	r25, 0x00	; 0
    1782:	08 2e       	mov	r0, r24
    1784:	89 2f       	mov	r24, r25
    1786:	00 0c       	add	r0, r0
    1788:	88 1f       	adc	r24, r24
    178a:	99 0b       	sbc	r25, r25
    178c:	00 0c       	add	r0, r0
    178e:	88 1f       	adc	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	98 2f       	mov	r25, r24
    1794:	82 e0       	ldi	r24, 0x02	; 2
    1796:	62 e0       	ldi	r22, 0x02	; 2
    1798:	49 2f       	mov	r20, r25
    179a:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORTID,LCD_PIN3ID,GET_BIT(a_LCD_commands,7));
    179e:	fe 01       	movw	r30, r28
    17a0:	eb 5a       	subi	r30, 0xAB	; 171
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	80 81       	ld	r24, Z
    17a6:	98 2f       	mov	r25, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	99 27       	eor	r25, r25
    17ac:	99 1f       	adc	r25, r25
    17ae:	82 e0       	ldi	r24, 0x02	; 2
    17b0:	63 e0       	ldi	r22, 0x03	; 3
    17b2:	49 2f       	mov	r20, r25
    17b4:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	a0 e8       	ldi	r26, 0x80	; 128
    17be:	bf e3       	ldi	r27, 0x3F	; 63
    17c0:	8d ab       	std	Y+53, r24	; 0x35
    17c2:	9e ab       	std	Y+54, r25	; 0x36
    17c4:	af ab       	std	Y+55, r26	; 0x37
    17c6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17c8:	6d a9       	ldd	r22, Y+53	; 0x35
    17ca:	7e a9       	ldd	r23, Y+54	; 0x36
    17cc:	8f a9       	ldd	r24, Y+55	; 0x37
    17ce:	98 ad       	ldd	r25, Y+56	; 0x38
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	4a e7       	ldi	r20, 0x7A	; 122
    17d6:	55 e4       	ldi	r21, 0x45	; 69
    17d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	89 ab       	std	Y+49, r24	; 0x31
    17e2:	9a ab       	std	Y+50, r25	; 0x32
    17e4:	ab ab       	std	Y+51, r26	; 0x33
    17e6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17e8:	69 a9       	ldd	r22, Y+49	; 0x31
    17ea:	7a a9       	ldd	r23, Y+50	; 0x32
    17ec:	8b a9       	ldd	r24, Y+51	; 0x33
    17ee:	9c a9       	ldd	r25, Y+52	; 0x34
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	40 e8       	ldi	r20, 0x80	; 128
    17f6:	5f e3       	ldi	r21, 0x3F	; 63
    17f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17fc:	88 23       	and	r24, r24
    17fe:	2c f4       	brge	.+10     	; 0x180a <LCD_sendCommand+0x39a>
		__ticks = 1;
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	98 ab       	std	Y+48, r25	; 0x30
    1806:	8f a7       	std	Y+47, r24	; 0x2f
    1808:	3f c0       	rjmp	.+126    	; 0x1888 <LCD_sendCommand+0x418>
	else if (__tmp > 65535)
    180a:	69 a9       	ldd	r22, Y+49	; 0x31
    180c:	7a a9       	ldd	r23, Y+50	; 0x32
    180e:	8b a9       	ldd	r24, Y+51	; 0x33
    1810:	9c a9       	ldd	r25, Y+52	; 0x34
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	3f ef       	ldi	r19, 0xFF	; 255
    1816:	4f e7       	ldi	r20, 0x7F	; 127
    1818:	57 e4       	ldi	r21, 0x47	; 71
    181a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    181e:	18 16       	cp	r1, r24
    1820:	4c f5       	brge	.+82     	; 0x1874 <LCD_sendCommand+0x404>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1822:	6d a9       	ldd	r22, Y+53	; 0x35
    1824:	7e a9       	ldd	r23, Y+54	; 0x36
    1826:	8f a9       	ldd	r24, Y+55	; 0x37
    1828:	98 ad       	ldd	r25, Y+56	; 0x38
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	40 e2       	ldi	r20, 0x20	; 32
    1830:	51 e4       	ldi	r21, 0x41	; 65
    1832:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	bc 01       	movw	r22, r24
    183c:	cd 01       	movw	r24, r26
    183e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1842:	dc 01       	movw	r26, r24
    1844:	cb 01       	movw	r24, r22
    1846:	98 ab       	std	Y+48, r25	; 0x30
    1848:	8f a7       	std	Y+47, r24	; 0x2f
    184a:	0f c0       	rjmp	.+30     	; 0x186a <LCD_sendCommand+0x3fa>
    184c:	80 e9       	ldi	r24, 0x90	; 144
    184e:	91 e0       	ldi	r25, 0x01	; 1
    1850:	9e a7       	std	Y+46, r25	; 0x2e
    1852:	8d a7       	std	Y+45, r24	; 0x2d
    1854:	8d a5       	ldd	r24, Y+45	; 0x2d
    1856:	9e a5       	ldd	r25, Y+46	; 0x2e
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <LCD_sendCommand+0x3e8>
    185c:	9e a7       	std	Y+46, r25	; 0x2e
    185e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1860:	8f a5       	ldd	r24, Y+47	; 0x2f
    1862:	98 a9       	ldd	r25, Y+48	; 0x30
    1864:	01 97       	sbiw	r24, 0x01	; 1
    1866:	98 ab       	std	Y+48, r25	; 0x30
    1868:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    186a:	8f a5       	ldd	r24, Y+47	; 0x2f
    186c:	98 a9       	ldd	r25, Y+48	; 0x30
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	69 f7       	brne	.-38     	; 0x184c <LCD_sendCommand+0x3dc>
    1872:	14 c0       	rjmp	.+40     	; 0x189c <LCD_sendCommand+0x42c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1874:	69 a9       	ldd	r22, Y+49	; 0x31
    1876:	7a a9       	ldd	r23, Y+50	; 0x32
    1878:	8b a9       	ldd	r24, Y+51	; 0x33
    187a:	9c a9       	ldd	r25, Y+52	; 0x34
    187c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	98 ab       	std	Y+48, r25	; 0x30
    1886:	8f a7       	std	Y+47, r24	; 0x2f
    1888:	8f a5       	ldd	r24, Y+47	; 0x2f
    188a:	98 a9       	ldd	r25, Y+48	; 0x30
    188c:	9c a7       	std	Y+44, r25	; 0x2c
    188e:	8b a7       	std	Y+43, r24	; 0x2b
    1890:	8b a5       	ldd	r24, Y+43	; 0x2b
    1892:	9c a5       	ldd	r25, Y+44	; 0x2c
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	f1 f7       	brne	.-4      	; 0x1894 <LCD_sendCommand+0x424>
    1898:	9c a7       	std	Y+44, r25	; 0x2c
    189a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		GPIO_writePin(LCD_EN_PORTID,LCD_EN_PINID,LOGIC_LOW);
    189c:	83 e0       	ldi	r24, 0x03	; 3
    189e:	63 e0       	ldi	r22, 0x03	; 3
    18a0:	40 e0       	ldi	r20, 0x00	; 0
    18a2:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	a0 e8       	ldi	r26, 0x80	; 128
    18ac:	bf e3       	ldi	r27, 0x3F	; 63
    18ae:	8f a3       	std	Y+39, r24	; 0x27
    18b0:	98 a7       	std	Y+40, r25	; 0x28
    18b2:	a9 a7       	std	Y+41, r26	; 0x29
    18b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b6:	6f a1       	ldd	r22, Y+39	; 0x27
    18b8:	78 a5       	ldd	r23, Y+40	; 0x28
    18ba:	89 a5       	ldd	r24, Y+41	; 0x29
    18bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	4a e7       	ldi	r20, 0x7A	; 122
    18c4:	55 e4       	ldi	r21, 0x45	; 69
    18c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	8b a3       	std	Y+35, r24	; 0x23
    18d0:	9c a3       	std	Y+36, r25	; 0x24
    18d2:	ad a3       	std	Y+37, r26	; 0x25
    18d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18d6:	6b a1       	ldd	r22, Y+35	; 0x23
    18d8:	7c a1       	ldd	r23, Y+36	; 0x24
    18da:	8d a1       	ldd	r24, Y+37	; 0x25
    18dc:	9e a1       	ldd	r25, Y+38	; 0x26
    18de:	20 e0       	ldi	r18, 0x00	; 0
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	40 e8       	ldi	r20, 0x80	; 128
    18e4:	5f e3       	ldi	r21, 0x3F	; 63
    18e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18ea:	88 23       	and	r24, r24
    18ec:	2c f4       	brge	.+10     	; 0x18f8 <LCD_sendCommand+0x488>
		__ticks = 1;
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	9a a3       	std	Y+34, r25	; 0x22
    18f4:	89 a3       	std	Y+33, r24	; 0x21
    18f6:	3f c0       	rjmp	.+126    	; 0x1976 <LCD_sendCommand+0x506>
	else if (__tmp > 65535)
    18f8:	6b a1       	ldd	r22, Y+35	; 0x23
    18fa:	7c a1       	ldd	r23, Y+36	; 0x24
    18fc:	8d a1       	ldd	r24, Y+37	; 0x25
    18fe:	9e a1       	ldd	r25, Y+38	; 0x26
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	3f ef       	ldi	r19, 0xFF	; 255
    1904:	4f e7       	ldi	r20, 0x7F	; 127
    1906:	57 e4       	ldi	r21, 0x47	; 71
    1908:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    190c:	18 16       	cp	r1, r24
    190e:	4c f5       	brge	.+82     	; 0x1962 <LCD_sendCommand+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1910:	6f a1       	ldd	r22, Y+39	; 0x27
    1912:	78 a5       	ldd	r23, Y+40	; 0x28
    1914:	89 a5       	ldd	r24, Y+41	; 0x29
    1916:	9a a5       	ldd	r25, Y+42	; 0x2a
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	40 e2       	ldi	r20, 0x20	; 32
    191e:	51 e4       	ldi	r21, 0x41	; 65
    1920:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	bc 01       	movw	r22, r24
    192a:	cd 01       	movw	r24, r26
    192c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	9a a3       	std	Y+34, r25	; 0x22
    1936:	89 a3       	std	Y+33, r24	; 0x21
    1938:	0f c0       	rjmp	.+30     	; 0x1958 <LCD_sendCommand+0x4e8>
    193a:	80 e9       	ldi	r24, 0x90	; 144
    193c:	91 e0       	ldi	r25, 0x01	; 1
    193e:	98 a3       	std	Y+32, r25	; 0x20
    1940:	8f 8f       	std	Y+31, r24	; 0x1f
    1942:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1944:	98 a1       	ldd	r25, Y+32	; 0x20
    1946:	01 97       	sbiw	r24, 0x01	; 1
    1948:	f1 f7       	brne	.-4      	; 0x1946 <LCD_sendCommand+0x4d6>
    194a:	98 a3       	std	Y+32, r25	; 0x20
    194c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194e:	89 a1       	ldd	r24, Y+33	; 0x21
    1950:	9a a1       	ldd	r25, Y+34	; 0x22
    1952:	01 97       	sbiw	r24, 0x01	; 1
    1954:	9a a3       	std	Y+34, r25	; 0x22
    1956:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1958:	89 a1       	ldd	r24, Y+33	; 0x21
    195a:	9a a1       	ldd	r25, Y+34	; 0x22
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	69 f7       	brne	.-38     	; 0x193a <LCD_sendCommand+0x4ca>
    1960:	14 c0       	rjmp	.+40     	; 0x198a <LCD_sendCommand+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1962:	6b a1       	ldd	r22, Y+35	; 0x23
    1964:	7c a1       	ldd	r23, Y+36	; 0x24
    1966:	8d a1       	ldd	r24, Y+37	; 0x25
    1968:	9e a1       	ldd	r25, Y+38	; 0x26
    196a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	9a a3       	std	Y+34, r25	; 0x22
    1974:	89 a3       	std	Y+33, r24	; 0x21
    1976:	89 a1       	ldd	r24, Y+33	; 0x21
    1978:	9a a1       	ldd	r25, Y+34	; 0x22
    197a:	9e 8f       	std	Y+30, r25	; 0x1e
    197c:	8d 8f       	std	Y+29, r24	; 0x1d
    197e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1980:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	f1 f7       	brne	.-4      	; 0x1982 <LCD_sendCommand+0x512>
    1986:	9e 8f       	std	Y+30, r25	; 0x1e
    1988:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		GPIO_writePin(LCD_EN_PORTID,LCD_EN_PINID,LOGIC_HIGH);
    198a:	83 e0       	ldi	r24, 0x03	; 3
    198c:	63 e0       	ldi	r22, 0x03	; 3
    198e:	41 e0       	ldi	r20, 0x01	; 1
    1990:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>

		GPIO_writePin(LCD_DATA_PORTID,LCD_PIN0ID,GET_BIT(a_LCD_commands,0));
    1994:	fe 01       	movw	r30, r28
    1996:	eb 5a       	subi	r30, 0xAB	; 171
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	80 81       	ld	r24, Z
    199c:	98 2f       	mov	r25, r24
    199e:	91 70       	andi	r25, 0x01	; 1
    19a0:	82 e0       	ldi	r24, 0x02	; 2
    19a2:	60 e0       	ldi	r22, 0x00	; 0
    19a4:	49 2f       	mov	r20, r25
    19a6:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORTID,LCD_PIN1ID,GET_BIT(a_LCD_commands,1));
    19aa:	fe 01       	movw	r30, r28
    19ac:	eb 5a       	subi	r30, 0xAB	; 171
    19ae:	ff 4f       	sbci	r31, 0xFF	; 255
    19b0:	80 81       	ld	r24, Z
    19b2:	88 2f       	mov	r24, r24
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	82 70       	andi	r24, 0x02	; 2
    19b8:	90 70       	andi	r25, 0x00	; 0
    19ba:	95 95       	asr	r25
    19bc:	87 95       	ror	r24
    19be:	98 2f       	mov	r25, r24
    19c0:	82 e0       	ldi	r24, 0x02	; 2
    19c2:	61 e0       	ldi	r22, 0x01	; 1
    19c4:	49 2f       	mov	r20, r25
    19c6:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORTID,LCD_PIN2ID,GET_BIT(a_LCD_commands,2));
    19ca:	fe 01       	movw	r30, r28
    19cc:	eb 5a       	subi	r30, 0xAB	; 171
    19ce:	ff 4f       	sbci	r31, 0xFF	; 255
    19d0:	80 81       	ld	r24, Z
    19d2:	88 2f       	mov	r24, r24
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	84 70       	andi	r24, 0x04	; 4
    19d8:	90 70       	andi	r25, 0x00	; 0
    19da:	95 95       	asr	r25
    19dc:	87 95       	ror	r24
    19de:	95 95       	asr	r25
    19e0:	87 95       	ror	r24
    19e2:	98 2f       	mov	r25, r24
    19e4:	82 e0       	ldi	r24, 0x02	; 2
    19e6:	62 e0       	ldi	r22, 0x02	; 2
    19e8:	49 2f       	mov	r20, r25
    19ea:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORTID,LCD_PIN3ID,GET_BIT(a_LCD_commands,3));
    19ee:	fe 01       	movw	r30, r28
    19f0:	eb 5a       	subi	r30, 0xAB	; 171
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	80 81       	ld	r24, Z
    19f6:	88 2f       	mov	r24, r24
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	88 70       	andi	r24, 0x08	; 8
    19fc:	90 70       	andi	r25, 0x00	; 0
    19fe:	95 95       	asr	r25
    1a00:	87 95       	ror	r24
    1a02:	95 95       	asr	r25
    1a04:	87 95       	ror	r24
    1a06:	95 95       	asr	r25
    1a08:	87 95       	ror	r24
    1a0a:	98 2f       	mov	r25, r24
    1a0c:	82 e0       	ldi	r24, 0x02	; 2
    1a0e:	63 e0       	ldi	r22, 0x03	; 3
    1a10:	49 2f       	mov	r20, r25
    1a12:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	a0 e8       	ldi	r26, 0x80	; 128
    1a1c:	bf e3       	ldi	r27, 0x3F	; 63
    1a1e:	89 8f       	std	Y+25, r24	; 0x19
    1a20:	9a 8f       	std	Y+26, r25	; 0x1a
    1a22:	ab 8f       	std	Y+27, r26	; 0x1b
    1a24:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a26:	69 8d       	ldd	r22, Y+25	; 0x19
    1a28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	4a e7       	ldi	r20, 0x7A	; 122
    1a34:	55 e4       	ldi	r21, 0x45	; 69
    1a36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	8d 8b       	std	Y+21, r24	; 0x15
    1a40:	9e 8b       	std	Y+22, r25	; 0x16
    1a42:	af 8b       	std	Y+23, r26	; 0x17
    1a44:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a46:	6d 89       	ldd	r22, Y+21	; 0x15
    1a48:	7e 89       	ldd	r23, Y+22	; 0x16
    1a4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e8       	ldi	r20, 0x80	; 128
    1a54:	5f e3       	ldi	r21, 0x3F	; 63
    1a56:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a5a:	88 23       	and	r24, r24
    1a5c:	2c f4       	brge	.+10     	; 0x1a68 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	9c 8b       	std	Y+20, r25	; 0x14
    1a64:	8b 8b       	std	Y+19, r24	; 0x13
    1a66:	3f c0       	rjmp	.+126    	; 0x1ae6 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1a68:	6d 89       	ldd	r22, Y+21	; 0x15
    1a6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	3f ef       	ldi	r19, 0xFF	; 255
    1a74:	4f e7       	ldi	r20, 0x7F	; 127
    1a76:	57 e4       	ldi	r21, 0x47	; 71
    1a78:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a7c:	18 16       	cp	r1, r24
    1a7e:	4c f5       	brge	.+82     	; 0x1ad2 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a80:	69 8d       	ldd	r22, Y+25	; 0x19
    1a82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e2       	ldi	r20, 0x20	; 32
    1a8e:	51 e4       	ldi	r21, 0x41	; 65
    1a90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	bc 01       	movw	r22, r24
    1a9a:	cd 01       	movw	r24, r26
    1a9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	9c 8b       	std	Y+20, r25	; 0x14
    1aa6:	8b 8b       	std	Y+19, r24	; 0x13
    1aa8:	0f c0       	rjmp	.+30     	; 0x1ac8 <LCD_sendCommand+0x658>
    1aaa:	80 e9       	ldi	r24, 0x90	; 144
    1aac:	91 e0       	ldi	r25, 0x01	; 1
    1aae:	9a 8b       	std	Y+18, r25	; 0x12
    1ab0:	89 8b       	std	Y+17, r24	; 0x11
    1ab2:	89 89       	ldd	r24, Y+17	; 0x11
    1ab4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <LCD_sendCommand+0x646>
    1aba:	9a 8b       	std	Y+18, r25	; 0x12
    1abc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abe:	8b 89       	ldd	r24, Y+19	; 0x13
    1ac0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	9c 8b       	std	Y+20, r25	; 0x14
    1ac6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac8:	8b 89       	ldd	r24, Y+19	; 0x13
    1aca:	9c 89       	ldd	r25, Y+20	; 0x14
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	69 f7       	brne	.-38     	; 0x1aaa <LCD_sendCommand+0x63a>
    1ad0:	14 c0       	rjmp	.+40     	; 0x1afa <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ad4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ad6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ad8:	98 8d       	ldd	r25, Y+24	; 0x18
    1ada:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	9c 8b       	std	Y+20, r25	; 0x14
    1ae4:	8b 8b       	std	Y+19, r24	; 0x13
    1ae6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae8:	9c 89       	ldd	r25, Y+20	; 0x14
    1aea:	98 8b       	std	Y+16, r25	; 0x10
    1aec:	8f 87       	std	Y+15, r24	; 0x0f
    1aee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1af0:	98 89       	ldd	r25, Y+16	; 0x10
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <LCD_sendCommand+0x682>
    1af6:	98 8b       	std	Y+16, r25	; 0x10
    1af8:	8f 87       	std	Y+15, r24	; 0x0f
#endif
		_delay_ms(1);
		GPIO_writePin(LCD_EN_PORTID,LCD_EN_PINID,LOGIC_LOW);
    1afa:	83 e0       	ldi	r24, 0x03	; 3
    1afc:	63 e0       	ldi	r22, 0x03	; 3
    1afe:	40 e0       	ldi	r20, 0x00	; 0
    1b00:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	90 e0       	ldi	r25, 0x00	; 0
    1b08:	a0 e8       	ldi	r26, 0x80	; 128
    1b0a:	bf e3       	ldi	r27, 0x3F	; 63
    1b0c:	8b 87       	std	Y+11, r24	; 0x0b
    1b0e:	9c 87       	std	Y+12, r25	; 0x0c
    1b10:	ad 87       	std	Y+13, r26	; 0x0d
    1b12:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	4a e7       	ldi	r20, 0x7A	; 122
    1b22:	55 e4       	ldi	r21, 0x45	; 69
    1b24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b28:	dc 01       	movw	r26, r24
    1b2a:	cb 01       	movw	r24, r22
    1b2c:	8f 83       	std	Y+7, r24	; 0x07
    1b2e:	98 87       	std	Y+8, r25	; 0x08
    1b30:	a9 87       	std	Y+9, r26	; 0x09
    1b32:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b34:	6f 81       	ldd	r22, Y+7	; 0x07
    1b36:	78 85       	ldd	r23, Y+8	; 0x08
    1b38:	89 85       	ldd	r24, Y+9	; 0x09
    1b3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	40 e8       	ldi	r20, 0x80	; 128
    1b42:	5f e3       	ldi	r21, 0x3F	; 63
    1b44:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b48:	88 23       	and	r24, r24
    1b4a:	2c f4       	brge	.+10     	; 0x1b56 <LCD_sendCommand+0x6e6>
		__ticks = 1;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	9e 83       	std	Y+6, r25	; 0x06
    1b52:	8d 83       	std	Y+5, r24	; 0x05
    1b54:	3f c0       	rjmp	.+126    	; 0x1bd4 <LCD_sendCommand+0x764>
	else if (__tmp > 65535)
    1b56:	6f 81       	ldd	r22, Y+7	; 0x07
    1b58:	78 85       	ldd	r23, Y+8	; 0x08
    1b5a:	89 85       	ldd	r24, Y+9	; 0x09
    1b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	3f ef       	ldi	r19, 0xFF	; 255
    1b62:	4f e7       	ldi	r20, 0x7F	; 127
    1b64:	57 e4       	ldi	r21, 0x47	; 71
    1b66:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b6a:	18 16       	cp	r1, r24
    1b6c:	4c f5       	brge	.+82     	; 0x1bc0 <LCD_sendCommand+0x750>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e2       	ldi	r20, 0x20	; 32
    1b7c:	51 e4       	ldi	r21, 0x41	; 65
    1b7e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b82:	dc 01       	movw	r26, r24
    1b84:	cb 01       	movw	r24, r22
    1b86:	bc 01       	movw	r22, r24
    1b88:	cd 01       	movw	r24, r26
    1b8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	9e 83       	std	Y+6, r25	; 0x06
    1b94:	8d 83       	std	Y+5, r24	; 0x05
    1b96:	0f c0       	rjmp	.+30     	; 0x1bb6 <LCD_sendCommand+0x746>
    1b98:	80 e9       	ldi	r24, 0x90	; 144
    1b9a:	91 e0       	ldi	r25, 0x01	; 1
    1b9c:	9c 83       	std	Y+4, r25	; 0x04
    1b9e:	8b 83       	std	Y+3, r24	; 0x03
    1ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba4:	01 97       	sbiw	r24, 0x01	; 1
    1ba6:	f1 f7       	brne	.-4      	; 0x1ba4 <LCD_sendCommand+0x734>
    1ba8:	9c 83       	std	Y+4, r25	; 0x04
    1baa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bac:	8d 81       	ldd	r24, Y+5	; 0x05
    1bae:	9e 81       	ldd	r25, Y+6	; 0x06
    1bb0:	01 97       	sbiw	r24, 0x01	; 1
    1bb2:	9e 83       	std	Y+6, r25	; 0x06
    1bb4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bba:	00 97       	sbiw	r24, 0x00	; 0
    1bbc:	69 f7       	brne	.-38     	; 0x1b98 <LCD_sendCommand+0x728>
    1bbe:	14 c0       	rjmp	.+40     	; 0x1be8 <LCD_sendCommand+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bc0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc2:	78 85       	ldd	r23, Y+8	; 0x08
    1bc4:	89 85       	ldd	r24, Y+9	; 0x09
    1bc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bc8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	9e 83       	std	Y+6, r25	; 0x06
    1bd2:	8d 83       	std	Y+5, r24	; 0x05
    1bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd8:	9a 83       	std	Y+2, r25	; 0x02
    1bda:	89 83       	std	Y+1, r24	; 0x01
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	9a 81       	ldd	r25, Y+2	; 0x02
    1be0:	01 97       	sbiw	r24, 0x01	; 1
    1be2:	f1 f7       	brne	.-4      	; 0x1be0 <LCD_sendCommand+0x770>
    1be4:	9a 83       	std	Y+2, r25	; 0x02
    1be6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
}
    1be8:	cb 5a       	subi	r28, 0xAB	; 171
    1bea:	df 4f       	sbci	r29, 0xFF	; 255
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	de bf       	out	0x3e, r29	; 62
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	cd bf       	out	0x3d, r28	; 61
    1bf6:	cf 91       	pop	r28
    1bf8:	df 91       	pop	r29
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	08 95       	ret

00001c00 <LCD_displayCharachter>:

void LCD_displayCharachter(uint8 a_char)
{
    1c00:	0f 93       	push	r16
    1c02:	1f 93       	push	r17
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
    1c0c:	c5 55       	subi	r28, 0x55	; 85
    1c0e:	d0 40       	sbci	r29, 0x00	; 0
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	de bf       	out	0x3e, r29	; 62
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	cd bf       	out	0x3d, r28	; 61
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	eb 5a       	subi	r30, 0xAB	; 171
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	80 83       	st	Z, r24
	/* RS bit is responsible for register select for each of data and
		 *  commands to adjust settings*/
		GPIO_writePin(LCD_RS_PORTID,LCD_RS_PINID,LCD_SELECT_DATA_REGISTER);
    1c22:	83 e0       	ldi	r24, 0x03	; 3
    1c24:	62 e0       	ldi	r22, 0x02	; 2
    1c26:	41 e0       	ldi	r20, 0x01	; 1
    1c28:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	ef 5a       	subi	r30, 0xAF	; 175
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	a0 e8       	ldi	r26, 0x80	; 128
    1c38:	bf e3       	ldi	r27, 0x3F	; 63
    1c3a:	80 83       	st	Z, r24
    1c3c:	91 83       	std	Z+1, r25	; 0x01
    1c3e:	a2 83       	std	Z+2, r26	; 0x02
    1c40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c42:	8e 01       	movw	r16, r28
    1c44:	03 5b       	subi	r16, 0xB3	; 179
    1c46:	1f 4f       	sbci	r17, 0xFF	; 255
    1c48:	fe 01       	movw	r30, r28
    1c4a:	ef 5a       	subi	r30, 0xAF	; 175
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	60 81       	ld	r22, Z
    1c50:	71 81       	ldd	r23, Z+1	; 0x01
    1c52:	82 81       	ldd	r24, Z+2	; 0x02
    1c54:	93 81       	ldd	r25, Z+3	; 0x03
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	4a e7       	ldi	r20, 0x7A	; 122
    1c5c:	55 e4       	ldi	r21, 0x45	; 69
    1c5e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c62:	dc 01       	movw	r26, r24
    1c64:	cb 01       	movw	r24, r22
    1c66:	f8 01       	movw	r30, r16
    1c68:	80 83       	st	Z, r24
    1c6a:	91 83       	std	Z+1, r25	; 0x01
    1c6c:	a2 83       	std	Z+2, r26	; 0x02
    1c6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c70:	fe 01       	movw	r30, r28
    1c72:	e3 5b       	subi	r30, 0xB3	; 179
    1c74:	ff 4f       	sbci	r31, 0xFF	; 255
    1c76:	60 81       	ld	r22, Z
    1c78:	71 81       	ldd	r23, Z+1	; 0x01
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	93 81       	ldd	r25, Z+3	; 0x03
    1c7e:	20 e0       	ldi	r18, 0x00	; 0
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	40 e8       	ldi	r20, 0x80	; 128
    1c84:	5f e3       	ldi	r21, 0x3F	; 63
    1c86:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c8a:	88 23       	and	r24, r24
    1c8c:	44 f4       	brge	.+16     	; 0x1c9e <LCD_displayCharachter+0x9e>
		__ticks = 1;
    1c8e:	fe 01       	movw	r30, r28
    1c90:	e5 5b       	subi	r30, 0xB5	; 181
    1c92:	ff 4f       	sbci	r31, 0xFF	; 255
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	91 83       	std	Z+1, r25	; 0x01
    1c9a:	80 83       	st	Z, r24
    1c9c:	64 c0       	rjmp	.+200    	; 0x1d66 <LCD_displayCharachter+0x166>
	else if (__tmp > 65535)
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	e3 5b       	subi	r30, 0xB3	; 179
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	60 81       	ld	r22, Z
    1ca6:	71 81       	ldd	r23, Z+1	; 0x01
    1ca8:	82 81       	ldd	r24, Z+2	; 0x02
    1caa:	93 81       	ldd	r25, Z+3	; 0x03
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	3f ef       	ldi	r19, 0xFF	; 255
    1cb0:	4f e7       	ldi	r20, 0x7F	; 127
    1cb2:	57 e4       	ldi	r21, 0x47	; 71
    1cb4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1cb8:	18 16       	cp	r1, r24
    1cba:	0c f0       	brlt	.+2      	; 0x1cbe <LCD_displayCharachter+0xbe>
    1cbc:	43 c0       	rjmp	.+134    	; 0x1d44 <LCD_displayCharachter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	ef 5a       	subi	r30, 0xAF	; 175
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	60 81       	ld	r22, Z
    1cc6:	71 81       	ldd	r23, Z+1	; 0x01
    1cc8:	82 81       	ldd	r24, Z+2	; 0x02
    1cca:	93 81       	ldd	r25, Z+3	; 0x03
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	40 e2       	ldi	r20, 0x20	; 32
    1cd2:	51 e4       	ldi	r21, 0x41	; 65
    1cd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	8e 01       	movw	r16, r28
    1cde:	05 5b       	subi	r16, 0xB5	; 181
    1ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce2:	bc 01       	movw	r22, r24
    1ce4:	cd 01       	movw	r24, r26
    1ce6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	f8 01       	movw	r30, r16
    1cf0:	91 83       	std	Z+1, r25	; 0x01
    1cf2:	80 83       	st	Z, r24
    1cf4:	1f c0       	rjmp	.+62     	; 0x1d34 <LCD_displayCharachter+0x134>
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	e7 5b       	subi	r30, 0xB7	; 183
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	80 e9       	ldi	r24, 0x90	; 144
    1cfe:	91 e0       	ldi	r25, 0x01	; 1
    1d00:	91 83       	std	Z+1, r25	; 0x01
    1d02:	80 83       	st	Z, r24
    1d04:	fe 01       	movw	r30, r28
    1d06:	e7 5b       	subi	r30, 0xB7	; 183
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	80 81       	ld	r24, Z
    1d0c:	91 81       	ldd	r25, Z+1	; 0x01
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	f1 f7       	brne	.-4      	; 0x1d0e <LCD_displayCharachter+0x10e>
    1d12:	fe 01       	movw	r30, r28
    1d14:	e7 5b       	subi	r30, 0xB7	; 183
    1d16:	ff 4f       	sbci	r31, 0xFF	; 255
    1d18:	91 83       	std	Z+1, r25	; 0x01
    1d1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1c:	de 01       	movw	r26, r28
    1d1e:	a5 5b       	subi	r26, 0xB5	; 181
    1d20:	bf 4f       	sbci	r27, 0xFF	; 255
    1d22:	fe 01       	movw	r30, r28
    1d24:	e5 5b       	subi	r30, 0xB5	; 181
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	80 81       	ld	r24, Z
    1d2a:	91 81       	ldd	r25, Z+1	; 0x01
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	11 96       	adiw	r26, 0x01	; 1
    1d30:	9c 93       	st	X, r25
    1d32:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d34:	fe 01       	movw	r30, r28
    1d36:	e5 5b       	subi	r30, 0xB5	; 181
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	80 81       	ld	r24, Z
    1d3c:	91 81       	ldd	r25, Z+1	; 0x01
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	d1 f6       	brne	.-76     	; 0x1cf6 <LCD_displayCharachter+0xf6>
    1d42:	27 c0       	rjmp	.+78     	; 0x1d92 <LCD_displayCharachter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d44:	8e 01       	movw	r16, r28
    1d46:	05 5b       	subi	r16, 0xB5	; 181
    1d48:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4a:	fe 01       	movw	r30, r28
    1d4c:	e3 5b       	subi	r30, 0xB3	; 179
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	60 81       	ld	r22, Z
    1d52:	71 81       	ldd	r23, Z+1	; 0x01
    1d54:	82 81       	ldd	r24, Z+2	; 0x02
    1d56:	93 81       	ldd	r25, Z+3	; 0x03
    1d58:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	f8 01       	movw	r30, r16
    1d62:	91 83       	std	Z+1, r25	; 0x01
    1d64:	80 83       	st	Z, r24
    1d66:	de 01       	movw	r26, r28
    1d68:	a9 5b       	subi	r26, 0xB9	; 185
    1d6a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	e5 5b       	subi	r30, 0xB5	; 181
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	80 81       	ld	r24, Z
    1d74:	91 81       	ldd	r25, Z+1	; 0x01
    1d76:	8d 93       	st	X+, r24
    1d78:	9c 93       	st	X, r25
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	e9 5b       	subi	r30, 0xB9	; 185
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	80 81       	ld	r24, Z
    1d82:	91 81       	ldd	r25, Z+1	; 0x01
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <LCD_displayCharachter+0x184>
    1d88:	fe 01       	movw	r30, r28
    1d8a:	e9 5b       	subi	r30, 0xB9	; 185
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	91 83       	std	Z+1, r25	; 0x01
    1d90:	80 83       	st	Z, r24
			_delay_ms(1);
		/* EN bit is used to turn on the screen*/

		GPIO_writePin(LCD_EN_PORTID,LCD_EN_PINID,LOGIC_HIGH);
    1d92:	83 e0       	ldi	r24, 0x03	; 3
    1d94:	63 e0       	ldi	r22, 0x03	; 3
    1d96:	41 e0       	ldi	r20, 0x01	; 1
    1d98:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	ed 5b       	subi	r30, 0xBD	; 189
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	a0 e8       	ldi	r26, 0x80	; 128
    1da8:	bf e3       	ldi	r27, 0x3F	; 63
    1daa:	80 83       	st	Z, r24
    1dac:	91 83       	std	Z+1, r25	; 0x01
    1dae:	a2 83       	std	Z+2, r26	; 0x02
    1db0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1db2:	8e 01       	movw	r16, r28
    1db4:	01 5c       	subi	r16, 0xC1	; 193
    1db6:	1f 4f       	sbci	r17, 0xFF	; 255
    1db8:	fe 01       	movw	r30, r28
    1dba:	ed 5b       	subi	r30, 0xBD	; 189
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	60 81       	ld	r22, Z
    1dc0:	71 81       	ldd	r23, Z+1	; 0x01
    1dc2:	82 81       	ldd	r24, Z+2	; 0x02
    1dc4:	93 81       	ldd	r25, Z+3	; 0x03
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	4a e7       	ldi	r20, 0x7A	; 122
    1dcc:	55 e4       	ldi	r21, 0x45	; 69
    1dce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	f8 01       	movw	r30, r16
    1dd8:	80 83       	st	Z, r24
    1dda:	91 83       	std	Z+1, r25	; 0x01
    1ddc:	a2 83       	std	Z+2, r26	; 0x02
    1dde:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1de0:	fe 01       	movw	r30, r28
    1de2:	ff 96       	adiw	r30, 0x3f	; 63
    1de4:	60 81       	ld	r22, Z
    1de6:	71 81       	ldd	r23, Z+1	; 0x01
    1de8:	82 81       	ldd	r24, Z+2	; 0x02
    1dea:	93 81       	ldd	r25, Z+3	; 0x03
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e8       	ldi	r20, 0x80	; 128
    1df2:	5f e3       	ldi	r21, 0x3F	; 63
    1df4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1df8:	88 23       	and	r24, r24
    1dfa:	2c f4       	brge	.+10     	; 0x1e06 <LCD_displayCharachter+0x206>
		__ticks = 1;
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	9e af       	std	Y+62, r25	; 0x3e
    1e02:	8d af       	std	Y+61, r24	; 0x3d
    1e04:	46 c0       	rjmp	.+140    	; 0x1e92 <LCD_displayCharachter+0x292>
	else if (__tmp > 65535)
    1e06:	fe 01       	movw	r30, r28
    1e08:	ff 96       	adiw	r30, 0x3f	; 63
    1e0a:	60 81       	ld	r22, Z
    1e0c:	71 81       	ldd	r23, Z+1	; 0x01
    1e0e:	82 81       	ldd	r24, Z+2	; 0x02
    1e10:	93 81       	ldd	r25, Z+3	; 0x03
    1e12:	20 e0       	ldi	r18, 0x00	; 0
    1e14:	3f ef       	ldi	r19, 0xFF	; 255
    1e16:	4f e7       	ldi	r20, 0x7F	; 127
    1e18:	57 e4       	ldi	r21, 0x47	; 71
    1e1a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e1e:	18 16       	cp	r1, r24
    1e20:	64 f5       	brge	.+88     	; 0x1e7a <LCD_displayCharachter+0x27a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e22:	fe 01       	movw	r30, r28
    1e24:	ed 5b       	subi	r30, 0xBD	; 189
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	60 81       	ld	r22, Z
    1e2a:	71 81       	ldd	r23, Z+1	; 0x01
    1e2c:	82 81       	ldd	r24, Z+2	; 0x02
    1e2e:	93 81       	ldd	r25, Z+3	; 0x03
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e2       	ldi	r20, 0x20	; 32
    1e36:	51 e4       	ldi	r21, 0x41	; 65
    1e38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	bc 01       	movw	r22, r24
    1e42:	cd 01       	movw	r24, r26
    1e44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	9e af       	std	Y+62, r25	; 0x3e
    1e4e:	8d af       	std	Y+61, r24	; 0x3d
    1e50:	0f c0       	rjmp	.+30     	; 0x1e70 <LCD_displayCharachter+0x270>
    1e52:	80 e9       	ldi	r24, 0x90	; 144
    1e54:	91 e0       	ldi	r25, 0x01	; 1
    1e56:	9c af       	std	Y+60, r25	; 0x3c
    1e58:	8b af       	std	Y+59, r24	; 0x3b
    1e5a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e5c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <LCD_displayCharachter+0x25e>
    1e62:	9c af       	std	Y+60, r25	; 0x3c
    1e64:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e66:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e68:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	9e af       	std	Y+62, r25	; 0x3e
    1e6e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e70:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e72:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e74:	00 97       	sbiw	r24, 0x00	; 0
    1e76:	69 f7       	brne	.-38     	; 0x1e52 <LCD_displayCharachter+0x252>
    1e78:	16 c0       	rjmp	.+44     	; 0x1ea6 <LCD_displayCharachter+0x2a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	ff 96       	adiw	r30, 0x3f	; 63
    1e7e:	60 81       	ld	r22, Z
    1e80:	71 81       	ldd	r23, Z+1	; 0x01
    1e82:	82 81       	ldd	r24, Z+2	; 0x02
    1e84:	93 81       	ldd	r25, Z+3	; 0x03
    1e86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	9e af       	std	Y+62, r25	; 0x3e
    1e90:	8d af       	std	Y+61, r24	; 0x3d
    1e92:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e94:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e96:	9a af       	std	Y+58, r25	; 0x3a
    1e98:	89 af       	std	Y+57, r24	; 0x39
    1e9a:	89 ad       	ldd	r24, Y+57	; 0x39
    1e9c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	f1 f7       	brne	.-4      	; 0x1e9e <LCD_displayCharachter+0x29e>
    1ea2:	9a af       	std	Y+58, r25	; 0x3a
    1ea4:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1);
#if(LCD_8BITSMODE==1)
		GPIO_writePort(LCD_DATA_PORTID,a_char);
#elif(LCD_4BITSMODE ==1 )
		GPIO_writePin(LCD_DATA_PORTID,LCD_PIN0ID,GET_BIT(a_char,4));
    1ea6:	fe 01       	movw	r30, r28
    1ea8:	eb 5a       	subi	r30, 0xAB	; 171
    1eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1eac:	80 81       	ld	r24, Z
    1eae:	88 2f       	mov	r24, r24
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	80 71       	andi	r24, 0x10	; 16
    1eb4:	90 70       	andi	r25, 0x00	; 0
    1eb6:	95 95       	asr	r25
    1eb8:	87 95       	ror	r24
    1eba:	95 95       	asr	r25
    1ebc:	87 95       	ror	r24
    1ebe:	95 95       	asr	r25
    1ec0:	87 95       	ror	r24
    1ec2:	95 95       	asr	r25
    1ec4:	87 95       	ror	r24
    1ec6:	98 2f       	mov	r25, r24
    1ec8:	82 e0       	ldi	r24, 0x02	; 2
    1eca:	60 e0       	ldi	r22, 0x00	; 0
    1ecc:	49 2f       	mov	r20, r25
    1ece:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORTID,LCD_PIN1ID,GET_BIT(a_char,5));
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	eb 5a       	subi	r30, 0xAB	; 171
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	80 81       	ld	r24, Z
    1eda:	88 2f       	mov	r24, r24
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	80 72       	andi	r24, 0x20	; 32
    1ee0:	90 70       	andi	r25, 0x00	; 0
    1ee2:	95 95       	asr	r25
    1ee4:	87 95       	ror	r24
    1ee6:	95 95       	asr	r25
    1ee8:	87 95       	ror	r24
    1eea:	95 95       	asr	r25
    1eec:	87 95       	ror	r24
    1eee:	95 95       	asr	r25
    1ef0:	87 95       	ror	r24
    1ef2:	95 95       	asr	r25
    1ef4:	87 95       	ror	r24
    1ef6:	98 2f       	mov	r25, r24
    1ef8:	82 e0       	ldi	r24, 0x02	; 2
    1efa:	61 e0       	ldi	r22, 0x01	; 1
    1efc:	49 2f       	mov	r20, r25
    1efe:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORTID,LCD_PIN2ID,GET_BIT(a_char,6));
    1f02:	fe 01       	movw	r30, r28
    1f04:	eb 5a       	subi	r30, 0xAB	; 171
    1f06:	ff 4f       	sbci	r31, 0xFF	; 255
    1f08:	80 81       	ld	r24, Z
    1f0a:	88 2f       	mov	r24, r24
    1f0c:	90 e0       	ldi	r25, 0x00	; 0
    1f0e:	80 74       	andi	r24, 0x40	; 64
    1f10:	90 70       	andi	r25, 0x00	; 0
    1f12:	08 2e       	mov	r0, r24
    1f14:	89 2f       	mov	r24, r25
    1f16:	00 0c       	add	r0, r0
    1f18:	88 1f       	adc	r24, r24
    1f1a:	99 0b       	sbc	r25, r25
    1f1c:	00 0c       	add	r0, r0
    1f1e:	88 1f       	adc	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	98 2f       	mov	r25, r24
    1f24:	82 e0       	ldi	r24, 0x02	; 2
    1f26:	62 e0       	ldi	r22, 0x02	; 2
    1f28:	49 2f       	mov	r20, r25
    1f2a:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORTID,LCD_PIN3ID,GET_BIT(a_char,7));
    1f2e:	fe 01       	movw	r30, r28
    1f30:	eb 5a       	subi	r30, 0xAB	; 171
    1f32:	ff 4f       	sbci	r31, 0xFF	; 255
    1f34:	80 81       	ld	r24, Z
    1f36:	98 2f       	mov	r25, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	99 27       	eor	r25, r25
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	82 e0       	ldi	r24, 0x02	; 2
    1f40:	63 e0       	ldi	r22, 0x03	; 3
    1f42:	49 2f       	mov	r20, r25
    1f44:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	90 e0       	ldi	r25, 0x00	; 0
    1f4c:	a0 e8       	ldi	r26, 0x80	; 128
    1f4e:	bf e3       	ldi	r27, 0x3F	; 63
    1f50:	8d ab       	std	Y+53, r24	; 0x35
    1f52:	9e ab       	std	Y+54, r25	; 0x36
    1f54:	af ab       	std	Y+55, r26	; 0x37
    1f56:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f58:	6d a9       	ldd	r22, Y+53	; 0x35
    1f5a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f5c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f5e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	4a e7       	ldi	r20, 0x7A	; 122
    1f66:	55 e4       	ldi	r21, 0x45	; 69
    1f68:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	89 ab       	std	Y+49, r24	; 0x31
    1f72:	9a ab       	std	Y+50, r25	; 0x32
    1f74:	ab ab       	std	Y+51, r26	; 0x33
    1f76:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f78:	69 a9       	ldd	r22, Y+49	; 0x31
    1f7a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f7c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f7e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	40 e8       	ldi	r20, 0x80	; 128
    1f86:	5f e3       	ldi	r21, 0x3F	; 63
    1f88:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f8c:	88 23       	and	r24, r24
    1f8e:	2c f4       	brge	.+10     	; 0x1f9a <LCD_displayCharachter+0x39a>
		__ticks = 1;
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	98 ab       	std	Y+48, r25	; 0x30
    1f96:	8f a7       	std	Y+47, r24	; 0x2f
    1f98:	3f c0       	rjmp	.+126    	; 0x2018 <LCD_displayCharachter+0x418>
	else if (__tmp > 65535)
    1f9a:	69 a9       	ldd	r22, Y+49	; 0x31
    1f9c:	7a a9       	ldd	r23, Y+50	; 0x32
    1f9e:	8b a9       	ldd	r24, Y+51	; 0x33
    1fa0:	9c a9       	ldd	r25, Y+52	; 0x34
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	3f ef       	ldi	r19, 0xFF	; 255
    1fa6:	4f e7       	ldi	r20, 0x7F	; 127
    1fa8:	57 e4       	ldi	r21, 0x47	; 71
    1faa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fae:	18 16       	cp	r1, r24
    1fb0:	4c f5       	brge	.+82     	; 0x2004 <LCD_displayCharachter+0x404>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb2:	6d a9       	ldd	r22, Y+53	; 0x35
    1fb4:	7e a9       	ldd	r23, Y+54	; 0x36
    1fb6:	8f a9       	ldd	r24, Y+55	; 0x37
    1fb8:	98 ad       	ldd	r25, Y+56	; 0x38
    1fba:	20 e0       	ldi	r18, 0x00	; 0
    1fbc:	30 e0       	ldi	r19, 0x00	; 0
    1fbe:	40 e2       	ldi	r20, 0x20	; 32
    1fc0:	51 e4       	ldi	r21, 0x41	; 65
    1fc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fc6:	dc 01       	movw	r26, r24
    1fc8:	cb 01       	movw	r24, r22
    1fca:	bc 01       	movw	r22, r24
    1fcc:	cd 01       	movw	r24, r26
    1fce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	98 ab       	std	Y+48, r25	; 0x30
    1fd8:	8f a7       	std	Y+47, r24	; 0x2f
    1fda:	0f c0       	rjmp	.+30     	; 0x1ffa <LCD_displayCharachter+0x3fa>
    1fdc:	80 e9       	ldi	r24, 0x90	; 144
    1fde:	91 e0       	ldi	r25, 0x01	; 1
    1fe0:	9e a7       	std	Y+46, r25	; 0x2e
    1fe2:	8d a7       	std	Y+45, r24	; 0x2d
    1fe4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fe6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fe8:	01 97       	sbiw	r24, 0x01	; 1
    1fea:	f1 f7       	brne	.-4      	; 0x1fe8 <LCD_displayCharachter+0x3e8>
    1fec:	9e a7       	std	Y+46, r25	; 0x2e
    1fee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ff2:	98 a9       	ldd	r25, Y+48	; 0x30
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	98 ab       	std	Y+48, r25	; 0x30
    1ff8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffa:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ffc:	98 a9       	ldd	r25, Y+48	; 0x30
    1ffe:	00 97       	sbiw	r24, 0x00	; 0
    2000:	69 f7       	brne	.-38     	; 0x1fdc <LCD_displayCharachter+0x3dc>
    2002:	14 c0       	rjmp	.+40     	; 0x202c <LCD_displayCharachter+0x42c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2004:	69 a9       	ldd	r22, Y+49	; 0x31
    2006:	7a a9       	ldd	r23, Y+50	; 0x32
    2008:	8b a9       	ldd	r24, Y+51	; 0x33
    200a:	9c a9       	ldd	r25, Y+52	; 0x34
    200c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	98 ab       	std	Y+48, r25	; 0x30
    2016:	8f a7       	std	Y+47, r24	; 0x2f
    2018:	8f a5       	ldd	r24, Y+47	; 0x2f
    201a:	98 a9       	ldd	r25, Y+48	; 0x30
    201c:	9c a7       	std	Y+44, r25	; 0x2c
    201e:	8b a7       	std	Y+43, r24	; 0x2b
    2020:	8b a5       	ldd	r24, Y+43	; 0x2b
    2022:	9c a5       	ldd	r25, Y+44	; 0x2c
    2024:	01 97       	sbiw	r24, 0x01	; 1
    2026:	f1 f7       	brne	.-4      	; 0x2024 <LCD_displayCharachter+0x424>
    2028:	9c a7       	std	Y+44, r25	; 0x2c
    202a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		GPIO_writePin(LCD_EN_PORTID,LCD_EN_PINID,LOGIC_LOW);
    202c:	83 e0       	ldi	r24, 0x03	; 3
    202e:	63 e0       	ldi	r22, 0x03	; 3
    2030:	40 e0       	ldi	r20, 0x00	; 0
    2032:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	a0 e8       	ldi	r26, 0x80	; 128
    203c:	bf e3       	ldi	r27, 0x3F	; 63
    203e:	8f a3       	std	Y+39, r24	; 0x27
    2040:	98 a7       	std	Y+40, r25	; 0x28
    2042:	a9 a7       	std	Y+41, r26	; 0x29
    2044:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2046:	6f a1       	ldd	r22, Y+39	; 0x27
    2048:	78 a5       	ldd	r23, Y+40	; 0x28
    204a:	89 a5       	ldd	r24, Y+41	; 0x29
    204c:	9a a5       	ldd	r25, Y+42	; 0x2a
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	4a e7       	ldi	r20, 0x7A	; 122
    2054:	55 e4       	ldi	r21, 0x45	; 69
    2056:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	8b a3       	std	Y+35, r24	; 0x23
    2060:	9c a3       	std	Y+36, r25	; 0x24
    2062:	ad a3       	std	Y+37, r26	; 0x25
    2064:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2066:	6b a1       	ldd	r22, Y+35	; 0x23
    2068:	7c a1       	ldd	r23, Y+36	; 0x24
    206a:	8d a1       	ldd	r24, Y+37	; 0x25
    206c:	9e a1       	ldd	r25, Y+38	; 0x26
    206e:	20 e0       	ldi	r18, 0x00	; 0
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	40 e8       	ldi	r20, 0x80	; 128
    2074:	5f e3       	ldi	r21, 0x3F	; 63
    2076:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    207a:	88 23       	and	r24, r24
    207c:	2c f4       	brge	.+10     	; 0x2088 <LCD_displayCharachter+0x488>
		__ticks = 1;
    207e:	81 e0       	ldi	r24, 0x01	; 1
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	9a a3       	std	Y+34, r25	; 0x22
    2084:	89 a3       	std	Y+33, r24	; 0x21
    2086:	3f c0       	rjmp	.+126    	; 0x2106 <LCD_displayCharachter+0x506>
	else if (__tmp > 65535)
    2088:	6b a1       	ldd	r22, Y+35	; 0x23
    208a:	7c a1       	ldd	r23, Y+36	; 0x24
    208c:	8d a1       	ldd	r24, Y+37	; 0x25
    208e:	9e a1       	ldd	r25, Y+38	; 0x26
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	3f ef       	ldi	r19, 0xFF	; 255
    2094:	4f e7       	ldi	r20, 0x7F	; 127
    2096:	57 e4       	ldi	r21, 0x47	; 71
    2098:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    209c:	18 16       	cp	r1, r24
    209e:	4c f5       	brge	.+82     	; 0x20f2 <LCD_displayCharachter+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a0:	6f a1       	ldd	r22, Y+39	; 0x27
    20a2:	78 a5       	ldd	r23, Y+40	; 0x28
    20a4:	89 a5       	ldd	r24, Y+41	; 0x29
    20a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	40 e2       	ldi	r20, 0x20	; 32
    20ae:	51 e4       	ldi	r21, 0x41	; 65
    20b0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	bc 01       	movw	r22, r24
    20ba:	cd 01       	movw	r24, r26
    20bc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20c0:	dc 01       	movw	r26, r24
    20c2:	cb 01       	movw	r24, r22
    20c4:	9a a3       	std	Y+34, r25	; 0x22
    20c6:	89 a3       	std	Y+33, r24	; 0x21
    20c8:	0f c0       	rjmp	.+30     	; 0x20e8 <LCD_displayCharachter+0x4e8>
    20ca:	80 e9       	ldi	r24, 0x90	; 144
    20cc:	91 e0       	ldi	r25, 0x01	; 1
    20ce:	98 a3       	std	Y+32, r25	; 0x20
    20d0:	8f 8f       	std	Y+31, r24	; 0x1f
    20d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20d4:	98 a1       	ldd	r25, Y+32	; 0x20
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	f1 f7       	brne	.-4      	; 0x20d6 <LCD_displayCharachter+0x4d6>
    20da:	98 a3       	std	Y+32, r25	; 0x20
    20dc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20de:	89 a1       	ldd	r24, Y+33	; 0x21
    20e0:	9a a1       	ldd	r25, Y+34	; 0x22
    20e2:	01 97       	sbiw	r24, 0x01	; 1
    20e4:	9a a3       	std	Y+34, r25	; 0x22
    20e6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e8:	89 a1       	ldd	r24, Y+33	; 0x21
    20ea:	9a a1       	ldd	r25, Y+34	; 0x22
    20ec:	00 97       	sbiw	r24, 0x00	; 0
    20ee:	69 f7       	brne	.-38     	; 0x20ca <LCD_displayCharachter+0x4ca>
    20f0:	14 c0       	rjmp	.+40     	; 0x211a <LCD_displayCharachter+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f2:	6b a1       	ldd	r22, Y+35	; 0x23
    20f4:	7c a1       	ldd	r23, Y+36	; 0x24
    20f6:	8d a1       	ldd	r24, Y+37	; 0x25
    20f8:	9e a1       	ldd	r25, Y+38	; 0x26
    20fa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	9a a3       	std	Y+34, r25	; 0x22
    2104:	89 a3       	std	Y+33, r24	; 0x21
    2106:	89 a1       	ldd	r24, Y+33	; 0x21
    2108:	9a a1       	ldd	r25, Y+34	; 0x22
    210a:	9e 8f       	std	Y+30, r25	; 0x1e
    210c:	8d 8f       	std	Y+29, r24	; 0x1d
    210e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2110:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	f1 f7       	brne	.-4      	; 0x2112 <LCD_displayCharachter+0x512>
    2116:	9e 8f       	std	Y+30, r25	; 0x1e
    2118:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		GPIO_writePin(LCD_EN_PORTID,LCD_EN_PINID,LOGIC_HIGH);
    211a:	83 e0       	ldi	r24, 0x03	; 3
    211c:	63 e0       	ldi	r22, 0x03	; 3
    211e:	41 e0       	ldi	r20, 0x01	; 1
    2120:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>

		GPIO_writePin(LCD_DATA_PORTID,LCD_PIN0ID,GET_BIT(a_char,0));
    2124:	fe 01       	movw	r30, r28
    2126:	eb 5a       	subi	r30, 0xAB	; 171
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	80 81       	ld	r24, Z
    212c:	98 2f       	mov	r25, r24
    212e:	91 70       	andi	r25, 0x01	; 1
    2130:	82 e0       	ldi	r24, 0x02	; 2
    2132:	60 e0       	ldi	r22, 0x00	; 0
    2134:	49 2f       	mov	r20, r25
    2136:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORTID,LCD_PIN1ID,GET_BIT(a_char,1));
    213a:	fe 01       	movw	r30, r28
    213c:	eb 5a       	subi	r30, 0xAB	; 171
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	80 81       	ld	r24, Z
    2142:	88 2f       	mov	r24, r24
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	82 70       	andi	r24, 0x02	; 2
    2148:	90 70       	andi	r25, 0x00	; 0
    214a:	95 95       	asr	r25
    214c:	87 95       	ror	r24
    214e:	98 2f       	mov	r25, r24
    2150:	82 e0       	ldi	r24, 0x02	; 2
    2152:	61 e0       	ldi	r22, 0x01	; 1
    2154:	49 2f       	mov	r20, r25
    2156:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORTID,LCD_PIN2ID,GET_BIT(a_char,2));
    215a:	fe 01       	movw	r30, r28
    215c:	eb 5a       	subi	r30, 0xAB	; 171
    215e:	ff 4f       	sbci	r31, 0xFF	; 255
    2160:	80 81       	ld	r24, Z
    2162:	88 2f       	mov	r24, r24
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	84 70       	andi	r24, 0x04	; 4
    2168:	90 70       	andi	r25, 0x00	; 0
    216a:	95 95       	asr	r25
    216c:	87 95       	ror	r24
    216e:	95 95       	asr	r25
    2170:	87 95       	ror	r24
    2172:	98 2f       	mov	r25, r24
    2174:	82 e0       	ldi	r24, 0x02	; 2
    2176:	62 e0       	ldi	r22, 0x02	; 2
    2178:	49 2f       	mov	r20, r25
    217a:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
		GPIO_writePin(LCD_DATA_PORTID,LCD_PIN3ID,GET_BIT(a_char,3));
    217e:	fe 01       	movw	r30, r28
    2180:	eb 5a       	subi	r30, 0xAB	; 171
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	80 81       	ld	r24, Z
    2186:	88 2f       	mov	r24, r24
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	88 70       	andi	r24, 0x08	; 8
    218c:	90 70       	andi	r25, 0x00	; 0
    218e:	95 95       	asr	r25
    2190:	87 95       	ror	r24
    2192:	95 95       	asr	r25
    2194:	87 95       	ror	r24
    2196:	95 95       	asr	r25
    2198:	87 95       	ror	r24
    219a:	98 2f       	mov	r25, r24
    219c:	82 e0       	ldi	r24, 0x02	; 2
    219e:	63 e0       	ldi	r22, 0x03	; 3
    21a0:	49 2f       	mov	r20, r25
    21a2:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	a0 e8       	ldi	r26, 0x80	; 128
    21ac:	bf e3       	ldi	r27, 0x3F	; 63
    21ae:	89 8f       	std	Y+25, r24	; 0x19
    21b0:	9a 8f       	std	Y+26, r25	; 0x1a
    21b2:	ab 8f       	std	Y+27, r26	; 0x1b
    21b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b6:	69 8d       	ldd	r22, Y+25	; 0x19
    21b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	4a e7       	ldi	r20, 0x7A	; 122
    21c4:	55 e4       	ldi	r21, 0x45	; 69
    21c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	8d 8b       	std	Y+21, r24	; 0x15
    21d0:	9e 8b       	std	Y+22, r25	; 0x16
    21d2:	af 8b       	std	Y+23, r26	; 0x17
    21d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21d6:	6d 89       	ldd	r22, Y+21	; 0x15
    21d8:	7e 89       	ldd	r23, Y+22	; 0x16
    21da:	8f 89       	ldd	r24, Y+23	; 0x17
    21dc:	98 8d       	ldd	r25, Y+24	; 0x18
    21de:	20 e0       	ldi	r18, 0x00	; 0
    21e0:	30 e0       	ldi	r19, 0x00	; 0
    21e2:	40 e8       	ldi	r20, 0x80	; 128
    21e4:	5f e3       	ldi	r21, 0x3F	; 63
    21e6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21ea:	88 23       	and	r24, r24
    21ec:	2c f4       	brge	.+10     	; 0x21f8 <LCD_displayCharachter+0x5f8>
		__ticks = 1;
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	9c 8b       	std	Y+20, r25	; 0x14
    21f4:	8b 8b       	std	Y+19, r24	; 0x13
    21f6:	3f c0       	rjmp	.+126    	; 0x2276 <LCD_displayCharachter+0x676>
	else if (__tmp > 65535)
    21f8:	6d 89       	ldd	r22, Y+21	; 0x15
    21fa:	7e 89       	ldd	r23, Y+22	; 0x16
    21fc:	8f 89       	ldd	r24, Y+23	; 0x17
    21fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	3f ef       	ldi	r19, 0xFF	; 255
    2204:	4f e7       	ldi	r20, 0x7F	; 127
    2206:	57 e4       	ldi	r21, 0x47	; 71
    2208:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    220c:	18 16       	cp	r1, r24
    220e:	4c f5       	brge	.+82     	; 0x2262 <LCD_displayCharachter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2210:	69 8d       	ldd	r22, Y+25	; 0x19
    2212:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2214:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2216:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	40 e2       	ldi	r20, 0x20	; 32
    221e:	51 e4       	ldi	r21, 0x41	; 65
    2220:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	bc 01       	movw	r22, r24
    222a:	cd 01       	movw	r24, r26
    222c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	9c 8b       	std	Y+20, r25	; 0x14
    2236:	8b 8b       	std	Y+19, r24	; 0x13
    2238:	0f c0       	rjmp	.+30     	; 0x2258 <LCD_displayCharachter+0x658>
    223a:	80 e9       	ldi	r24, 0x90	; 144
    223c:	91 e0       	ldi	r25, 0x01	; 1
    223e:	9a 8b       	std	Y+18, r25	; 0x12
    2240:	89 8b       	std	Y+17, r24	; 0x11
    2242:	89 89       	ldd	r24, Y+17	; 0x11
    2244:	9a 89       	ldd	r25, Y+18	; 0x12
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	f1 f7       	brne	.-4      	; 0x2246 <LCD_displayCharachter+0x646>
    224a:	9a 8b       	std	Y+18, r25	; 0x12
    224c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    224e:	8b 89       	ldd	r24, Y+19	; 0x13
    2250:	9c 89       	ldd	r25, Y+20	; 0x14
    2252:	01 97       	sbiw	r24, 0x01	; 1
    2254:	9c 8b       	std	Y+20, r25	; 0x14
    2256:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2258:	8b 89       	ldd	r24, Y+19	; 0x13
    225a:	9c 89       	ldd	r25, Y+20	; 0x14
    225c:	00 97       	sbiw	r24, 0x00	; 0
    225e:	69 f7       	brne	.-38     	; 0x223a <LCD_displayCharachter+0x63a>
    2260:	14 c0       	rjmp	.+40     	; 0x228a <LCD_displayCharachter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2262:	6d 89       	ldd	r22, Y+21	; 0x15
    2264:	7e 89       	ldd	r23, Y+22	; 0x16
    2266:	8f 89       	ldd	r24, Y+23	; 0x17
    2268:	98 8d       	ldd	r25, Y+24	; 0x18
    226a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	9c 8b       	std	Y+20, r25	; 0x14
    2274:	8b 8b       	std	Y+19, r24	; 0x13
    2276:	8b 89       	ldd	r24, Y+19	; 0x13
    2278:	9c 89       	ldd	r25, Y+20	; 0x14
    227a:	98 8b       	std	Y+16, r25	; 0x10
    227c:	8f 87       	std	Y+15, r24	; 0x0f
    227e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2280:	98 89       	ldd	r25, Y+16	; 0x10
    2282:	01 97       	sbiw	r24, 0x01	; 1
    2284:	f1 f7       	brne	.-4      	; 0x2282 <LCD_displayCharachter+0x682>
    2286:	98 8b       	std	Y+16, r25	; 0x10
    2288:	8f 87       	std	Y+15, r24	; 0x0f
#endif
			_delay_ms(1);
			GPIO_writePin(LCD_EN_PORTID,LCD_EN_PINID,LOGIC_LOW);
    228a:	83 e0       	ldi	r24, 0x03	; 3
    228c:	63 e0       	ldi	r22, 0x03	; 3
    228e:	40 e0       	ldi	r20, 0x00	; 0
    2290:	0e 94 95 06 	call	0xd2a	; 0xd2a <GPIO_writePin>
    2294:	80 e0       	ldi	r24, 0x00	; 0
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	a0 e8       	ldi	r26, 0x80	; 128
    229a:	bf e3       	ldi	r27, 0x3F	; 63
    229c:	8b 87       	std	Y+11, r24	; 0x0b
    229e:	9c 87       	std	Y+12, r25	; 0x0c
    22a0:	ad 87       	std	Y+13, r26	; 0x0d
    22a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	4a e7       	ldi	r20, 0x7A	; 122
    22b2:	55 e4       	ldi	r21, 0x45	; 69
    22b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22b8:	dc 01       	movw	r26, r24
    22ba:	cb 01       	movw	r24, r22
    22bc:	8f 83       	std	Y+7, r24	; 0x07
    22be:	98 87       	std	Y+8, r25	; 0x08
    22c0:	a9 87       	std	Y+9, r26	; 0x09
    22c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22c4:	6f 81       	ldd	r22, Y+7	; 0x07
    22c6:	78 85       	ldd	r23, Y+8	; 0x08
    22c8:	89 85       	ldd	r24, Y+9	; 0x09
    22ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	40 e8       	ldi	r20, 0x80	; 128
    22d2:	5f e3       	ldi	r21, 0x3F	; 63
    22d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22d8:	88 23       	and	r24, r24
    22da:	2c f4       	brge	.+10     	; 0x22e6 <LCD_displayCharachter+0x6e6>
		__ticks = 1;
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	9e 83       	std	Y+6, r25	; 0x06
    22e2:	8d 83       	std	Y+5, r24	; 0x05
    22e4:	3f c0       	rjmp	.+126    	; 0x2364 <LCD_displayCharachter+0x764>
	else if (__tmp > 65535)
    22e6:	6f 81       	ldd	r22, Y+7	; 0x07
    22e8:	78 85       	ldd	r23, Y+8	; 0x08
    22ea:	89 85       	ldd	r24, Y+9	; 0x09
    22ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	3f ef       	ldi	r19, 0xFF	; 255
    22f2:	4f e7       	ldi	r20, 0x7F	; 127
    22f4:	57 e4       	ldi	r21, 0x47	; 71
    22f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22fa:	18 16       	cp	r1, r24
    22fc:	4c f5       	brge	.+82     	; 0x2350 <LCD_displayCharachter+0x750>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2300:	7c 85       	ldd	r23, Y+12	; 0x0c
    2302:	8d 85       	ldd	r24, Y+13	; 0x0d
    2304:	9e 85       	ldd	r25, Y+14	; 0x0e
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	40 e2       	ldi	r20, 0x20	; 32
    230c:	51 e4       	ldi	r21, 0x41	; 65
    230e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	bc 01       	movw	r22, r24
    2318:	cd 01       	movw	r24, r26
    231a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	9e 83       	std	Y+6, r25	; 0x06
    2324:	8d 83       	std	Y+5, r24	; 0x05
    2326:	0f c0       	rjmp	.+30     	; 0x2346 <LCD_displayCharachter+0x746>
    2328:	80 e9       	ldi	r24, 0x90	; 144
    232a:	91 e0       	ldi	r25, 0x01	; 1
    232c:	9c 83       	std	Y+4, r25	; 0x04
    232e:	8b 83       	std	Y+3, r24	; 0x03
    2330:	8b 81       	ldd	r24, Y+3	; 0x03
    2332:	9c 81       	ldd	r25, Y+4	; 0x04
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	f1 f7       	brne	.-4      	; 0x2334 <LCD_displayCharachter+0x734>
    2338:	9c 83       	std	Y+4, r25	; 0x04
    233a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    233c:	8d 81       	ldd	r24, Y+5	; 0x05
    233e:	9e 81       	ldd	r25, Y+6	; 0x06
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	9e 83       	std	Y+6, r25	; 0x06
    2344:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2346:	8d 81       	ldd	r24, Y+5	; 0x05
    2348:	9e 81       	ldd	r25, Y+6	; 0x06
    234a:	00 97       	sbiw	r24, 0x00	; 0
    234c:	69 f7       	brne	.-38     	; 0x2328 <LCD_displayCharachter+0x728>
    234e:	14 c0       	rjmp	.+40     	; 0x2378 <LCD_displayCharachter+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2350:	6f 81       	ldd	r22, Y+7	; 0x07
    2352:	78 85       	ldd	r23, Y+8	; 0x08
    2354:	89 85       	ldd	r24, Y+9	; 0x09
    2356:	9a 85       	ldd	r25, Y+10	; 0x0a
    2358:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	9e 83       	std	Y+6, r25	; 0x06
    2362:	8d 83       	std	Y+5, r24	; 0x05
    2364:	8d 81       	ldd	r24, Y+5	; 0x05
    2366:	9e 81       	ldd	r25, Y+6	; 0x06
    2368:	9a 83       	std	Y+2, r25	; 0x02
    236a:	89 83       	std	Y+1, r24	; 0x01
    236c:	89 81       	ldd	r24, Y+1	; 0x01
    236e:	9a 81       	ldd	r25, Y+2	; 0x02
    2370:	01 97       	sbiw	r24, 0x01	; 1
    2372:	f1 f7       	brne	.-4      	; 0x2370 <LCD_displayCharachter+0x770>
    2374:	9a 83       	std	Y+2, r25	; 0x02
    2376:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1);
}
    2378:	cb 5a       	subi	r28, 0xAB	; 171
    237a:	df 4f       	sbci	r29, 0xFF	; 255
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
    2386:	cf 91       	pop	r28
    2388:	df 91       	pop	r29
    238a:	1f 91       	pop	r17
    238c:	0f 91       	pop	r16
    238e:	08 95       	ret

00002390 <LCD_displayString>:

void LCD_displayString(uint8 * a_char)
{
    2390:	df 93       	push	r29
    2392:	cf 93       	push	r28
    2394:	00 d0       	rcall	.+0      	; 0x2396 <LCD_displayString+0x6>
    2396:	00 d0       	rcall	.+0      	; 0x2398 <LCD_displayString+0x8>
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
    239c:	9c 83       	std	Y+4, r25	; 0x04
    239e:	8b 83       	std	Y+3, r24	; 0x03
	uint8*a_charPTR=a_char;
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	9c 81       	ldd	r25, Y+4	; 0x04
    23a4:	9a 83       	std	Y+2, r25	; 0x02
    23a6:	89 83       	std	Y+1, r24	; 0x01
    23a8:	0a c0       	rjmp	.+20     	; 0x23be <LCD_displayString+0x2e>

		while( *(a_charPTR)!= '\0')
		{

			LCD_displayCharachter(*a_charPTR);
    23aa:	e9 81       	ldd	r30, Y+1	; 0x01
    23ac:	fa 81       	ldd	r31, Y+2	; 0x02
    23ae:	80 81       	ld	r24, Z
    23b0:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <LCD_displayCharachter>
			a_charPTR++;
    23b4:	89 81       	ldd	r24, Y+1	; 0x01
    23b6:	9a 81       	ldd	r25, Y+2	; 0x02
    23b8:	01 96       	adiw	r24, 0x01	; 1
    23ba:	9a 83       	std	Y+2, r25	; 0x02
    23bc:	89 83       	std	Y+1, r24	; 0x01

void LCD_displayString(uint8 * a_char)
{
	uint8*a_charPTR=a_char;

		while( *(a_charPTR)!= '\0')
    23be:	e9 81       	ldd	r30, Y+1	; 0x01
    23c0:	fa 81       	ldd	r31, Y+2	; 0x02
    23c2:	80 81       	ld	r24, Z
    23c4:	88 23       	and	r24, r24
    23c6:	89 f7       	brne	.-30     	; 0x23aa <LCD_displayString+0x1a>
		{

			LCD_displayCharachter(*a_charPTR);
			a_charPTR++;
		}
}
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	cf 91       	pop	r28
    23d2:	df 91       	pop	r29
    23d4:	08 95       	ret

000023d6 <LCD_moveCursor>:

void LCD_moveCursor(uint8 a_row,uint8 a_col)
{
    23d6:	df 93       	push	r29
    23d8:	cf 93       	push	r28
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
    23de:	2f 97       	sbiw	r28, 0x0f	; 15
    23e0:	0f b6       	in	r0, 0x3f	; 63
    23e2:	f8 94       	cli
    23e4:	de bf       	out	0x3e, r29	; 62
    23e6:	0f be       	out	0x3f, r0	; 63
    23e8:	cd bf       	out	0x3d, r28	; 61
    23ea:	8a 83       	std	Y+2, r24	; 0x02
    23ec:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_command=0;
    23ee:	19 82       	std	Y+1, r1	; 0x01
if((a_row>MAXROWPOS)|(a_row<MINROWPOS) | (a_col>MAXCOLPOS)|(a_col<MINCOLPOS) )
    23f0:	1f 86       	std	Y+15, r1	; 0x0f
    23f2:	8a 81       	ldd	r24, Y+2	; 0x02
    23f4:	85 30       	cpi	r24, 0x05	; 5
    23f6:	10 f0       	brcs	.+4      	; 0x23fc <LCD_moveCursor+0x26>
    23f8:	21 e0       	ldi	r18, 0x01	; 1
    23fa:	2f 87       	std	Y+15, r18	; 0x0f
    23fc:	1e 86       	std	Y+14, r1	; 0x0e
    23fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2400:	88 23       	and	r24, r24
    2402:	11 f4       	brne	.+4      	; 0x2408 <LCD_moveCursor+0x32>
    2404:	31 e0       	ldi	r19, 0x01	; 1
    2406:	3e 87       	std	Y+14, r19	; 0x0e
    2408:	8f 85       	ldd	r24, Y+15	; 0x0f
    240a:	9e 85       	ldd	r25, Y+14	; 0x0e
    240c:	89 2b       	or	r24, r25
    240e:	28 2f       	mov	r18, r24
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	3d 87       	std	Y+13, r19	; 0x0d
    2414:	2c 87       	std	Y+12, r18	; 0x0c
    2416:	1b 86       	std	Y+11, r1	; 0x0b
    2418:	1a 86       	std	Y+10, r1	; 0x0a
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	81 31       	cpi	r24, 0x11	; 17
    241e:	20 f0       	brcs	.+8      	; 0x2428 <LCD_moveCursor+0x52>
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	9b 87       	std	Y+11, r25	; 0x0b
    2426:	8a 87       	std	Y+10, r24	; 0x0a
    2428:	2c 85       	ldd	r18, Y+12	; 0x0c
    242a:	3d 85       	ldd	r19, Y+13	; 0x0d
    242c:	8a 85       	ldd	r24, Y+10	; 0x0a
    242e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2430:	28 2b       	or	r18, r24
    2432:	39 2b       	or	r19, r25
    2434:	39 87       	std	Y+9, r19	; 0x09
    2436:	28 87       	std	Y+8, r18	; 0x08
    2438:	1f 82       	std	Y+7, r1	; 0x07
    243a:	1e 82       	std	Y+6, r1	; 0x06
    243c:	8b 81       	ldd	r24, Y+3	; 0x03
    243e:	88 23       	and	r24, r24
    2440:	21 f4       	brne	.+8      	; 0x244a <LCD_moveCursor+0x74>
    2442:	21 e0       	ldi	r18, 0x01	; 1
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	3f 83       	std	Y+7, r19	; 0x07
    2448:	2e 83       	std	Y+6, r18	; 0x06
    244a:	88 85       	ldd	r24, Y+8	; 0x08
    244c:	99 85       	ldd	r25, Y+9	; 0x09
    244e:	2e 81       	ldd	r18, Y+6	; 0x06
    2450:	3f 81       	ldd	r19, Y+7	; 0x07
    2452:	82 2b       	or	r24, r18
    2454:	93 2b       	or	r25, r19
    2456:	00 97       	sbiw	r24, 0x00	; 0
    2458:	91 f5       	brne	.+100    	; 0x24be <LCD_moveCursor+0xe8>
{
	/* Do nothing*/
}
else
{
		switch (a_row)
    245a:	8a 81       	ldd	r24, Y+2	; 0x02
    245c:	28 2f       	mov	r18, r24
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	3d 83       	std	Y+5, r19	; 0x05
    2462:	2c 83       	std	Y+4, r18	; 0x04
    2464:	8c 81       	ldd	r24, Y+4	; 0x04
    2466:	9d 81       	ldd	r25, Y+5	; 0x05
    2468:	82 30       	cpi	r24, 0x02	; 2
    246a:	91 05       	cpc	r25, r1
    246c:	c1 f0       	breq	.+48     	; 0x249e <LCD_moveCursor+0xc8>
    246e:	2c 81       	ldd	r18, Y+4	; 0x04
    2470:	3d 81       	ldd	r19, Y+5	; 0x05
    2472:	23 30       	cpi	r18, 0x03	; 3
    2474:	31 05       	cpc	r19, r1
    2476:	34 f4       	brge	.+12     	; 0x2484 <LCD_moveCursor+0xae>
    2478:	8c 81       	ldd	r24, Y+4	; 0x04
    247a:	9d 81       	ldd	r25, Y+5	; 0x05
    247c:	81 30       	cpi	r24, 0x01	; 1
    247e:	91 05       	cpc	r25, r1
    2480:	61 f0       	breq	.+24     	; 0x249a <LCD_moveCursor+0xc4>
    2482:	15 c0       	rjmp	.+42     	; 0x24ae <LCD_moveCursor+0xd8>
    2484:	2c 81       	ldd	r18, Y+4	; 0x04
    2486:	3d 81       	ldd	r19, Y+5	; 0x05
    2488:	23 30       	cpi	r18, 0x03	; 3
    248a:	31 05       	cpc	r19, r1
    248c:	59 f0       	breq	.+22     	; 0x24a4 <LCD_moveCursor+0xce>
    248e:	8c 81       	ldd	r24, Y+4	; 0x04
    2490:	9d 81       	ldd	r25, Y+5	; 0x05
    2492:	84 30       	cpi	r24, 0x04	; 4
    2494:	91 05       	cpc	r25, r1
    2496:	49 f0       	breq	.+18     	; 0x24aa <LCD_moveCursor+0xd4>
    2498:	0a c0       	rjmp	.+20     	; 0x24ae <LCD_moveCursor+0xd8>
		{
		case 1 :
			a_command=FIRSTROWADD;
    249a:	19 82       	std	Y+1, r1	; 0x01
    249c:	08 c0       	rjmp	.+16     	; 0x24ae <LCD_moveCursor+0xd8>
			break;
		case 2 :
			a_command=SECROWADD;
    249e:	80 e4       	ldi	r24, 0x40	; 64
    24a0:	89 83       	std	Y+1, r24	; 0x01
    24a2:	05 c0       	rjmp	.+10     	; 0x24ae <LCD_moveCursor+0xd8>
			break;
		case 3:
			a_command=THIRDROWADD;
    24a4:	80 e1       	ldi	r24, 0x10	; 16
    24a6:	89 83       	std	Y+1, r24	; 0x01
    24a8:	02 c0       	rjmp	.+4      	; 0x24ae <LCD_moveCursor+0xd8>
			break;
		case 4 :
			a_command=FOURTHROWADD;
    24aa:	80 e5       	ldi	r24, 0x50	; 80
    24ac:	89 83       	std	Y+1, r24	; 0x01
			break;

		}

LCD_sendCommand((a_command | (a_col-1)|(LCD_SET_CURSOR_LOCATION)));
    24ae:	8b 81       	ldd	r24, Y+3	; 0x03
    24b0:	81 50       	subi	r24, 0x01	; 1
    24b2:	98 2f       	mov	r25, r24
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	89 2b       	or	r24, r25
    24b8:	80 68       	ori	r24, 0x80	; 128
    24ba:	0e 94 38 0a 	call	0x1470	; 0x1470 <LCD_sendCommand>

}
}
    24be:	2f 96       	adiw	r28, 0x0f	; 15
    24c0:	0f b6       	in	r0, 0x3f	; 63
    24c2:	f8 94       	cli
    24c4:	de bf       	out	0x3e, r29	; 62
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	cd bf       	out	0x3d, r28	; 61
    24ca:	cf 91       	pop	r28
    24cc:	df 91       	pop	r29
    24ce:	08 95       	ret

000024d0 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 a_row,uint8 a_column,uint8  * a_char)
{
    24d0:	df 93       	push	r29
    24d2:	cf 93       	push	r28
    24d4:	00 d0       	rcall	.+0      	; 0x24d6 <LCD_displayStringRowColumn+0x6>
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <LCD_displayStringRowColumn+0x8>
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	89 83       	std	Y+1, r24	; 0x01
    24de:	6a 83       	std	Y+2, r22	; 0x02
    24e0:	5c 83       	std	Y+4, r21	; 0x04
    24e2:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(a_row,a_column);
    24e4:	89 81       	ldd	r24, Y+1	; 0x01
    24e6:	6a 81       	ldd	r22, Y+2	; 0x02
    24e8:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <LCD_moveCursor>
	LCD_displayString(a_char);
    24ec:	8b 81       	ldd	r24, Y+3	; 0x03
    24ee:	9c 81       	ldd	r25, Y+4	; 0x04
    24f0:	0e 94 c8 11 	call	0x2390	; 0x2390 <LCD_displayString>
}
    24f4:	0f 90       	pop	r0
    24f6:	0f 90       	pop	r0
    24f8:	0f 90       	pop	r0
    24fa:	0f 90       	pop	r0
    24fc:	cf 91       	pop	r28
    24fe:	df 91       	pop	r29
    2500:	08 95       	ret

00002502 <LCD_clearScreen>:
void LCD_clearScreen()
{
    2502:	df 93       	push	r29
    2504:	cf 93       	push	r28
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62

	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    250a:	81 e0       	ldi	r24, 0x01	; 1
    250c:	0e 94 38 0a 	call	0x1470	; 0x1470 <LCD_sendCommand>

}
    2510:	cf 91       	pop	r28
    2512:	df 91       	pop	r29
    2514:	08 95       	ret

00002516 <LCD_intgerToString>:

void LCD_intgerToString(uint32 a_num)
{
    2516:	df 93       	push	r29
    2518:	cf 93       	push	r28
    251a:	cd b7       	in	r28, 0x3d	; 61
    251c:	de b7       	in	r29, 0x3e	; 62
    251e:	64 97       	sbiw	r28, 0x14	; 20
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	de bf       	out	0x3e, r29	; 62
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	cd bf       	out	0x3d, r28	; 61
    252a:	69 8b       	std	Y+17, r22	; 0x11
    252c:	7a 8b       	std	Y+18, r23	; 0x12
    252e:	8b 8b       	std	Y+19, r24	; 0x13
    2530:	9c 8b       	std	Y+20, r25	; 0x14
	uint8 buff[16];
	LCD_integerToString(buff,a_num);
    2532:	29 89       	ldd	r18, Y+17	; 0x11
    2534:	3a 89       	ldd	r19, Y+18	; 0x12
    2536:	4b 89       	ldd	r20, Y+19	; 0x13
    2538:	5c 89       	ldd	r21, Y+20	; 0x14
    253a:	ce 01       	movw	r24, r28
    253c:	01 96       	adiw	r24, 0x01	; 1
    253e:	ba 01       	movw	r22, r20
    2540:	a9 01       	movw	r20, r18
    2542:	0e 94 b0 12 	call	0x2560	; 0x2560 <LCD_integerToString>

	LCD_displayString(buff);
    2546:	ce 01       	movw	r24, r28
    2548:	01 96       	adiw	r24, 0x01	; 1
    254a:	0e 94 c8 11 	call	0x2390	; 0x2390 <LCD_displayString>

}
    254e:	64 96       	adiw	r28, 0x14	; 20
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	f8 94       	cli
    2554:	de bf       	out	0x3e, r29	; 62
    2556:	0f be       	out	0x3f, r0	; 63
    2558:	cd bf       	out	0x3d, r28	; 61
    255a:	cf 91       	pop	r28
    255c:	df 91       	pop	r29
    255e:	08 95       	ret

00002560 <LCD_integerToString>:

static void LCD_integerToString(uint8 *  string_Ptr,uint32 a_num)
{ uint8 i=0,temp=0;
    2560:	0f 93       	push	r16
    2562:	1f 93       	push	r17
    2564:	df 93       	push	r29
    2566:	cf 93       	push	r28
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
    256c:	2c 97       	sbiw	r28, 0x0c	; 12
    256e:	0f b6       	in	r0, 0x3f	; 63
    2570:	f8 94       	cli
    2572:	de bf       	out	0x3e, r29	; 62
    2574:	0f be       	out	0x3f, r0	; 63
    2576:	cd bf       	out	0x3d, r28	; 61
    2578:	98 87       	std	Y+8, r25	; 0x08
    257a:	8f 83       	std	Y+7, r24	; 0x07
    257c:	49 87       	std	Y+9, r20	; 0x09
    257e:	5a 87       	std	Y+10, r21	; 0x0a
    2580:	6b 87       	std	Y+11, r22	; 0x0b
    2582:	7c 87       	std	Y+12, r23	; 0x0c
    2584:	1e 82       	std	Y+6, r1	; 0x06
    2586:	1d 82       	std	Y+5, r1	; 0x05
uint8 *Ptr_Begin=string_Ptr, *Ptr_End=string_Ptr;
    2588:	8f 81       	ldd	r24, Y+7	; 0x07
    258a:	98 85       	ldd	r25, Y+8	; 0x08
    258c:	9c 83       	std	Y+4, r25	; 0x04
    258e:	8b 83       	std	Y+3, r24	; 0x03
    2590:	8f 81       	ldd	r24, Y+7	; 0x07
    2592:	98 85       	ldd	r25, Y+8	; 0x08
    2594:	9a 83       	std	Y+2, r25	; 0x02
    2596:	89 83       	std	Y+1, r24	; 0x01
    2598:	2f c0       	rjmp	.+94     	; 0x25f8 <LCD_integerToString+0x98>


	while(a_num !=0 && i<15)
	{
		*(string_Ptr +i)=  (((0x0F) & (a_num%10)) | ZEROASCII);
    259a:	8e 81       	ldd	r24, Y+6	; 0x06
    259c:	28 2f       	mov	r18, r24
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	8f 81       	ldd	r24, Y+7	; 0x07
    25a2:	98 85       	ldd	r25, Y+8	; 0x08
    25a4:	8c 01       	movw	r16, r24
    25a6:	02 0f       	add	r16, r18
    25a8:	13 1f       	adc	r17, r19
    25aa:	89 85       	ldd	r24, Y+9	; 0x09
    25ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ae:	ab 85       	ldd	r26, Y+11	; 0x0b
    25b0:	bc 85       	ldd	r27, Y+12	; 0x0c
    25b2:	2a e0       	ldi	r18, 0x0A	; 10
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	40 e0       	ldi	r20, 0x00	; 0
    25b8:	50 e0       	ldi	r21, 0x00	; 0
    25ba:	bc 01       	movw	r22, r24
    25bc:	cd 01       	movw	r24, r26
    25be:	0e 94 c0 14 	call	0x2980	; 0x2980 <__udivmodsi4>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	8f 70       	andi	r24, 0x0F	; 15
    25c8:	80 63       	ori	r24, 0x30	; 48
    25ca:	f8 01       	movw	r30, r16
    25cc:	80 83       	st	Z, r24

		a_num/=10;
    25ce:	89 85       	ldd	r24, Y+9	; 0x09
    25d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d2:	ab 85       	ldd	r26, Y+11	; 0x0b
    25d4:	bc 85       	ldd	r27, Y+12	; 0x0c
    25d6:	2a e0       	ldi	r18, 0x0A	; 10
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e0       	ldi	r20, 0x00	; 0
    25dc:	50 e0       	ldi	r21, 0x00	; 0
    25de:	bc 01       	movw	r22, r24
    25e0:	cd 01       	movw	r24, r26
    25e2:	0e 94 c0 14 	call	0x2980	; 0x2980 <__udivmodsi4>
    25e6:	da 01       	movw	r26, r20
    25e8:	c9 01       	movw	r24, r18
    25ea:	89 87       	std	Y+9, r24	; 0x09
    25ec:	9a 87       	std	Y+10, r25	; 0x0a
    25ee:	ab 87       	std	Y+11, r26	; 0x0b
    25f0:	bc 87       	std	Y+12, r27	; 0x0c
		i++;
    25f2:	8e 81       	ldd	r24, Y+6	; 0x06
    25f4:	8f 5f       	subi	r24, 0xFF	; 255
    25f6:	8e 83       	std	Y+6, r24	; 0x06
static void LCD_integerToString(uint8 *  string_Ptr,uint32 a_num)
{ uint8 i=0,temp=0;
uint8 *Ptr_Begin=string_Ptr, *Ptr_End=string_Ptr;


	while(a_num !=0 && i<15)
    25f8:	89 85       	ldd	r24, Y+9	; 0x09
    25fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    25fc:	ab 85       	ldd	r26, Y+11	; 0x0b
    25fe:	bc 85       	ldd	r27, Y+12	; 0x0c
    2600:	00 97       	sbiw	r24, 0x00	; 0
    2602:	a1 05       	cpc	r26, r1
    2604:	b1 05       	cpc	r27, r1
    2606:	19 f0       	breq	.+6      	; 0x260e <LCD_integerToString+0xae>
    2608:	8e 81       	ldd	r24, Y+6	; 0x06
    260a:	8f 30       	cpi	r24, 0x0F	; 15
    260c:	30 f2       	brcs	.-116    	; 0x259a <LCD_integerToString+0x3a>

		a_num/=10;
		i++;
	}

	*(string_Ptr +i)='\0';
    260e:	8e 81       	ldd	r24, Y+6	; 0x06
    2610:	28 2f       	mov	r18, r24
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	8f 81       	ldd	r24, Y+7	; 0x07
    2616:	98 85       	ldd	r25, Y+8	; 0x08
    2618:	fc 01       	movw	r30, r24
    261a:	e2 0f       	add	r30, r18
    261c:	f3 1f       	adc	r31, r19
    261e:	10 82       	st	Z, r1
    2620:	05 c0       	rjmp	.+10     	; 0x262c <LCD_integerToString+0xcc>

	while(*Ptr_End!= '\0')
	{
		Ptr_End++;
    2622:	89 81       	ldd	r24, Y+1	; 0x01
    2624:	9a 81       	ldd	r25, Y+2	; 0x02
    2626:	01 96       	adiw	r24, 0x01	; 1
    2628:	9a 83       	std	Y+2, r25	; 0x02
    262a:	89 83       	std	Y+1, r24	; 0x01
		i++;
	}

	*(string_Ptr +i)='\0';

	while(*Ptr_End!= '\0')
    262c:	e9 81       	ldd	r30, Y+1	; 0x01
    262e:	fa 81       	ldd	r31, Y+2	; 0x02
    2630:	80 81       	ld	r24, Z
    2632:	88 23       	and	r24, r24
    2634:	b1 f7       	brne	.-20     	; 0x2622 <LCD_integerToString+0xc2>
	{
		Ptr_End++;

	}
	Ptr_End--;
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	9a 81       	ldd	r25, Y+2	; 0x02
    263a:	01 97       	sbiw	r24, 0x01	; 1
    263c:	9a 83       	std	Y+2, r25	; 0x02
    263e:	89 83       	std	Y+1, r24	; 0x01
    2640:	18 c0       	rjmp	.+48     	; 0x2672 <LCD_integerToString+0x112>

	while(Ptr_End-Ptr_Begin > 0)
	{
		temp= *Ptr_End;
    2642:	e9 81       	ldd	r30, Y+1	; 0x01
    2644:	fa 81       	ldd	r31, Y+2	; 0x02
    2646:	80 81       	ld	r24, Z
    2648:	8d 83       	std	Y+5, r24	; 0x05
		*Ptr_End=*Ptr_Begin;
    264a:	eb 81       	ldd	r30, Y+3	; 0x03
    264c:	fc 81       	ldd	r31, Y+4	; 0x04
    264e:	80 81       	ld	r24, Z
    2650:	e9 81       	ldd	r30, Y+1	; 0x01
    2652:	fa 81       	ldd	r31, Y+2	; 0x02
    2654:	80 83       	st	Z, r24
		*Ptr_Begin=temp;
    2656:	eb 81       	ldd	r30, Y+3	; 0x03
    2658:	fc 81       	ldd	r31, Y+4	; 0x04
    265a:	8d 81       	ldd	r24, Y+5	; 0x05
    265c:	80 83       	st	Z, r24
		Ptr_End--;
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	9a 81       	ldd	r25, Y+2	; 0x02
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	9a 83       	std	Y+2, r25	; 0x02
    2666:	89 83       	std	Y+1, r24	; 0x01
		Ptr_Begin++;
    2668:	8b 81       	ldd	r24, Y+3	; 0x03
    266a:	9c 81       	ldd	r25, Y+4	; 0x04
    266c:	01 96       	adiw	r24, 0x01	; 1
    266e:	9c 83       	std	Y+4, r25	; 0x04
    2670:	8b 83       	std	Y+3, r24	; 0x03
		Ptr_End++;

	}
	Ptr_End--;

	while(Ptr_End-Ptr_Begin > 0)
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	9a 81       	ldd	r25, Y+2	; 0x02
    2676:	2b 81       	ldd	r18, Y+3	; 0x03
    2678:	3c 81       	ldd	r19, Y+4	; 0x04
    267a:	82 1b       	sub	r24, r18
    267c:	93 0b       	sbc	r25, r19
    267e:	18 16       	cp	r1, r24
    2680:	19 06       	cpc	r1, r25
    2682:	fc f2       	brlt	.-66     	; 0x2642 <LCD_integerToString+0xe2>
		Ptr_Begin++;
	}



}
    2684:	2c 96       	adiw	r28, 0x0c	; 12
    2686:	0f b6       	in	r0, 0x3f	; 63
    2688:	f8 94       	cli
    268a:	de bf       	out	0x3e, r29	; 62
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	cd bf       	out	0x3d, r28	; 61
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	1f 91       	pop	r17
    2696:	0f 91       	pop	r16
    2698:	08 95       	ret

0000269a <UART_init>:
#if (UART_INTERRUPTMODE == 1)
static volatile uint8 g_newRecepient=0;
void (*g_setCallBack_Ptr)(void)=NULL;
#endif
void UART_init(UART_ConfigType*config_ptr)
{
    269a:	df 93       	push	r29
    269c:	cf 93       	push	r28
    269e:	00 d0       	rcall	.+0      	; 0x26a0 <UART_init+0x6>
    26a0:	00 d0       	rcall	.+0      	; 0x26a2 <UART_init+0x8>
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	9c 83       	std	Y+4, r25	; 0x04
    26a8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 a_valueInUBBRH=0;
    26aa:	1a 82       	std	Y+2, r1	; 0x02
    26ac:	19 82       	std	Y+1, r1	; 0x01
 * Double speed mode gives a wider range of frequencies
 * that can achieve baud rates
 *
 * */
#if(UART_DOUBLESPEEDMODE)
SET_BIT(UCSRA,U2X);
    26ae:	ab e2       	ldi	r26, 0x2B	; 43
    26b0:	b0 e0       	ldi	r27, 0x00	; 0
    26b2:	eb e2       	ldi	r30, 0x2B	; 43
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	80 81       	ld	r24, Z
    26b8:	82 60       	ori	r24, 0x02	; 2
    26ba:	8c 93       	st	X, r24
#elif(UART_NORMALMODE)
CLEAR_BIT(UCSRA,U2X);
#endif

/* using asynchronous mode of USART	*/
SET_BIT(UCSRC,URSEL);
    26bc:	a0 e4       	ldi	r26, 0x40	; 64
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	e0 e4       	ldi	r30, 0x40	; 64
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 81       	ld	r24, Z
    26c6:	80 68       	ori	r24, 0x80	; 128
    26c8:	8c 93       	st	X, r24

CLEAR_BIT(UCSRC,UMSEL);
    26ca:	a0 e4       	ldi	r26, 0x40	; 64
    26cc:	b0 e0       	ldi	r27, 0x00	; 0
    26ce:	e0 e4       	ldi	r30, 0x40	; 64
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	80 81       	ld	r24, Z
    26d4:	8f 7b       	andi	r24, 0xBF	; 191
    26d6:	8c 93       	st	X, r24
UCSRC = ((UCSRC&(0xCF)) | ((config_ptr->parity)<<4));
    26d8:	a0 e4       	ldi	r26, 0x40	; 64
    26da:	b0 e0       	ldi	r27, 0x00	; 0
    26dc:	e0 e4       	ldi	r30, 0x40	; 64
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	80 81       	ld	r24, Z
    26e2:	28 2f       	mov	r18, r24
    26e4:	2f 7c       	andi	r18, 0xCF	; 207
    26e6:	eb 81       	ldd	r30, Y+3	; 0x03
    26e8:	fc 81       	ldd	r31, Y+4	; 0x04
    26ea:	81 81       	ldd	r24, Z+1	; 0x01
    26ec:	88 2f       	mov	r24, r24
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	82 95       	swap	r24
    26f2:	92 95       	swap	r25
    26f4:	90 7f       	andi	r25, 0xF0	; 240
    26f6:	98 27       	eor	r25, r24
    26f8:	80 7f       	andi	r24, 0xF0	; 240
    26fa:	98 27       	eor	r25, r24
    26fc:	82 2b       	or	r24, r18
    26fe:	8c 93       	st	X, r24
UCSRC = ((UCSRC&(0xF7)) | ((config_ptr->stop_bit)<<3));
    2700:	a0 e4       	ldi	r26, 0x40	; 64
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	e0 e4       	ldi	r30, 0x40	; 64
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	28 2f       	mov	r18, r24
    270c:	27 7f       	andi	r18, 0xF7	; 247
    270e:	eb 81       	ldd	r30, Y+3	; 0x03
    2710:	fc 81       	ldd	r31, Y+4	; 0x04
    2712:	82 81       	ldd	r24, Z+2	; 0x02
    2714:	88 2f       	mov	r24, r24
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	88 0f       	add	r24, r24
    271a:	99 1f       	adc	r25, r25
    271c:	88 0f       	add	r24, r24
    271e:	99 1f       	adc	r25, r25
    2720:	88 0f       	add	r24, r24
    2722:	99 1f       	adc	r25, r25
    2724:	82 2b       	or	r24, r18
    2726:	8c 93       	st	X, r24
UCSRC = ((UCSRC&(0xF9)) | (((config_ptr->bit_data)&(0x03))<<1));
    2728:	a0 e4       	ldi	r26, 0x40	; 64
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	e0 e4       	ldi	r30, 0x40	; 64
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	28 2f       	mov	r18, r24
    2734:	29 7f       	andi	r18, 0xF9	; 249
    2736:	eb 81       	ldd	r30, Y+3	; 0x03
    2738:	fc 81       	ldd	r31, Y+4	; 0x04
    273a:	80 81       	ld	r24, Z
    273c:	88 2f       	mov	r24, r24
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	83 70       	andi	r24, 0x03	; 3
    2742:	90 70       	andi	r25, 0x00	; 0
    2744:	88 0f       	add	r24, r24
    2746:	99 1f       	adc	r25, r25
    2748:	82 2b       	or	r24, r18
    274a:	8c 93       	st	X, r24
UCSRB = ((UCSRB&(0xFB)) | ((config_ptr->bit_data)&(0x04)));
    274c:	aa e2       	ldi	r26, 0x2A	; 42
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	ea e2       	ldi	r30, 0x2A	; 42
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	98 2f       	mov	r25, r24
    2758:	9b 7f       	andi	r25, 0xFB	; 251
    275a:	eb 81       	ldd	r30, Y+3	; 0x03
    275c:	fc 81       	ldd	r31, Y+4	; 0x04
    275e:	80 81       	ld	r24, Z
    2760:	84 70       	andi	r24, 0x04	; 4
    2762:	89 2b       	or	r24, r25
    2764:	8c 93       	st	X, r24

/* Enabling the Receive Complete interrupt Enable */
#if (UART_INTERRUPTMODE == 1)
SET_BIT(UCSRB,RXCIE);
#endif
SET_BIT(UCSRB,TXEN);
    2766:	aa e2       	ldi	r26, 0x2A	; 42
    2768:	b0 e0       	ldi	r27, 0x00	; 0
    276a:	ea e2       	ldi	r30, 0x2A	; 42
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	80 81       	ld	r24, Z
    2770:	88 60       	ori	r24, 0x08	; 8
    2772:	8c 93       	st	X, r24
SET_BIT(UCSRB,RXEN);
    2774:	aa e2       	ldi	r26, 0x2A	; 42
    2776:	b0 e0       	ldi	r27, 0x00	; 0
    2778:	ea e2       	ldi	r30, 0x2A	; 42
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	80 81       	ld	r24, Z
    277e:	80 61       	ori	r24, 0x10	; 16
    2780:	8c 93       	st	X, r24
CLEAR_BIT(UBRRH,URSEL);
    2782:	a0 e4       	ldi	r26, 0x40	; 64
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	e0 e4       	ldi	r30, 0x40	; 64
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	80 81       	ld	r24, Z
    278c:	8f 77       	andi	r24, 0x7F	; 127
    278e:	8c 93       	st	X, r24

#if(UART_DOUBLESPEEDMODE)
a_valueInUBBRH = (uint16)((F_CPU /(8UL*(config_ptr->baud_rate)))-1);
    2790:	eb 81       	ldd	r30, Y+3	; 0x03
    2792:	fc 81       	ldd	r31, Y+4	; 0x04
    2794:	83 81       	ldd	r24, Z+3	; 0x03
    2796:	94 81       	ldd	r25, Z+4	; 0x04
    2798:	a5 81       	ldd	r26, Z+5	; 0x05
    279a:	b6 81       	ldd	r27, Z+6	; 0x06
    279c:	88 0f       	add	r24, r24
    279e:	99 1f       	adc	r25, r25
    27a0:	aa 1f       	adc	r26, r26
    27a2:	bb 1f       	adc	r27, r27
    27a4:	88 0f       	add	r24, r24
    27a6:	99 1f       	adc	r25, r25
    27a8:	aa 1f       	adc	r26, r26
    27aa:	bb 1f       	adc	r27, r27
    27ac:	88 0f       	add	r24, r24
    27ae:	99 1f       	adc	r25, r25
    27b0:	aa 1f       	adc	r26, r26
    27b2:	bb 1f       	adc	r27, r27
    27b4:	9c 01       	movw	r18, r24
    27b6:	ad 01       	movw	r20, r26
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	94 e2       	ldi	r25, 0x24	; 36
    27bc:	a4 ef       	ldi	r26, 0xF4	; 244
    27be:	b0 e0       	ldi	r27, 0x00	; 0
    27c0:	bc 01       	movw	r22, r24
    27c2:	cd 01       	movw	r24, r26
    27c4:	0e 94 c0 14 	call	0x2980	; 0x2980 <__udivmodsi4>
    27c8:	da 01       	movw	r26, r20
    27ca:	c9 01       	movw	r24, r18
    27cc:	01 97       	sbiw	r24, 0x01	; 1
    27ce:	9a 83       	std	Y+2, r25	; 0x02
    27d0:	89 83       	std	Y+1, r24	; 0x01
#elif(UART_NORMALMODE)
a_valueInUBBRH = (uint16)((F_CPU /(16*(config_ptr->baud_rate)))-1);
#endif

UBRRH = ((a_valueInUBBRH & 0x0F00)>>8);
    27d2:	e0 e4       	ldi	r30, 0x40	; 64
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	89 81       	ldd	r24, Y+1	; 0x01
    27d8:	9a 81       	ldd	r25, Y+2	; 0x02
    27da:	80 70       	andi	r24, 0x00	; 0
    27dc:	9f 70       	andi	r25, 0x0F	; 15
    27de:	89 2f       	mov	r24, r25
    27e0:	99 27       	eor	r25, r25
    27e2:	80 83       	st	Z, r24
UBRRL = (a_valueInUBBRH & 0x00FF);
    27e4:	e9 e2       	ldi	r30, 0x29	; 41
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	80 83       	st	Z, r24

}
    27ec:	0f 90       	pop	r0
    27ee:	0f 90       	pop	r0
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	cf 91       	pop	r28
    27f6:	df 91       	pop	r29
    27f8:	08 95       	ret

000027fa <UART_sendByte>:
void UART_sendByte(const uint8 a_data)
{
    27fa:	df 93       	push	r29
    27fc:	cf 93       	push	r28
    27fe:	0f 92       	push	r0
    2800:	cd b7       	in	r28, 0x3d	; 61
    2802:	de b7       	in	r29, 0x3e	; 62
    2804:	89 83       	std	Y+1, r24	; 0x01
while(BIT_IS_CLEAR(UCSRA,UDRE));
    2806:	eb e2       	ldi	r30, 0x2B	; 43
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	80 81       	ld	r24, Z
    280c:	88 2f       	mov	r24, r24
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	80 72       	andi	r24, 0x20	; 32
    2812:	90 70       	andi	r25, 0x00	; 0
    2814:	00 97       	sbiw	r24, 0x00	; 0
    2816:	b9 f3       	breq	.-18     	; 0x2806 <UART_sendByte+0xc>
UDR=a_data;
    2818:	ec e2       	ldi	r30, 0x2C	; 44
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	89 81       	ldd	r24, Y+1	; 0x01
    281e:	80 83       	st	Z, r24

}
    2820:	0f 90       	pop	r0
    2822:	cf 91       	pop	r28
    2824:	df 91       	pop	r29
    2826:	08 95       	ret

00002828 <UART_recieveByte>:
uint8 UART_recieveByte(void)
{
    2828:	df 93       	push	r29
    282a:	cf 93       	push	r28
    282c:	cd b7       	in	r28, 0x3d	; 61
    282e:	de b7       	in	r29, 0x3e	; 62

while(BIT_IS_CLEAR(UCSRA,RXC));
    2830:	eb e2       	ldi	r30, 0x2B	; 43
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
    2836:	88 23       	and	r24, r24
    2838:	dc f7       	brge	.-10     	; 0x2830 <UART_recieveByte+0x8>
#if (UART_INTERRUPTMODE == 1)
g_newRecepient=0;
#endif
return UDR;
    283a:	ec e2       	ldi	r30, 0x2C	; 44
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	80 81       	ld	r24, Z

}
    2840:	cf 91       	pop	r28
    2842:	df 91       	pop	r29
    2844:	08 95       	ret

00002846 <UART_sendString>:
void UART_sendString(const uint8*str)
{
    2846:	df 93       	push	r29
    2848:	cf 93       	push	r28
    284a:	00 d0       	rcall	.+0      	; 0x284c <UART_sendString+0x6>
    284c:	0f 92       	push	r0
    284e:	cd b7       	in	r28, 0x3d	; 61
    2850:	de b7       	in	r29, 0x3e	; 62
    2852:	9b 83       	std	Y+3, r25	; 0x03
    2854:	8a 83       	std	Y+2, r24	; 0x02
 uint8 i=0;
    2856:	19 82       	std	Y+1, r1	; 0x01
    2858:	0e c0       	rjmp	.+28     	; 0x2876 <UART_sendString+0x30>
 /*  *(str+i) = str[i] */
	while( str[i] != '\0')
	{
		UART_sendByte(str[i]);
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	28 2f       	mov	r18, r24
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	9b 81       	ldd	r25, Y+3	; 0x03
    2864:	fc 01       	movw	r30, r24
    2866:	e2 0f       	add	r30, r18
    2868:	f3 1f       	adc	r31, r19
    286a:	80 81       	ld	r24, Z
    286c:	0e 94 fd 13 	call	0x27fa	; 0x27fa <UART_sendByte>
		++i;
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	8f 5f       	subi	r24, 0xFF	; 255
    2874:	89 83       	std	Y+1, r24	; 0x01
}
void UART_sendString(const uint8*str)
{
 uint8 i=0;
 /*  *(str+i) = str[i] */
	while( str[i] != '\0')
    2876:	89 81       	ldd	r24, Y+1	; 0x01
    2878:	28 2f       	mov	r18, r24
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	8a 81       	ldd	r24, Y+2	; 0x02
    287e:	9b 81       	ldd	r25, Y+3	; 0x03
    2880:	fc 01       	movw	r30, r24
    2882:	e2 0f       	add	r30, r18
    2884:	f3 1f       	adc	r31, r19
    2886:	80 81       	ld	r24, Z
    2888:	88 23       	and	r24, r24
    288a:	39 f7       	brne	.-50     	; 0x285a <UART_sendString+0x14>
		UART_sendByte(str[i]);
		++i;
	}


}
    288c:	0f 90       	pop	r0
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	cf 91       	pop	r28
    2894:	df 91       	pop	r29
    2896:	08 95       	ret

00002898 <UART_recieveString>:
void UART_recieveString(uint8*const a_str)
{
    2898:	0f 93       	push	r16
    289a:	1f 93       	push	r17
    289c:	df 93       	push	r29
    289e:	cf 93       	push	r28
    28a0:	00 d0       	rcall	.+0      	; 0x28a2 <UART_recieveString+0xa>
    28a2:	0f 92       	push	r0
    28a4:	cd b7       	in	r28, 0x3d	; 61
    28a6:	de b7       	in	r29, 0x3e	; 62
    28a8:	9b 83       	std	Y+3, r25	; 0x03
    28aa:	8a 83       	std	Y+2, r24	; 0x02

	sint8 i=-1;
    28ac:	8f ef       	ldi	r24, 0xFF	; 255
    28ae:	89 83       	std	Y+1, r24	; 0x01
		do
		{
			i++;
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	8f 5f       	subi	r24, 0xFF	; 255
    28b4:	89 83       	std	Y+1, r24	; 0x01

			a_str[i]=UART_recieveByte();
    28b6:	89 81       	ldd	r24, Y+1	; 0x01
    28b8:	28 2f       	mov	r18, r24
    28ba:	33 27       	eor	r19, r19
    28bc:	27 fd       	sbrc	r18, 7
    28be:	30 95       	com	r19
    28c0:	8a 81       	ldd	r24, Y+2	; 0x02
    28c2:	9b 81       	ldd	r25, Y+3	; 0x03
    28c4:	8c 01       	movw	r16, r24
    28c6:	02 0f       	add	r16, r18
    28c8:	13 1f       	adc	r17, r19
    28ca:	0e 94 14 14 	call	0x2828	; 0x2828 <UART_recieveByte>
    28ce:	f8 01       	movw	r30, r16
    28d0:	80 83       	st	Z, r24




		}while(a_str[i] != '#');
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
    28d4:	28 2f       	mov	r18, r24
    28d6:	33 27       	eor	r19, r19
    28d8:	27 fd       	sbrc	r18, 7
    28da:	30 95       	com	r19
    28dc:	8a 81       	ldd	r24, Y+2	; 0x02
    28de:	9b 81       	ldd	r25, Y+3	; 0x03
    28e0:	fc 01       	movw	r30, r24
    28e2:	e2 0f       	add	r30, r18
    28e4:	f3 1f       	adc	r31, r19
    28e6:	80 81       	ld	r24, Z
    28e8:	83 32       	cpi	r24, 0x23	; 35
    28ea:	11 f7       	brne	.-60     	; 0x28b0 <UART_recieveString+0x18>

		a_str[i]='\0';
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	28 2f       	mov	r18, r24
    28f0:	33 27       	eor	r19, r19
    28f2:	27 fd       	sbrc	r18, 7
    28f4:	30 95       	com	r19
    28f6:	8a 81       	ldd	r24, Y+2	; 0x02
    28f8:	9b 81       	ldd	r25, Y+3	; 0x03
    28fa:	fc 01       	movw	r30, r24
    28fc:	e2 0f       	add	r30, r18
    28fe:	f3 1f       	adc	r31, r19
    2900:	10 82       	st	Z, r1
		}

	//}while(str[i]!='#' && (i<UART_MAXSIZEOFSTRING));/* This mean that if it is required to recieve a string of 16 char we must predefine an array of 17 char to preserve a place for the null char*/
#endif

}
    2902:	0f 90       	pop	r0
    2904:	0f 90       	pop	r0
    2906:	0f 90       	pop	r0
    2908:	cf 91       	pop	r28
    290a:	df 91       	pop	r29
    290c:	1f 91       	pop	r17
    290e:	0f 91       	pop	r16
    2910:	08 95       	ret

00002912 <main>:
	//g_UART_firstStringFinished =0;
	//}

//}
int main (void)
{
    2912:	df 93       	push	r29
    2914:	cf 93       	push	r28
    2916:	cd b7       	in	r28, 0x3d	; 61
    2918:	de b7       	in	r29, 0x3e	; 62
    291a:	a1 97       	sbiw	r28, 0x21	; 33
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
	 uint8 str[21];
	//SREG|=1<<7;
	//UART_setCallBack(Display);
	UART_ConfigType attributes={UART_EIGHTBITMODE,UART_PARITYDISABLED,UART_TWOSTOP,UART_BAUDRATE9600};
    2926:	ce 01       	movw	r24, r28
    2928:	46 96       	adiw	r24, 0x16	; 22
    292a:	9e 8f       	std	Y+30, r25	; 0x1e
    292c:	8d 8f       	std	Y+29, r24	; 0x1d
    292e:	e8 e6       	ldi	r30, 0x68	; 104
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	f8 a3       	std	Y+32, r31	; 0x20
    2934:	ef 8f       	std	Y+31, r30	; 0x1f
    2936:	f7 e0       	ldi	r31, 0x07	; 7
    2938:	f9 a3       	std	Y+33, r31	; 0x21
    293a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    293c:	f8 a1       	ldd	r31, Y+32	; 0x20
    293e:	00 80       	ld	r0, Z
    2940:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2942:	98 a1       	ldd	r25, Y+32	; 0x20
    2944:	01 96       	adiw	r24, 0x01	; 1
    2946:	98 a3       	std	Y+32, r25	; 0x20
    2948:	8f 8f       	std	Y+31, r24	; 0x1f
    294a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    294c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    294e:	00 82       	st	Z, r0
    2950:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2952:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2954:	01 96       	adiw	r24, 0x01	; 1
    2956:	9e 8f       	std	Y+30, r25	; 0x1e
    2958:	8d 8f       	std	Y+29, r24	; 0x1d
    295a:	99 a1       	ldd	r25, Y+33	; 0x21
    295c:	91 50       	subi	r25, 0x01	; 1
    295e:	99 a3       	std	Y+33, r25	; 0x21
    2960:	e9 a1       	ldd	r30, Y+33	; 0x21
    2962:	ee 23       	and	r30, r30
    2964:	51 f7       	brne	.-44     	; 0x293a <main+0x28>
   UART_init(&attributes);
    2966:	ce 01       	movw	r24, r28
    2968:	46 96       	adiw	r24, 0x16	; 22
    296a:	0e 94 4d 13 	call	0x269a	; 0x269a <UART_init>
   //LCD_init();
while(1)
{
	UART_sendString(str);
    296e:	ce 01       	movw	r24, r28
    2970:	01 96       	adiw	r24, 0x01	; 1
    2972:	0e 94 23 14 	call	0x2846	; 0x2846 <UART_sendString>
	UART_recieveString(str);
    2976:	ce 01       	movw	r24, r28
    2978:	01 96       	adiw	r24, 0x01	; 1
    297a:	0e 94 4c 14 	call	0x2898	; 0x2898 <UART_recieveString>
    297e:	f7 cf       	rjmp	.-18     	; 0x296e <main+0x5c>

00002980 <__udivmodsi4>:
    2980:	a1 e2       	ldi	r26, 0x21	; 33
    2982:	1a 2e       	mov	r1, r26
    2984:	aa 1b       	sub	r26, r26
    2986:	bb 1b       	sub	r27, r27
    2988:	fd 01       	movw	r30, r26
    298a:	0d c0       	rjmp	.+26     	; 0x29a6 <__udivmodsi4_ep>

0000298c <__udivmodsi4_loop>:
    298c:	aa 1f       	adc	r26, r26
    298e:	bb 1f       	adc	r27, r27
    2990:	ee 1f       	adc	r30, r30
    2992:	ff 1f       	adc	r31, r31
    2994:	a2 17       	cp	r26, r18
    2996:	b3 07       	cpc	r27, r19
    2998:	e4 07       	cpc	r30, r20
    299a:	f5 07       	cpc	r31, r21
    299c:	20 f0       	brcs	.+8      	; 0x29a6 <__udivmodsi4_ep>
    299e:	a2 1b       	sub	r26, r18
    29a0:	b3 0b       	sbc	r27, r19
    29a2:	e4 0b       	sbc	r30, r20
    29a4:	f5 0b       	sbc	r31, r21

000029a6 <__udivmodsi4_ep>:
    29a6:	66 1f       	adc	r22, r22
    29a8:	77 1f       	adc	r23, r23
    29aa:	88 1f       	adc	r24, r24
    29ac:	99 1f       	adc	r25, r25
    29ae:	1a 94       	dec	r1
    29b0:	69 f7       	brne	.-38     	; 0x298c <__udivmodsi4_loop>
    29b2:	60 95       	com	r22
    29b4:	70 95       	com	r23
    29b6:	80 95       	com	r24
    29b8:	90 95       	com	r25
    29ba:	9b 01       	movw	r18, r22
    29bc:	ac 01       	movw	r20, r24
    29be:	bd 01       	movw	r22, r26
    29c0:	cf 01       	movw	r24, r30
    29c2:	08 95       	ret

000029c4 <__prologue_saves__>:
    29c4:	2f 92       	push	r2
    29c6:	3f 92       	push	r3
    29c8:	4f 92       	push	r4
    29ca:	5f 92       	push	r5
    29cc:	6f 92       	push	r6
    29ce:	7f 92       	push	r7
    29d0:	8f 92       	push	r8
    29d2:	9f 92       	push	r9
    29d4:	af 92       	push	r10
    29d6:	bf 92       	push	r11
    29d8:	cf 92       	push	r12
    29da:	df 92       	push	r13
    29dc:	ef 92       	push	r14
    29de:	ff 92       	push	r15
    29e0:	0f 93       	push	r16
    29e2:	1f 93       	push	r17
    29e4:	cf 93       	push	r28
    29e6:	df 93       	push	r29
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
    29ec:	ca 1b       	sub	r28, r26
    29ee:	db 0b       	sbc	r29, r27
    29f0:	0f b6       	in	r0, 0x3f	; 63
    29f2:	f8 94       	cli
    29f4:	de bf       	out	0x3e, r29	; 62
    29f6:	0f be       	out	0x3f, r0	; 63
    29f8:	cd bf       	out	0x3d, r28	; 61
    29fa:	09 94       	ijmp

000029fc <__epilogue_restores__>:
    29fc:	2a 88       	ldd	r2, Y+18	; 0x12
    29fe:	39 88       	ldd	r3, Y+17	; 0x11
    2a00:	48 88       	ldd	r4, Y+16	; 0x10
    2a02:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a04:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a06:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a08:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a0a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a0c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a0e:	b9 84       	ldd	r11, Y+9	; 0x09
    2a10:	c8 84       	ldd	r12, Y+8	; 0x08
    2a12:	df 80       	ldd	r13, Y+7	; 0x07
    2a14:	ee 80       	ldd	r14, Y+6	; 0x06
    2a16:	fd 80       	ldd	r15, Y+5	; 0x05
    2a18:	0c 81       	ldd	r16, Y+4	; 0x04
    2a1a:	1b 81       	ldd	r17, Y+3	; 0x03
    2a1c:	aa 81       	ldd	r26, Y+2	; 0x02
    2a1e:	b9 81       	ldd	r27, Y+1	; 0x01
    2a20:	ce 0f       	add	r28, r30
    2a22:	d1 1d       	adc	r29, r1
    2a24:	0f b6       	in	r0, 0x3f	; 63
    2a26:	f8 94       	cli
    2a28:	de bf       	out	0x3e, r29	; 62
    2a2a:	0f be       	out	0x3f, r0	; 63
    2a2c:	cd bf       	out	0x3d, r28	; 61
    2a2e:	ed 01       	movw	r28, r26
    2a30:	08 95       	ret

00002a32 <_exit>:
    2a32:	f8 94       	cli

00002a34 <__stop_program>:
    2a34:	ff cf       	rjmp	.-2      	; 0x2a34 <__stop_program>
