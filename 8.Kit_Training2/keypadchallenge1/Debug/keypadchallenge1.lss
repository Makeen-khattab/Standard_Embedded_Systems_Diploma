
keypadchallenge1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001c56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00001c56  00001cea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800068  00800068  00001cf2  2**0
                  ALLOC
  3 .stab         0000168c  00000000  00000000  00001cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c15  00000000  00000000  00003380  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00003f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000040d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004245  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00005e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00006d79  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007b28  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00007c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00007f15  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000086e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a9 36       	cpi	r26, 0x69	; 105
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 e5       	ldi	r30, 0x56	; 86
      78:	fc e1       	ldi	r31, 0x1C	; 28
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 b5 0b 	call	0x176a	; 0x176a <main>
      8a:	0c 94 29 0e 	jmp	0x1c52	; 0x1c52 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 0e 0e 	jmp	0x1c1c	; 0x1c1c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 02 0e 	jmp	0x1c04	; 0x1c04 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 1e 0e 	jmp	0x1c3c	; 0x1c3c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
/*-----------------------FUNCTION Definitions------------------*/


/* Setting the pin on each port to be either Input pin or Output pin */
void GPIO_setupPinDirection( uint8 a_portNum,uint8 a_pinNum,GPIO_PinDirectionType a_direction )
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03

	/* Checking the number given by the user is valid  for Port number and Pin number */
	if( a_portNum>=GPIO_NUM_OF_PORTS || a_pinNum>=GPIO_NUM_OF_PINS )
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	84 30       	cpi	r24, 0x04	; 4
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	e4 c0       	rjmp	.+456    	; 0xd2a <GPIO_setupPinDirection+0x1e4>
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	88 30       	cpi	r24, 0x08	; 8
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	e0 c0       	rjmp	.+448    	; 0xd2a <GPIO_setupPinDirection+0x1e4>
	/*------- If the number is within the range--------*/
	else
	{

		/*------- Selecting the Port you will set the Pin Direction in --------*/
		switch ( a_portNum )
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	47 c0       	rjmp	.+142    	; 0xc0e <GPIO_setupPinDirection+0xc8>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	cb c0       	rjmp	.+406    	; 0xd2a <GPIO_setupPinDirection+0x1e4>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	67 c0       	rjmp	.+206    	; 0xc6e <GPIO_setupPinDirection+0x128>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	91 c0       	rjmp	.+290    	; 0xcce <GPIO_setupPinDirection+0x188>
     bac:	be c0       	rjmp	.+380    	; 0xd2a <GPIO_setupPinDirection+0x1e4>
		{

				case PORTA_ID :

		/*------- Selecting the Mode you will set the Pin Direction to --------*/
					if( a_direction == PIN_INPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	88 23       	and	r24, r24
     bb2:	a9 f4       	brne	.+42     	; 0xbde <GPIO_setupPinDirection+0x98>
					{

						/* Common Macro function to clear a bit*/
						CLEAR_BIT( DDRA,a_pinNum );
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	80 95       	com	r24
     bd8:	84 23       	and	r24, r20
     bda:	8c 93       	st	X, r24
     bdc:	a6 c0       	rjmp	.+332    	; 0xd2a <GPIO_setupPinDirection+0x1e4>

					}
					else if ( a_direction == PIN_OUTPUT )
     bde:	8b 81       	ldd	r24, Y+3	; 0x03
     be0:	81 30       	cpi	r24, 0x01	; 1
     be2:	09 f0       	breq	.+2      	; 0xbe6 <GPIO_setupPinDirection+0xa0>
     be4:	a2 c0       	rjmp	.+324    	; 0xd2a <GPIO_setupPinDirection+0x1e4>
					{

						/* Common Macro function to Set a bit to 1*/
						SET_BIT( DDRA,a_pinNum );
     be6:	aa e3       	ldi	r26, 0x3A	; 58
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	ea e3       	ldi	r30, 0x3A	; 58
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	48 2f       	mov	r20, r24
     bf2:	8a 81       	ldd	r24, Y+2	; 0x02
     bf4:	28 2f       	mov	r18, r24
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	02 2e       	mov	r0, r18
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <GPIO_setupPinDirection+0xbe>
     c00:	88 0f       	add	r24, r24
     c02:	99 1f       	adc	r25, r25
     c04:	0a 94       	dec	r0
     c06:	e2 f7       	brpl	.-8      	; 0xc00 <GPIO_setupPinDirection+0xba>
     c08:	84 2b       	or	r24, r20
     c0a:	8c 93       	st	X, r24
     c0c:	8e c0       	rjmp	.+284    	; 0xd2a <GPIO_setupPinDirection+0x1e4>
					break;

				case PORTB_ID :

				/*------- Selecting the Mode you will set the Pin Direction to --------*/
					if( a_direction == PIN_INPUT )
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	88 23       	and	r24, r24
     c12:	a9 f4       	brne	.+42     	; 0xc3e <GPIO_setupPinDirection+0xf8>
					{

						/* Common Macro function to clear a bit*/
						 CLEAR_BIT( DDRB,a_pinNum );
     c14:	a7 e3       	ldi	r26, 0x37	; 55
     c16:	b0 e0       	ldi	r27, 0x00	; 0
     c18:	e7 e3       	ldi	r30, 0x37	; 55
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	80 81       	ld	r24, Z
     c1e:	48 2f       	mov	r20, r24
     c20:	8a 81       	ldd	r24, Y+2	; 0x02
     c22:	28 2f       	mov	r18, r24
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	02 2e       	mov	r0, r18
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <GPIO_setupPinDirection+0xec>
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	0a 94       	dec	r0
     c34:	e2 f7       	brpl	.-8      	; 0xc2e <GPIO_setupPinDirection+0xe8>
     c36:	80 95       	com	r24
     c38:	84 23       	and	r24, r20
     c3a:	8c 93       	st	X, r24
     c3c:	76 c0       	rjmp	.+236    	; 0xd2a <GPIO_setupPinDirection+0x1e4>

					}

					else if ( a_direction == PIN_OUTPUT )
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	81 30       	cpi	r24, 0x01	; 1
     c42:	09 f0       	breq	.+2      	; 0xc46 <GPIO_setupPinDirection+0x100>
     c44:	72 c0       	rjmp	.+228    	; 0xd2a <GPIO_setupPinDirection+0x1e4>
					{

						/* Common Macro function to Set a bit to 1*/
						SET_BIT( DDRB,a_pinNum );
     c46:	a7 e3       	ldi	r26, 0x37	; 55
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	e7 e3       	ldi	r30, 0x37	; 55
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	48 2f       	mov	r20, r24
     c52:	8a 81       	ldd	r24, Y+2	; 0x02
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	02 2e       	mov	r0, r18
     c5e:	02 c0       	rjmp	.+4      	; 0xc64 <GPIO_setupPinDirection+0x11e>
     c60:	88 0f       	add	r24, r24
     c62:	99 1f       	adc	r25, r25
     c64:	0a 94       	dec	r0
     c66:	e2 f7       	brpl	.-8      	; 0xc60 <GPIO_setupPinDirection+0x11a>
     c68:	84 2b       	or	r24, r20
     c6a:	8c 93       	st	X, r24
     c6c:	5e c0       	rjmp	.+188    	; 0xd2a <GPIO_setupPinDirection+0x1e4>
					break;

				case PORTC_ID :

					/*------- Selecting the Mode you will set the Pin Direction to --------*/
					if( a_direction == PIN_INPUT )
     c6e:	8b 81       	ldd	r24, Y+3	; 0x03
     c70:	88 23       	and	r24, r24
     c72:	a9 f4       	brne	.+42     	; 0xc9e <GPIO_setupPinDirection+0x158>
					{
					/* Common Macro function to clear a bit*/
						 CLEAR_BIT( DDRC,a_pinNum );
     c74:	a4 e3       	ldi	r26, 0x34	; 52
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	e4 e3       	ldi	r30, 0x34	; 52
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	48 2f       	mov	r20, r24
     c80:	8a 81       	ldd	r24, Y+2	; 0x02
     c82:	28 2f       	mov	r18, r24
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	02 2e       	mov	r0, r18
     c8c:	02 c0       	rjmp	.+4      	; 0xc92 <GPIO_setupPinDirection+0x14c>
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	0a 94       	dec	r0
     c94:	e2 f7       	brpl	.-8      	; 0xc8e <GPIO_setupPinDirection+0x148>
     c96:	80 95       	com	r24
     c98:	84 23       	and	r24, r20
     c9a:	8c 93       	st	X, r24
     c9c:	46 c0       	rjmp	.+140    	; 0xd2a <GPIO_setupPinDirection+0x1e4>

					}

					else if ( a_direction == PIN_OUTPUT )
     c9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ca0:	81 30       	cpi	r24, 0x01	; 1
     ca2:	09 f0       	breq	.+2      	; 0xca6 <GPIO_setupPinDirection+0x160>
     ca4:	42 c0       	rjmp	.+132    	; 0xd2a <GPIO_setupPinDirection+0x1e4>
					{

						/* Common Macro function to Set a bit to 1*/
	   					 SET_BIT( DDRC,a_pinNum );
     ca6:	a4 e3       	ldi	r26, 0x34	; 52
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e4 e3       	ldi	r30, 0x34	; 52
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	48 2f       	mov	r20, r24
     cb2:	8a 81       	ldd	r24, Y+2	; 0x02
     cb4:	28 2f       	mov	r18, r24
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	02 2e       	mov	r0, r18
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <GPIO_setupPinDirection+0x17e>
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	0a 94       	dec	r0
     cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <GPIO_setupPinDirection+0x17a>
     cc8:	84 2b       	or	r24, r20
     cca:	8c 93       	st	X, r24
     ccc:	2e c0       	rjmp	.+92     	; 0xd2a <GPIO_setupPinDirection+0x1e4>
					break;

				case PORTD_ID :

					/*------- Selecting the Mode you will set the Pin Direction to --------*/
					if( a_direction == PIN_INPUT )
     cce:	8b 81       	ldd	r24, Y+3	; 0x03
     cd0:	88 23       	and	r24, r24
     cd2:	a9 f4       	brne	.+42     	; 0xcfe <GPIO_setupPinDirection+0x1b8>
					{

						/* Common Macro function to clear a bit*/
						CLEAR_BIT( DDRD,a_pinNum );
     cd4:	a1 e3       	ldi	r26, 0x31	; 49
     cd6:	b0 e0       	ldi	r27, 0x00	; 0
     cd8:	e1 e3       	ldi	r30, 0x31	; 49
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	80 81       	ld	r24, Z
     cde:	48 2f       	mov	r20, r24
     ce0:	8a 81       	ldd	r24, Y+2	; 0x02
     ce2:	28 2f       	mov	r18, r24
     ce4:	30 e0       	ldi	r19, 0x00	; 0
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 2e       	mov	r0, r18
     cec:	02 c0       	rjmp	.+4      	; 0xcf2 <GPIO_setupPinDirection+0x1ac>
     cee:	88 0f       	add	r24, r24
     cf0:	99 1f       	adc	r25, r25
     cf2:	0a 94       	dec	r0
     cf4:	e2 f7       	brpl	.-8      	; 0xcee <GPIO_setupPinDirection+0x1a8>
     cf6:	80 95       	com	r24
     cf8:	84 23       	and	r24, r20
     cfa:	8c 93       	st	X, r24
     cfc:	16 c0       	rjmp	.+44     	; 0xd2a <GPIO_setupPinDirection+0x1e4>

					}

					else if ( a_direction == PIN_OUTPUT )
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	81 30       	cpi	r24, 0x01	; 1
     d02:	99 f4       	brne	.+38     	; 0xd2a <GPIO_setupPinDirection+0x1e4>
					{
						/* Common Macro function to Set a bit to 1*/
						SET_BIT( DDRD,a_pinNum );
     d04:	a1 e3       	ldi	r26, 0x31	; 49
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e1 e3       	ldi	r30, 0x31	; 49
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	48 2f       	mov	r20, r24
     d10:	8a 81       	ldd	r24, Y+2	; 0x02
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	81 e0       	ldi	r24, 0x01	; 1
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	02 2e       	mov	r0, r18
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <GPIO_setupPinDirection+0x1dc>
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	0a 94       	dec	r0
     d24:	e2 f7       	brpl	.-8      	; 0xd1e <GPIO_setupPinDirection+0x1d8>
     d26:	84 2b       	or	r24, r20
     d28:	8c 93       	st	X, r24

	}



}
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	cf 91       	pop	r28
     d36:	df 91       	pop	r29
     d38:	08 95       	ret

00000d3a <GPIO_writePin>:


/* Writing a logic 0 or 1 on an Output pin */
void GPIO_writePin(uint8 a_portNum,uint8 a_pinNum,uint8 a_value)
{
     d3a:	df 93       	push	r29
     d3c:	cf 93       	push	r28
     d3e:	00 d0       	rcall	.+0      	; 0xd40 <GPIO_writePin+0x6>
     d40:	00 d0       	rcall	.+0      	; 0xd42 <GPIO_writePin+0x8>
     d42:	0f 92       	push	r0
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
     d48:	89 83       	std	Y+1, r24	; 0x01
     d4a:	6a 83       	std	Y+2, r22	; 0x02
     d4c:	4b 83       	std	Y+3, r20	; 0x03

	/* Checking the number given by the user is valid  for Port number and Pin number */

	if( a_portNum>=GPIO_NUM_OF_PORTS || a_pinNum>=GPIO_NUM_OF_PINS )
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	84 30       	cpi	r24, 0x04	; 4
     d52:	08 f0       	brcs	.+2      	; 0xd56 <GPIO_writePin+0x1c>
     d54:	e4 c0       	rjmp	.+456    	; 0xf1e <GPIO_writePin+0x1e4>
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	88 30       	cpi	r24, 0x08	; 8
     d5a:	08 f0       	brcs	.+2      	; 0xd5e <GPIO_writePin+0x24>
     d5c:	e0 c0       	rjmp	.+448    	; 0xf1e <GPIO_writePin+0x1e4>
	/*------- If the number is within the range--------*/
		else
		{

		/*------- Selecting the Port you will write on a Pin in --------*/
			switch ( a_portNum )
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	3d 83       	std	Y+5, r19	; 0x05
     d66:	2c 83       	std	Y+4, r18	; 0x04
     d68:	8c 81       	ldd	r24, Y+4	; 0x04
     d6a:	9d 81       	ldd	r25, Y+5	; 0x05
     d6c:	81 30       	cpi	r24, 0x01	; 1
     d6e:	91 05       	cpc	r25, r1
     d70:	09 f4       	brne	.+2      	; 0xd74 <GPIO_writePin+0x3a>
     d72:	47 c0       	rjmp	.+142    	; 0xe02 <GPIO_writePin+0xc8>
     d74:	2c 81       	ldd	r18, Y+4	; 0x04
     d76:	3d 81       	ldd	r19, Y+5	; 0x05
     d78:	22 30       	cpi	r18, 0x02	; 2
     d7a:	31 05       	cpc	r19, r1
     d7c:	2c f4       	brge	.+10     	; 0xd88 <GPIO_writePin+0x4e>
     d7e:	8c 81       	ldd	r24, Y+4	; 0x04
     d80:	9d 81       	ldd	r25, Y+5	; 0x05
     d82:	00 97       	sbiw	r24, 0x00	; 0
     d84:	71 f0       	breq	.+28     	; 0xda2 <GPIO_writePin+0x68>
     d86:	cb c0       	rjmp	.+406    	; 0xf1e <GPIO_writePin+0x1e4>
     d88:	2c 81       	ldd	r18, Y+4	; 0x04
     d8a:	3d 81       	ldd	r19, Y+5	; 0x05
     d8c:	22 30       	cpi	r18, 0x02	; 2
     d8e:	31 05       	cpc	r19, r1
     d90:	09 f4       	brne	.+2      	; 0xd94 <GPIO_writePin+0x5a>
     d92:	67 c0       	rjmp	.+206    	; 0xe62 <GPIO_writePin+0x128>
     d94:	8c 81       	ldd	r24, Y+4	; 0x04
     d96:	9d 81       	ldd	r25, Y+5	; 0x05
     d98:	83 30       	cpi	r24, 0x03	; 3
     d9a:	91 05       	cpc	r25, r1
     d9c:	09 f4       	brne	.+2      	; 0xda0 <GPIO_writePin+0x66>
     d9e:	91 c0       	rjmp	.+290    	; 0xec2 <GPIO_writePin+0x188>
     da0:	be c0       	rjmp	.+380    	; 0xf1e <GPIO_writePin+0x1e4>
			{
					case PORTA_ID :

		/*------- Selecting the value you will write on a Pin in --------*/
						if( a_value == LOGIC_LOW )
     da2:	8b 81       	ldd	r24, Y+3	; 0x03
     da4:	88 23       	and	r24, r24
     da6:	a9 f4       	brne	.+42     	; 0xdd2 <GPIO_writePin+0x98>
						{

							/* Common Macro function to clear a bit*/
							CLEAR_BIT( PORTA,a_pinNum );
     da8:	ab e3       	ldi	r26, 0x3B	; 59
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	eb e3       	ldi	r30, 0x3B	; 59
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	48 2f       	mov	r20, r24
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	02 2e       	mov	r0, r18
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <GPIO_writePin+0x8c>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <GPIO_writePin+0x88>
     dca:	80 95       	com	r24
     dcc:	84 23       	and	r24, r20
     dce:	8c 93       	st	X, r24
     dd0:	a6 c0       	rjmp	.+332    	; 0xf1e <GPIO_writePin+0x1e4>

						}
						else if ( a_value == LOGIC_HIGH )
     dd2:	8b 81       	ldd	r24, Y+3	; 0x03
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	09 f0       	breq	.+2      	; 0xdda <GPIO_writePin+0xa0>
     dd8:	a2 c0       	rjmp	.+324    	; 0xf1e <GPIO_writePin+0x1e4>
						{

							/* Common Macro function to Set a bit to 1*/
							SET_BIT( PORTA,a_pinNum );
     dda:	ab e3       	ldi	r26, 0x3B	; 59
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	eb e3       	ldi	r30, 0x3B	; 59
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	48 2f       	mov	r20, r24
     de6:	8a 81       	ldd	r24, Y+2	; 0x02
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	02 2e       	mov	r0, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <GPIO_writePin+0xbe>
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	0a 94       	dec	r0
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <GPIO_writePin+0xba>
     dfc:	84 2b       	or	r24, r20
     dfe:	8c 93       	st	X, r24
     e00:	8e c0       	rjmp	.+284    	; 0xf1e <GPIO_writePin+0x1e4>
						break;

					case PORTB_ID :

					/*------- Selecting the value you will write on a Pin in --------*/
						if( a_value == LOGIC_LOW )
     e02:	8b 81       	ldd	r24, Y+3	; 0x03
     e04:	88 23       	and	r24, r24
     e06:	a9 f4       	brne	.+42     	; 0xe32 <GPIO_writePin+0xf8>
						{

							/* Common Macro function to clear a bit*/
							 CLEAR_BIT( PORTB,a_pinNum );
     e08:	a8 e3       	ldi	r26, 0x38	; 56
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	e8 e3       	ldi	r30, 0x38	; 56
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	48 2f       	mov	r20, r24
     e14:	8a 81       	ldd	r24, Y+2	; 0x02
     e16:	28 2f       	mov	r18, r24
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	02 2e       	mov	r0, r18
     e20:	02 c0       	rjmp	.+4      	; 0xe26 <GPIO_writePin+0xec>
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	0a 94       	dec	r0
     e28:	e2 f7       	brpl	.-8      	; 0xe22 <GPIO_writePin+0xe8>
     e2a:	80 95       	com	r24
     e2c:	84 23       	and	r24, r20
     e2e:	8c 93       	st	X, r24
     e30:	76 c0       	rjmp	.+236    	; 0xf1e <GPIO_writePin+0x1e4>

						}

						else if ( a_value == LOGIC_HIGH )
     e32:	8b 81       	ldd	r24, Y+3	; 0x03
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	09 f0       	breq	.+2      	; 0xe3a <GPIO_writePin+0x100>
     e38:	72 c0       	rjmp	.+228    	; 0xf1e <GPIO_writePin+0x1e4>
						{

							/* Common Macro function to Set a bit to 1*/
							SET_BIT( PORTB,a_pinNum );
     e3a:	a8 e3       	ldi	r26, 0x38	; 56
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e8 e3       	ldi	r30, 0x38	; 56
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x11e>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x11a>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	5e c0       	rjmp	.+188    	; 0xf1e <GPIO_writePin+0x1e4>
						break;

					case PORTC_ID :

						/*------- Selecting the value you will write on a Pin in --------*/
						if( a_value == LOGIC_LOW )
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	88 23       	and	r24, r24
     e66:	a9 f4       	brne	.+42     	; 0xe92 <GPIO_writePin+0x158>
						{

							/* Common Macro function to clear a bit*/
							 CLEAR_BIT( PORTC,a_pinNum );
     e68:	a5 e3       	ldi	r26, 0x35	; 53
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e5 e3       	ldi	r30, 0x35	; 53
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <GPIO_writePin+0x14c>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <GPIO_writePin+0x148>
     e8a:	80 95       	com	r24
     e8c:	84 23       	and	r24, r20
     e8e:	8c 93       	st	X, r24
     e90:	46 c0       	rjmp	.+140    	; 0xf1e <GPIO_writePin+0x1e4>

						}

						else if ( a_value == LOGIC_HIGH )
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	81 30       	cpi	r24, 0x01	; 1
     e96:	09 f0       	breq	.+2      	; 0xe9a <GPIO_writePin+0x160>
     e98:	42 c0       	rjmp	.+132    	; 0xf1e <GPIO_writePin+0x1e4>
						{

							/* Common Macro function to Set a bit to 1*/
		   					 SET_BIT( PORTC,a_pinNum );
     e9a:	a5 e3       	ldi	r26, 0x35	; 53
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	e5 e3       	ldi	r30, 0x35	; 53
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	80 81       	ld	r24, Z
     ea4:	48 2f       	mov	r20, r24
     ea6:	8a 81       	ldd	r24, Y+2	; 0x02
     ea8:	28 2f       	mov	r18, r24
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	02 2e       	mov	r0, r18
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <GPIO_writePin+0x17e>
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	0a 94       	dec	r0
     eba:	e2 f7       	brpl	.-8      	; 0xeb4 <GPIO_writePin+0x17a>
     ebc:	84 2b       	or	r24, r20
     ebe:	8c 93       	st	X, r24
     ec0:	2e c0       	rjmp	.+92     	; 0xf1e <GPIO_writePin+0x1e4>
						break;

					case PORTD_ID :

						/*------- Selecting the value you will write on a Pin in --------*/
						if( a_value == LOGIC_LOW )
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	88 23       	and	r24, r24
     ec6:	a9 f4       	brne	.+42     	; 0xef2 <GPIO_writePin+0x1b8>
						{

							/* Common Macro function to clear a bit*/
							CLEAR_BIT( PORTD,a_pinNum );
     ec8:	a2 e3       	ldi	r26, 0x32	; 50
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e2 e3       	ldi	r30, 0x32	; 50
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	02 2e       	mov	r0, r18
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <GPIO_writePin+0x1ac>
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	0a 94       	dec	r0
     ee8:	e2 f7       	brpl	.-8      	; 0xee2 <GPIO_writePin+0x1a8>
     eea:	80 95       	com	r24
     eec:	84 23       	and	r24, r20
     eee:	8c 93       	st	X, r24
     ef0:	16 c0       	rjmp	.+44     	; 0xf1e <GPIO_writePin+0x1e4>

						}

						else if ( a_value == LOGIC_HIGH )
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	81 30       	cpi	r24, 0x01	; 1
     ef6:	99 f4       	brne	.+38     	; 0xf1e <GPIO_writePin+0x1e4>
						{

							/* Common Macro function to Set a bit to 1*/
							SET_BIT( PORTD,a_pinNum );
     ef8:	a2 e3       	ldi	r26, 0x32	; 50
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e2 e3       	ldi	r30, 0x32	; 50
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	48 2f       	mov	r20, r24
     f04:	8a 81       	ldd	r24, Y+2	; 0x02
     f06:	28 2f       	mov	r18, r24
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	02 2e       	mov	r0, r18
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <GPIO_writePin+0x1dc>
     f12:	88 0f       	add	r24, r24
     f14:	99 1f       	adc	r25, r25
     f16:	0a 94       	dec	r0
     f18:	e2 f7       	brpl	.-8      	; 0xf12 <GPIO_writePin+0x1d8>
     f1a:	84 2b       	or	r24, r20
     f1c:	8c 93       	st	X, r24
		}




}
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <GPIO_togglePin>:



void GPIO_togglePin(uint8 a_portNum,uint8 a_pinNum)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	00 d0       	rcall	.+0      	; 0xf34 <GPIO_togglePin+0x6>
     f34:	00 d0       	rcall	.+0      	; 0xf36 <GPIO_togglePin+0x8>
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
     f3a:	89 83       	std	Y+1, r24	; 0x01
     f3c:	6a 83       	std	Y+2, r22	; 0x02
	/* Checking the number given by the user is valid  for Port number and Pin number */

	if( a_portNum>=GPIO_NUM_OF_PORTS || a_pinNum>=GPIO_NUM_OF_PINS )
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	84 30       	cpi	r24, 0x04	; 4
     f42:	08 f0       	brcs	.+2      	; 0xf46 <GPIO_togglePin+0x18>
     f44:	72 c0       	rjmp	.+228    	; 0x102a <GPIO_togglePin+0xfc>
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	88 30       	cpi	r24, 0x08	; 8
     f4a:	08 f0       	brcs	.+2      	; 0xf4e <GPIO_togglePin+0x20>
     f4c:	6e c0       	rjmp	.+220    	; 0x102a <GPIO_togglePin+0xfc>
	/*------- If the number is within the range--------*/
		else
		{

		/*------- Selecting the Port you will toggle a Pin in --------*/
			switch ( a_portNum )
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	3c 83       	std	Y+4, r19	; 0x04
     f56:	2b 83       	std	Y+3, r18	; 0x03
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	9c 81       	ldd	r25, Y+4	; 0x04
     f5c:	81 30       	cpi	r24, 0x01	; 1
     f5e:	91 05       	cpc	r25, r1
     f60:	49 f1       	breq	.+82     	; 0xfb4 <GPIO_togglePin+0x86>
     f62:	2b 81       	ldd	r18, Y+3	; 0x03
     f64:	3c 81       	ldd	r19, Y+4	; 0x04
     f66:	22 30       	cpi	r18, 0x02	; 2
     f68:	31 05       	cpc	r19, r1
     f6a:	2c f4       	brge	.+10     	; 0xf76 <GPIO_togglePin+0x48>
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	9c 81       	ldd	r25, Y+4	; 0x04
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	61 f0       	breq	.+24     	; 0xf8c <GPIO_togglePin+0x5e>
     f74:	5a c0       	rjmp	.+180    	; 0x102a <GPIO_togglePin+0xfc>
     f76:	2b 81       	ldd	r18, Y+3	; 0x03
     f78:	3c 81       	ldd	r19, Y+4	; 0x04
     f7a:	22 30       	cpi	r18, 0x02	; 2
     f7c:	31 05       	cpc	r19, r1
     f7e:	71 f1       	breq	.+92     	; 0xfdc <GPIO_togglePin+0xae>
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	9c 81       	ldd	r25, Y+4	; 0x04
     f84:	83 30       	cpi	r24, 0x03	; 3
     f86:	91 05       	cpc	r25, r1
     f88:	e9 f1       	breq	.+122    	; 0x1004 <GPIO_togglePin+0xd6>
     f8a:	4f c0       	rjmp	.+158    	; 0x102a <GPIO_togglePin+0xfc>
			{
					case PORTA_ID :

				/* Common Macro function to Toggle a bit*/
					TOGGLE_BIT(PORTA,a_pinNum);
     f8c:	ab e3       	ldi	r26, 0x3B	; 59
     f8e:	b0 e0       	ldi	r27, 0x00	; 0
     f90:	eb e3       	ldi	r30, 0x3B	; 59
     f92:	f0 e0       	ldi	r31, 0x00	; 0
     f94:	80 81       	ld	r24, Z
     f96:	48 2f       	mov	r20, r24
     f98:	8a 81       	ldd	r24, Y+2	; 0x02
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	02 2e       	mov	r0, r18
     fa4:	02 c0       	rjmp	.+4      	; 0xfaa <GPIO_togglePin+0x7c>
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	0a 94       	dec	r0
     fac:	e2 f7       	brpl	.-8      	; 0xfa6 <GPIO_togglePin+0x78>
     fae:	84 27       	eor	r24, r20
     fb0:	8c 93       	st	X, r24
     fb2:	3b c0       	rjmp	.+118    	; 0x102a <GPIO_togglePin+0xfc>
						break;

					case PORTB_ID :

				/* Common Macro function to Toggle a bit*/
						TOGGLE_BIT(PORTB,a_pinNum);
     fb4:	a8 e3       	ldi	r26, 0x38	; 56
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	e8 e3       	ldi	r30, 0x38	; 56
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	48 2f       	mov	r20, r24
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	02 2e       	mov	r0, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <GPIO_togglePin+0xa4>
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	0a 94       	dec	r0
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <GPIO_togglePin+0xa0>
     fd6:	84 27       	eor	r24, r20
     fd8:	8c 93       	st	X, r24
     fda:	27 c0       	rjmp	.+78     	; 0x102a <GPIO_togglePin+0xfc>
						break;

					case PORTC_ID :

				/* Common Macro function to Toggle a bit*/
						TOGGLE_BIT(PORTC,a_pinNum);
     fdc:	a5 e3       	ldi	r26, 0x35	; 53
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	e5 e3       	ldi	r30, 0x35	; 53
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	48 2f       	mov	r20, r24
     fe8:	8a 81       	ldd	r24, Y+2	; 0x02
     fea:	28 2f       	mov	r18, r24
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <GPIO_togglePin+0xcc>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <GPIO_togglePin+0xc8>
     ffe:	84 27       	eor	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	13 c0       	rjmp	.+38     	; 0x102a <GPIO_togglePin+0xfc>
						break;

					case PORTD_ID :

				/* Common Macro function to Toggle a bit*/
						TOGGLE_BIT(PORTD,a_pinNum);
    1004:	a2 e3       	ldi	r26, 0x32	; 50
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e2 e3       	ldi	r30, 0x32	; 50
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8a 81       	ldd	r24, Y+2	; 0x02
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <GPIO_togglePin+0xf4>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <GPIO_togglePin+0xf0>
    1026:	84 27       	eor	r24, r20
    1028:	8c 93       	st	X, r24


		}


}
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	cf 91       	pop	r28
    1034:	df 91       	pop	r29
    1036:	08 95       	ret

00001038 <GPIO_readPin>:



/* Reading the value on an Input pin and returning it's value */
uint8 GPIO_readPin( uint8 a_portNum,uint8 a_pinNum )
{
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	00 d0       	rcall	.+0      	; 0x103e <GPIO_readPin+0x6>
    103e:	00 d0       	rcall	.+0      	; 0x1040 <GPIO_readPin+0x8>
    1040:	00 d0       	rcall	.+0      	; 0x1042 <GPIO_readPin+0xa>
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	8a 83       	std	Y+2, r24	; 0x02
    1048:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_pinValue = LOGIC_LOW;
    104a:	19 82       	std	Y+1, r1	; 0x01

	/* Checking the number given by the user is valid  for Port number and Pin number */
	if( a_portNum>=GPIO_NUM_OF_PORTS || a_pinNum>=GPIO_NUM_OF_PINS )
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	84 30       	cpi	r24, 0x04	; 4
    1050:	18 f4       	brcc	.+6      	; 0x1058 <GPIO_readPin+0x20>
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	88 30       	cpi	r24, 0x08	; 8
    1056:	18 f0       	brcs	.+6      	; 0x105e <GPIO_readPin+0x26>
	{

		/*------- If the number is not within the range--------*/

						return a_pinValue;
    1058:	29 81       	ldd	r18, Y+1	; 0x01
    105a:	2e 83       	std	Y+6, r18	; 0x06
    105c:	82 c0       	rjmp	.+260    	; 0x1162 <GPIO_readPin+0x12a>

	/*------- If the number is within the range--------*/
	else
	{
		/*------- Selecting the Port you will read a Pin from --------*/
		switch ( a_portNum )
    105e:	8a 81       	ldd	r24, Y+2	; 0x02
    1060:	48 2f       	mov	r20, r24
    1062:	50 e0       	ldi	r21, 0x00	; 0
    1064:	5d 83       	std	Y+5, r21	; 0x05
    1066:	4c 83       	std	Y+4, r20	; 0x04
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	9d 81       	ldd	r25, Y+5	; 0x05
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	91 05       	cpc	r25, r1
    1070:	79 f1       	breq	.+94     	; 0x10d0 <GPIO_readPin+0x98>
    1072:	2c 81       	ldd	r18, Y+4	; 0x04
    1074:	3d 81       	ldd	r19, Y+5	; 0x05
    1076:	22 30       	cpi	r18, 0x02	; 2
    1078:	31 05       	cpc	r19, r1
    107a:	34 f4       	brge	.+12     	; 0x1088 <GPIO_readPin+0x50>
    107c:	4c 81       	ldd	r20, Y+4	; 0x04
    107e:	5d 81       	ldd	r21, Y+5	; 0x05
    1080:	41 15       	cp	r20, r1
    1082:	51 05       	cpc	r21, r1
    1084:	69 f0       	breq	.+26     	; 0x10a0 <GPIO_readPin+0x68>
    1086:	6b c0       	rjmp	.+214    	; 0x115e <GPIO_readPin+0x126>
    1088:	8c 81       	ldd	r24, Y+4	; 0x04
    108a:	9d 81       	ldd	r25, Y+5	; 0x05
    108c:	82 30       	cpi	r24, 0x02	; 2
    108e:	91 05       	cpc	r25, r1
    1090:	b9 f1       	breq	.+110    	; 0x1100 <GPIO_readPin+0xc8>
    1092:	2c 81       	ldd	r18, Y+4	; 0x04
    1094:	3d 81       	ldd	r19, Y+5	; 0x05
    1096:	23 30       	cpi	r18, 0x03	; 3
    1098:	31 05       	cpc	r19, r1
    109a:	09 f4       	brne	.+2      	; 0x109e <GPIO_readPin+0x66>
    109c:	49 c0       	rjmp	.+146    	; 0x1130 <GPIO_readPin+0xf8>
    109e:	5f c0       	rjmp	.+190    	; 0x115e <GPIO_readPin+0x126>
		{
		case PORTA_ID :
		/*------- Checking the Pin value by a Common macro function--------*/
			if( BIT_IS_SET(PINA,a_pinNum) )
    10a0:	e9 e3       	ldi	r30, 0x39	; 57
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	88 2f       	mov	r24, r24
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	a9 01       	movw	r20, r18
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <GPIO_readPin+0x80>
    10b4:	55 95       	asr	r21
    10b6:	47 95       	ror	r20
    10b8:	8a 95       	dec	r24
    10ba:	e2 f7       	brpl	.-8      	; 0x10b4 <GPIO_readPin+0x7c>
    10bc:	ca 01       	movw	r24, r20
    10be:	81 70       	andi	r24, 0x01	; 1
    10c0:	90 70       	andi	r25, 0x00	; 0
    10c2:	88 23       	and	r24, r24
    10c4:	19 f0       	breq	.+6      	; 0x10cc <GPIO_readPin+0x94>
			{
				a_pinValue=LOGIC_HIGH;
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	89 83       	std	Y+1, r24	; 0x01
    10ca:	49 c0       	rjmp	.+146    	; 0x115e <GPIO_readPin+0x126>

			}
			else
				a_pinValue=LOGIC_LOW;
    10cc:	19 82       	std	Y+1, r1	; 0x01
    10ce:	47 c0       	rjmp	.+142    	; 0x115e <GPIO_readPin+0x126>

			break;

		case PORTB_ID :
			/*------- Checking the Pin value by a Common macro function--------*/
			if( BIT_IS_SET(PINB,a_pinNum) )
    10d0:	e6 e3       	ldi	r30, 0x36	; 54
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	88 2f       	mov	r24, r24
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	a9 01       	movw	r20, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <GPIO_readPin+0xb0>
    10e4:	55 95       	asr	r21
    10e6:	47 95       	ror	r20
    10e8:	8a 95       	dec	r24
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <GPIO_readPin+0xac>
    10ec:	ca 01       	movw	r24, r20
    10ee:	81 70       	andi	r24, 0x01	; 1
    10f0:	90 70       	andi	r25, 0x00	; 0
    10f2:	88 23       	and	r24, r24
    10f4:	19 f0       	breq	.+6      	; 0x10fc <GPIO_readPin+0xc4>
			{
				a_pinValue=LOGIC_HIGH;
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	89 83       	std	Y+1, r24	; 0x01
    10fa:	31 c0       	rjmp	.+98     	; 0x115e <GPIO_readPin+0x126>

			}
			else
				a_pinValue=LOGIC_LOW;
    10fc:	19 82       	std	Y+1, r1	; 0x01
    10fe:	2f c0       	rjmp	.+94     	; 0x115e <GPIO_readPin+0x126>

					break;

		case PORTC_ID :
			/*------- Checking the Pin value by a Common macro function--------*/
			if( BIT_IS_SET(PINC,a_pinNum) )
    1100:	e3 e3       	ldi	r30, 0x33	; 51
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	88 2f       	mov	r24, r24
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	a9 01       	movw	r20, r18
    1112:	02 c0       	rjmp	.+4      	; 0x1118 <GPIO_readPin+0xe0>
    1114:	55 95       	asr	r21
    1116:	47 95       	ror	r20
    1118:	8a 95       	dec	r24
    111a:	e2 f7       	brpl	.-8      	; 0x1114 <GPIO_readPin+0xdc>
    111c:	ca 01       	movw	r24, r20
    111e:	81 70       	andi	r24, 0x01	; 1
    1120:	90 70       	andi	r25, 0x00	; 0
    1122:	88 23       	and	r24, r24
    1124:	19 f0       	breq	.+6      	; 0x112c <GPIO_readPin+0xf4>
			{
				a_pinValue=LOGIC_HIGH;
    1126:	81 e0       	ldi	r24, 0x01	; 1
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	19 c0       	rjmp	.+50     	; 0x115e <GPIO_readPin+0x126>

			}
			else
				a_pinValue=LOGIC_LOW;
    112c:	19 82       	std	Y+1, r1	; 0x01
    112e:	17 c0       	rjmp	.+46     	; 0x115e <GPIO_readPin+0x126>
					break;

		case PORTD_ID :
			/*------- Checking the Pin value by a Common macro function--------*/

			if( BIT_IS_SET(PIND,a_pinNum) )
    1130:	e0 e3       	ldi	r30, 0x30	; 48
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	88 2f       	mov	r24, r24
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	a9 01       	movw	r20, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <GPIO_readPin+0x110>
    1144:	55 95       	asr	r21
    1146:	47 95       	ror	r20
    1148:	8a 95       	dec	r24
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <GPIO_readPin+0x10c>
    114c:	ca 01       	movw	r24, r20
    114e:	81 70       	andi	r24, 0x01	; 1
    1150:	90 70       	andi	r25, 0x00	; 0
    1152:	88 23       	and	r24, r24
    1154:	19 f0       	breq	.+6      	; 0x115c <GPIO_readPin+0x124>
			{
				a_pinValue=LOGIC_HIGH;
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	89 83       	std	Y+1, r24	; 0x01
    115a:	01 c0       	rjmp	.+2      	; 0x115e <GPIO_readPin+0x126>

			}
			else
				a_pinValue=LOGIC_LOW;
    115c:	19 82       	std	Y+1, r1	; 0x01
		}


	}

	return a_pinValue;
    115e:	59 81       	ldd	r21, Y+1	; 0x01
    1160:	5e 83       	std	Y+6, r21	; 0x06
    1162:	8e 81       	ldd	r24, Y+6	; 0x06
}
    1164:	26 96       	adiw	r28, 0x06	; 6
    1166:	0f b6       	in	r0, 0x3f	; 63
    1168:	f8 94       	cli
    116a:	de bf       	out	0x3e, r29	; 62
    116c:	0f be       	out	0x3f, r0	; 63
    116e:	cd bf       	out	0x3d, r28	; 61
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <GPIO_setupPortDirection>:


/* Setting the whole Port to be either Input or Output Port
 * */
void GPIO_setupPortDirection( uint8 a_portNum,GPIO_PortDirectionType a_direction )
{
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	00 d0       	rcall	.+0      	; 0x117c <GPIO_setupPortDirection+0x6>
    117c:	00 d0       	rcall	.+0      	; 0x117e <GPIO_setupPortDirection+0x8>
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	6a 83       	std	Y+2, r22	; 0x02
	/* Checking the number given by the user is valid  for Port number and Pin number
	 *
	 *
	 *  Direction of Port must be either PORT_INPUT or PORT_OUTPUT
	 *  */
	if( a_portNum>=GPIO_NUM_OF_PORTS || ((a_direction !=PORT_INPUT ) && (a_direction !=PORT_OUTPUT )) )
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	84 30       	cpi	r24, 0x04	; 4
    118a:	c0 f5       	brcc	.+112    	; 0x11fc <GPIO_setupPortDirection+0x86>
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	88 23       	and	r24, r24
    1190:	19 f0       	breq	.+6      	; 0x1198 <GPIO_setupPortDirection+0x22>
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	8f 3f       	cpi	r24, 0xFF	; 255
    1196:	91 f5       	brne	.+100    	; 0x11fc <GPIO_setupPortDirection+0x86>

		/*------- If the number is within the range--------*/
	else
	{
		/*------- Selecting the Port you will set the it's Direction --------*/
		switch ( a_portNum )
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	3c 83       	std	Y+4, r19	; 0x04
    11a0:	2b 83       	std	Y+3, r18	; 0x03
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	9c 81       	ldd	r25, Y+4	; 0x04
    11a6:	81 30       	cpi	r24, 0x01	; 1
    11a8:	91 05       	cpc	r25, r1
    11aa:	d1 f0       	breq	.+52     	; 0x11e0 <GPIO_setupPortDirection+0x6a>
    11ac:	2b 81       	ldd	r18, Y+3	; 0x03
    11ae:	3c 81       	ldd	r19, Y+4	; 0x04
    11b0:	22 30       	cpi	r18, 0x02	; 2
    11b2:	31 05       	cpc	r19, r1
    11b4:	2c f4       	brge	.+10     	; 0x11c0 <GPIO_setupPortDirection+0x4a>
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	61 f0       	breq	.+24     	; 0x11d6 <GPIO_setupPortDirection+0x60>
    11be:	1e c0       	rjmp	.+60     	; 0x11fc <GPIO_setupPortDirection+0x86>
    11c0:	2b 81       	ldd	r18, Y+3	; 0x03
    11c2:	3c 81       	ldd	r19, Y+4	; 0x04
    11c4:	22 30       	cpi	r18, 0x02	; 2
    11c6:	31 05       	cpc	r19, r1
    11c8:	81 f0       	breq	.+32     	; 0x11ea <GPIO_setupPortDirection+0x74>
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	9c 81       	ldd	r25, Y+4	; 0x04
    11ce:	83 30       	cpi	r24, 0x03	; 3
    11d0:	91 05       	cpc	r25, r1
    11d2:	81 f0       	breq	.+32     	; 0x11f4 <GPIO_setupPortDirection+0x7e>
    11d4:	13 c0       	rjmp	.+38     	; 0x11fc <GPIO_setupPortDirection+0x86>
		{
				case PORTA_ID :

				DDRA=a_direction;
    11d6:	ea e3       	ldi	r30, 0x3A	; 58
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	80 83       	st	Z, r24
    11de:	0e c0       	rjmp	.+28     	; 0x11fc <GPIO_setupPortDirection+0x86>

					break;

				case PORTB_ID :

				DDRB=a_direction;
    11e0:	e7 e3       	ldi	r30, 0x37	; 55
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	80 83       	st	Z, r24
    11e8:	09 c0       	rjmp	.+18     	; 0x11fc <GPIO_setupPortDirection+0x86>

					break;

				case PORTC_ID :

				DDRC=a_direction;
    11ea:	e4 e3       	ldi	r30, 0x34	; 52
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	80 83       	st	Z, r24
    11f2:	04 c0       	rjmp	.+8      	; 0x11fc <GPIO_setupPortDirection+0x86>

					break;

				case PORTD_ID :

				DDRD=a_direction;
    11f4:	e1 e3       	ldi	r30, 0x31	; 49
    11f6:	f0 e0       	ldi	r31, 0x00	; 0
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	80 83       	st	Z, r24





}
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <GPIO_writePort>:



/* Writing any value ranged between (0000 0000 "0x00") to (1111 1111 "0xFF") on a Port */
void GPIO_writePort( uint8 a_portNum,uint8 a_value )
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	00 d0       	rcall	.+0      	; 0x1210 <GPIO_writePort+0x6>
    1210:	00 d0       	rcall	.+0      	; 0x1212 <GPIO_writePort+0x8>
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	89 83       	std	Y+1, r24	; 0x01
    1218:	6a 83       	std	Y+2, r22	; 0x02

	/* Checking the number given by the user is valid  for Port number and Pin number
	 *
	 */
	if( a_portNum>=GPIO_NUM_OF_PORTS )
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	84 30       	cpi	r24, 0x04	; 4
    121e:	90 f5       	brcc	.+100    	; 0x1284 <GPIO_writePort+0x7a>
			/*------- If the number is within the range--------*/
	else
	{

	/*------- Selecting the Port you will write a value on --------*/
	switch (a_portNum)
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	3c 83       	std	Y+4, r19	; 0x04
    1228:	2b 83       	std	Y+3, r18	; 0x03
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	9c 81       	ldd	r25, Y+4	; 0x04
    122e:	81 30       	cpi	r24, 0x01	; 1
    1230:	91 05       	cpc	r25, r1
    1232:	d1 f0       	breq	.+52     	; 0x1268 <GPIO_writePort+0x5e>
    1234:	2b 81       	ldd	r18, Y+3	; 0x03
    1236:	3c 81       	ldd	r19, Y+4	; 0x04
    1238:	22 30       	cpi	r18, 0x02	; 2
    123a:	31 05       	cpc	r19, r1
    123c:	2c f4       	brge	.+10     	; 0x1248 <GPIO_writePort+0x3e>
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	9c 81       	ldd	r25, Y+4	; 0x04
    1242:	00 97       	sbiw	r24, 0x00	; 0
    1244:	61 f0       	breq	.+24     	; 0x125e <GPIO_writePort+0x54>
    1246:	1e c0       	rjmp	.+60     	; 0x1284 <GPIO_writePort+0x7a>
    1248:	2b 81       	ldd	r18, Y+3	; 0x03
    124a:	3c 81       	ldd	r19, Y+4	; 0x04
    124c:	22 30       	cpi	r18, 0x02	; 2
    124e:	31 05       	cpc	r19, r1
    1250:	81 f0       	breq	.+32     	; 0x1272 <GPIO_writePort+0x68>
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	9c 81       	ldd	r25, Y+4	; 0x04
    1256:	83 30       	cpi	r24, 0x03	; 3
    1258:	91 05       	cpc	r25, r1
    125a:	81 f0       	breq	.+32     	; 0x127c <GPIO_writePort+0x72>
    125c:	13 c0       	rjmp	.+38     	; 0x1284 <GPIO_writePort+0x7a>
			{
			case PORTA_ID :
				PORTA=a_value;
    125e:	eb e3       	ldi	r30, 0x3B	; 59
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	80 83       	st	Z, r24
    1266:	0e c0       	rjmp	.+28     	; 0x1284 <GPIO_writePort+0x7a>
				break;

			case PORTB_ID :
				PORTB=a_value;
    1268:	e8 e3       	ldi	r30, 0x38	; 56
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	8a 81       	ldd	r24, Y+2	; 0x02
    126e:	80 83       	st	Z, r24
    1270:	09 c0       	rjmp	.+18     	; 0x1284 <GPIO_writePort+0x7a>
						break;

			case PORTC_ID :
				PORTC=a_value;
    1272:	e5 e3       	ldi	r30, 0x35	; 53
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	80 83       	st	Z, r24
    127a:	04 c0       	rjmp	.+8      	; 0x1284 <GPIO_writePort+0x7a>
						break;

			case PORTD_ID :
				PORTD=a_value;
    127c:	e2 e3       	ldi	r30, 0x32	; 50
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	80 83       	st	Z, r24
						break;

			}
	}

}
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret

00001292 <GPIO_readPort>:


/* Reading any value ranged between (0000 0000 "0x00") to (1111 1111 "0xFF") on a Port */
uint8 GPIO_readPort(uint8 a_portNum)
{
    1292:	df 93       	push	r29
    1294:	cf 93       	push	r28
    1296:	00 d0       	rcall	.+0      	; 0x1298 <GPIO_readPort+0x6>
    1298:	00 d0       	rcall	.+0      	; 0x129a <GPIO_readPort+0x8>
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_portValue;
	/* Checking the number given by the user is valid  for Port number and Pin number */
	if( a_portNum>=GPIO_NUM_OF_PORTS )
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	84 30       	cpi	r24, 0x04	; 4
    12a4:	90 f5       	brcc	.+100    	; 0x130a <GPIO_readPort+0x78>
				/*------- If the number is within the range--------*/
		else
		{

			/*------- Selecting the Port you will read a value from --------*/
		switch (a_portNum)
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	3c 83       	std	Y+4, r19	; 0x04
    12ae:	2b 83       	std	Y+3, r18	; 0x03
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	9c 81       	ldd	r25, Y+4	; 0x04
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	91 05       	cpc	r25, r1
    12b8:	d1 f0       	breq	.+52     	; 0x12ee <GPIO_readPort+0x5c>
    12ba:	2b 81       	ldd	r18, Y+3	; 0x03
    12bc:	3c 81       	ldd	r19, Y+4	; 0x04
    12be:	22 30       	cpi	r18, 0x02	; 2
    12c0:	31 05       	cpc	r19, r1
    12c2:	2c f4       	brge	.+10     	; 0x12ce <GPIO_readPort+0x3c>
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	9c 81       	ldd	r25, Y+4	; 0x04
    12c8:	00 97       	sbiw	r24, 0x00	; 0
    12ca:	61 f0       	breq	.+24     	; 0x12e4 <GPIO_readPort+0x52>
    12cc:	1e c0       	rjmp	.+60     	; 0x130a <GPIO_readPort+0x78>
    12ce:	2b 81       	ldd	r18, Y+3	; 0x03
    12d0:	3c 81       	ldd	r19, Y+4	; 0x04
    12d2:	22 30       	cpi	r18, 0x02	; 2
    12d4:	31 05       	cpc	r19, r1
    12d6:	81 f0       	breq	.+32     	; 0x12f8 <GPIO_readPort+0x66>
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	9c 81       	ldd	r25, Y+4	; 0x04
    12dc:	83 30       	cpi	r24, 0x03	; 3
    12de:	91 05       	cpc	r25, r1
    12e0:	81 f0       	breq	.+32     	; 0x1302 <GPIO_readPort+0x70>
    12e2:	13 c0       	rjmp	.+38     	; 0x130a <GPIO_readPort+0x78>
				{
				case PORTA_ID :

					a_portValue=PINA;
    12e4:	e9 e3       	ldi	r30, 0x39	; 57
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	89 83       	std	Y+1, r24	; 0x01
    12ec:	0e c0       	rjmp	.+28     	; 0x130a <GPIO_readPort+0x78>

					break;

				case PORTB_ID :

					a_portValue=PINB;
    12ee:	e6 e3       	ldi	r30, 0x36	; 54
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	09 c0       	rjmp	.+18     	; 0x130a <GPIO_readPort+0x78>

					break;

				case PORTC_ID :

					a_portValue=PINC;
    12f8:	e3 e3       	ldi	r30, 0x33	; 51
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	04 c0       	rjmp	.+8      	; 0x130a <GPIO_readPort+0x78>

					break;

				case PORTD_ID :

					a_portValue=PIND;
    1302:	e0 e3       	ldi	r30, 0x30	; 48
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	89 83       	std	Y+1, r24	; 0x01
					;
				}

		}

	return a_portValue;
    130a:	89 81       	ldd	r24, Y+1	; 0x01

}
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	cf 91       	pop	r28
    1316:	df 91       	pop	r29
    1318:	08 95       	ret

0000131a <KEYPAD_init>:
#include"Keypad.h"
#include<util/delay.h>


void KEYPAD_init(void)
{
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	cd b7       	in	r28, 0x3d	; 61
    1320:	de b7       	in	r29, 0x3e	; 62
GPIO_setupPinDirection(PORT_COLUMNID,PIN1_COLUMNID, PIN_INPUT);
    1322:	83 e0       	ldi	r24, 0x03	; 3
    1324:	62 e0       	ldi	r22, 0x02	; 2
    1326:	40 e0       	ldi	r20, 0x00	; 0
    1328:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
GPIO_setupPinDirection(PORT_COLUMNID,PIN2_COLUMNID, PIN_INPUT);
    132c:	83 e0       	ldi	r24, 0x03	; 3
    132e:	63 e0       	ldi	r22, 0x03	; 3
    1330:	40 e0       	ldi	r20, 0x00	; 0
    1332:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
GPIO_setupPinDirection(PORT_COLUMNID,PIN3_COLUMNID, PIN_INPUT);
    1336:	83 e0       	ldi	r24, 0x03	; 3
    1338:	64 e0       	ldi	r22, 0x04	; 4
    133a:	40 e0       	ldi	r20, 0x00	; 0
    133c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if ( KEYPAD_4x4 == 1)
{
	GPIO_setupPinDirection(PORT_COLUMNID,PIN4_COLUMNID, PIN_INPUT);
    1340:	83 e0       	ldi	r24, 0x03	; 3
    1342:	65 e0       	ldi	r22, 0x05	; 5
    1344:	40 e0       	ldi	r20, 0x00	; 0
    1346:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
}
#elif( KEYPAD_4x3 == 1)
/* Do nothing*/
#endif
}
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <KEYPAD_getPressedKey>:
uint8 KEYPAD_getPressedKey(void)
{
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	67 97       	sbiw	r28, 0x17	; 23
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
		uint8 a_row,a_col,a_colSel;
		 	GPIO_setupPinDirection(PORT_ROWID ,PIN1_ROWID, PIN_INPUT);
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	64 e0       	ldi	r22, 0x04	; 4
    1368:	40 e0       	ldi	r20, 0x00	; 0
    136a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			GPIO_setupPinDirection(PORT_ROWID ,PIN2_ROWID, PIN_INPUT);
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	65 e0       	ldi	r22, 0x05	; 5
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			GPIO_setupPinDirection(PORT_ROWID ,PIN3_ROWID, PIN_INPUT);
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	66 e0       	ldi	r22, 0x06	; 6
    137c:	40 e0       	ldi	r20, 0x00	; 0
    137e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			GPIO_setupPinDirection(PORT_ROWID ,PIN4_ROWID, PIN_INPUT);
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	67 e0       	ldi	r22, 0x07	; 7
    1386:	40 e0       	ldi	r20, 0x00	; 0
    1388:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
while(1){
	for(a_row=0;a_row<ROWNUM; a_row++)
    138c:	19 8a       	std	Y+17, r1	; 0x11
    138e:	44 c1       	rjmp	.+648    	; 0x1618 <KEYPAD_getPressedKey+0x2c8>
	{
		switch (a_row)
    1390:	89 89       	ldd	r24, Y+17	; 0x11
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	3f 8b       	std	Y+23, r19	; 0x17
    1398:	2e 8b       	std	Y+22, r18	; 0x16
    139a:	8e 89       	ldd	r24, Y+22	; 0x16
    139c:	9f 89       	ldd	r25, Y+23	; 0x17
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	91 05       	cpc	r25, r1
    13a2:	01 f1       	breq	.+64     	; 0x13e4 <KEYPAD_getPressedKey+0x94>
    13a4:	2e 89       	ldd	r18, Y+22	; 0x16
    13a6:	3f 89       	ldd	r19, Y+23	; 0x17
    13a8:	22 30       	cpi	r18, 0x02	; 2
    13aa:	31 05       	cpc	r19, r1
    13ac:	2c f4       	brge	.+10     	; 0x13b8 <KEYPAD_getPressedKey+0x68>
    13ae:	8e 89       	ldd	r24, Y+22	; 0x16
    13b0:	9f 89       	ldd	r25, Y+23	; 0x17
    13b2:	00 97       	sbiw	r24, 0x00	; 0
    13b4:	61 f0       	breq	.+24     	; 0x13ce <KEYPAD_getPressedKey+0x7e>
    13b6:	36 c0       	rjmp	.+108    	; 0x1424 <KEYPAD_getPressedKey+0xd4>
    13b8:	2e 89       	ldd	r18, Y+22	; 0x16
    13ba:	3f 89       	ldd	r19, Y+23	; 0x17
    13bc:	22 30       	cpi	r18, 0x02	; 2
    13be:	31 05       	cpc	r19, r1
    13c0:	e1 f0       	breq	.+56     	; 0x13fa <KEYPAD_getPressedKey+0xaa>
    13c2:	8e 89       	ldd	r24, Y+22	; 0x16
    13c4:	9f 89       	ldd	r25, Y+23	; 0x17
    13c6:	83 30       	cpi	r24, 0x03	; 3
    13c8:	91 05       	cpc	r25, r1
    13ca:	11 f1       	breq	.+68     	; 0x1410 <KEYPAD_getPressedKey+0xc0>
    13cc:	2b c0       	rjmp	.+86     	; 0x1424 <KEYPAD_getPressedKey+0xd4>
		{
		case 0 :
			GPIO_setupPinDirection(PORT_ROWID,PIN1_ROWID, PIN_OUTPUT);
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	64 e0       	ldi	r22, 0x04	; 4
    13d2:	41 e0       	ldi	r20, 0x01	; 1
    13d4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			GPIO_writePin(PORT_ROWID,PIN1_ROWID,WRITEVALUE);
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	64 e0       	ldi	r22, 0x04	; 4
    13dc:	40 e0       	ldi	r20, 0x00	; 0
    13de:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
    13e2:	20 c0       	rjmp	.+64     	; 0x1424 <KEYPAD_getPressedKey+0xd4>
			break;
		case 1 :
		    GPIO_setupPinDirection(PORT_ROWID,PIN2_ROWID, PIN_OUTPUT);
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	65 e0       	ldi	r22, 0x05	; 5
    13e8:	41 e0       	ldi	r20, 0x01	; 1
    13ea:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			GPIO_writePin(PORT_ROWID,PIN2_ROWID,WRITEVALUE);
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	65 e0       	ldi	r22, 0x05	; 5
    13f2:	40 e0       	ldi	r20, 0x00	; 0
    13f4:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
    13f8:	15 c0       	rjmp	.+42     	; 0x1424 <KEYPAD_getPressedKey+0xd4>
			break;
		case 2:
			GPIO_setupPinDirection(PORT_ROWID,PIN3_ROWID, PIN_OUTPUT);
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	66 e0       	ldi	r22, 0x06	; 6
    13fe:	41 e0       	ldi	r20, 0x01	; 1
    1400:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			GPIO_writePin(PORT_ROWID,PIN3_ROWID,WRITEVALUE);
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	66 e0       	ldi	r22, 0x06	; 6
    1408:	40 e0       	ldi	r20, 0x00	; 0
    140a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
    140e:	0a c0       	rjmp	.+20     	; 0x1424 <KEYPAD_getPressedKey+0xd4>
			break;
		case 3:
			GPIO_setupPinDirection(PORT_ROWID,PIN4_ROWID, PIN_OUTPUT);
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	67 e0       	ldi	r22, 0x07	; 7
    1414:	41 e0       	ldi	r20, 0x01	; 1
    1416:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
			GPIO_writePin(PORT_ROWID,PIN4_ROWID,WRITEVALUE);
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	67 e0       	ldi	r22, 0x07	; 7
    141e:	40 e0       	ldi	r20, 0x00	; 0
    1420:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
			break;
		default:
			;
		}

		for(a_col=0;a_col<COLNUM; a_col++)
    1424:	18 8a       	std	Y+16, r1	; 0x10
    1426:	49 c0       	rjmp	.+146    	; 0x14ba <KEYPAD_getPressedKey+0x16a>
		{
			switch (a_col)
    1428:	88 89       	ldd	r24, Y+16	; 0x10
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	3d 8b       	std	Y+21, r19	; 0x15
    1430:	2c 8b       	std	Y+20, r18	; 0x14
    1432:	8c 89       	ldd	r24, Y+20	; 0x14
    1434:	9d 89       	ldd	r25, Y+21	; 0x15
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	91 05       	cpc	r25, r1
    143a:	c1 f0       	breq	.+48     	; 0x146c <KEYPAD_getPressedKey+0x11c>
    143c:	2c 89       	ldd	r18, Y+20	; 0x14
    143e:	3d 89       	ldd	r19, Y+21	; 0x15
    1440:	22 30       	cpi	r18, 0x02	; 2
    1442:	31 05       	cpc	r19, r1
    1444:	2c f4       	brge	.+10     	; 0x1450 <KEYPAD_getPressedKey+0x100>
    1446:	8c 89       	ldd	r24, Y+20	; 0x14
    1448:	9d 89       	ldd	r25, Y+21	; 0x15
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	61 f0       	breq	.+24     	; 0x1466 <KEYPAD_getPressedKey+0x116>
    144e:	16 c0       	rjmp	.+44     	; 0x147c <KEYPAD_getPressedKey+0x12c>
    1450:	2c 89       	ldd	r18, Y+20	; 0x14
    1452:	3d 89       	ldd	r19, Y+21	; 0x15
    1454:	22 30       	cpi	r18, 0x02	; 2
    1456:	31 05       	cpc	r19, r1
    1458:	61 f0       	breq	.+24     	; 0x1472 <KEYPAD_getPressedKey+0x122>
    145a:	8c 89       	ldd	r24, Y+20	; 0x14
    145c:	9d 89       	ldd	r25, Y+21	; 0x15
    145e:	83 30       	cpi	r24, 0x03	; 3
    1460:	91 05       	cpc	r25, r1
    1462:	51 f0       	breq	.+20     	; 0x1478 <KEYPAD_getPressedKey+0x128>
    1464:	0b c0       	rjmp	.+22     	; 0x147c <KEYPAD_getPressedKey+0x12c>
			{
			case 0 :
				a_colSel=PIN1_COLUMNID;
    1466:	82 e0       	ldi	r24, 0x02	; 2
    1468:	8f 87       	std	Y+15, r24	; 0x0f
    146a:	08 c0       	rjmp	.+16     	; 0x147c <KEYPAD_getPressedKey+0x12c>
				break;
			case 1 :
				a_colSel=PIN2_COLUMNID;
    146c:	83 e0       	ldi	r24, 0x03	; 3
    146e:	8f 87       	std	Y+15, r24	; 0x0f
    1470:	05 c0       	rjmp	.+10     	; 0x147c <KEYPAD_getPressedKey+0x12c>
				break;
			case 2 :
				a_colSel=PIN3_COLUMNID;
    1472:	84 e0       	ldi	r24, 0x04	; 4
    1474:	8f 87       	std	Y+15, r24	; 0x0f
    1476:	02 c0       	rjmp	.+4      	; 0x147c <KEYPAD_getPressedKey+0x12c>
				break;
			#if(KEYPAD_4x4)
			case 3 :
				a_colSel=PIN4_COLUMNID;
    1478:	85 e0       	ldi	r24, 0x05	; 5
    147a:	8f 87       	std	Y+15, r24	; 0x0f
				break;

			#endif

			}
			if(GPIO_readPin(PORT_COLUMNID,a_colSel) == COMPVALUE)
    147c:	83 e0       	ldi	r24, 0x03	; 3
    147e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1480:	0e 94 1c 08 	call	0x1038	; 0x1038 <GPIO_readPin>
    1484:	88 23       	and	r24, r24
    1486:	b1 f4       	brne	.+44     	; 0x14b4 <KEYPAD_getPressedKey+0x164>
			{

				return  KEYPAD_adjustKeyNumber(BUTTON_POSITION);
    1488:	89 89       	ldd	r24, Y+17	; 0x11
    148a:	88 2f       	mov	r24, r24
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	98 2f       	mov	r25, r24
    1498:	88 89       	ldd	r24, Y+16	; 0x10
    149a:	89 0f       	add	r24, r25
    149c:	8f 5f       	subi	r24, 0xFF	; 255
    149e:	0e 94 11 0b 	call	0x1622	; 0x1622 <KEYPAD_adjustKeyNumber>

	_delay_ms(5);
	}
}

}
    14a2:	67 96       	adiw	r28, 0x17	; 23
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	f8 94       	cli
    14a8:	de bf       	out	0x3e, r29	; 62
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	cd bf       	out	0x3d, r28	; 61
    14ae:	cf 91       	pop	r28
    14b0:	df 91       	pop	r29
    14b2:	08 95       	ret
			break;
		default:
			;
		}

		for(a_col=0;a_col<COLNUM; a_col++)
    14b4:	88 89       	ldd	r24, Y+16	; 0x10
    14b6:	8f 5f       	subi	r24, 0xFF	; 255
    14b8:	88 8b       	std	Y+16, r24	; 0x10
    14ba:	88 89       	ldd	r24, Y+16	; 0x10
    14bc:	84 30       	cpi	r24, 0x04	; 4
    14be:	08 f4       	brcc	.+2      	; 0x14c2 <KEYPAD_getPressedKey+0x172>
    14c0:	b3 cf       	rjmp	.-154    	; 0x1428 <KEYPAD_getPressedKey+0xd8>
				return  KEYPAD_adjustKeyNumber(BUTTON_POSITION);
			}


		}
		switch (a_row)
    14c2:	89 89       	ldd	r24, Y+17	; 0x11
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	3b 8b       	std	Y+19, r19	; 0x13
    14ca:	2a 8b       	std	Y+18, r18	; 0x12
    14cc:	8a 89       	ldd	r24, Y+18	; 0x12
    14ce:	9b 89       	ldd	r25, Y+19	; 0x13
    14d0:	81 30       	cpi	r24, 0x01	; 1
    14d2:	91 05       	cpc	r25, r1
    14d4:	d9 f0       	breq	.+54     	; 0x150c <KEYPAD_getPressedKey+0x1bc>
    14d6:	2a 89       	ldd	r18, Y+18	; 0x12
    14d8:	3b 89       	ldd	r19, Y+19	; 0x13
    14da:	22 30       	cpi	r18, 0x02	; 2
    14dc:	31 05       	cpc	r19, r1
    14de:	2c f4       	brge	.+10     	; 0x14ea <KEYPAD_getPressedKey+0x19a>
    14e0:	8a 89       	ldd	r24, Y+18	; 0x12
    14e2:	9b 89       	ldd	r25, Y+19	; 0x13
    14e4:	00 97       	sbiw	r24, 0x00	; 0
    14e6:	61 f0       	breq	.+24     	; 0x1500 <KEYPAD_getPressedKey+0x1b0>
    14e8:	22 c0       	rjmp	.+68     	; 0x152e <KEYPAD_getPressedKey+0x1de>
    14ea:	2a 89       	ldd	r18, Y+18	; 0x12
    14ec:	3b 89       	ldd	r19, Y+19	; 0x13
    14ee:	22 30       	cpi	r18, 0x02	; 2
    14f0:	31 05       	cpc	r19, r1
    14f2:	91 f0       	breq	.+36     	; 0x1518 <KEYPAD_getPressedKey+0x1c8>
    14f4:	8a 89       	ldd	r24, Y+18	; 0x12
    14f6:	9b 89       	ldd	r25, Y+19	; 0x13
    14f8:	83 30       	cpi	r24, 0x03	; 3
    14fa:	91 05       	cpc	r25, r1
    14fc:	99 f0       	breq	.+38     	; 0x1524 <KEYPAD_getPressedKey+0x1d4>
    14fe:	17 c0       	rjmp	.+46     	; 0x152e <KEYPAD_getPressedKey+0x1de>
				{
		case 0 :
			GPIO_setupPinDirection(PORT_ROWID,PIN1_ROWID, PIN_INPUT);
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	64 e0       	ldi	r22, 0x04	; 4
    1504:	40 e0       	ldi	r20, 0x00	; 0
    1506:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    150a:	11 c0       	rjmp	.+34     	; 0x152e <KEYPAD_getPressedKey+0x1de>
			break;
		case 1 :
			GPIO_setupPinDirection(PORT_ROWID,PIN2_ROWID, PIN_INPUT);
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	65 e0       	ldi	r22, 0x05	; 5
    1510:	40 e0       	ldi	r20, 0x00	; 0
    1512:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1516:	0b c0       	rjmp	.+22     	; 0x152e <KEYPAD_getPressedKey+0x1de>
			break;
		case 2:
			GPIO_setupPinDirection(PORT_ROWID,PIN3_ROWID, PIN_INPUT);
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	66 e0       	ldi	r22, 0x06	; 6
    151c:	40 e0       	ldi	r20, 0x00	; 0
    151e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1522:	05 c0       	rjmp	.+10     	; 0x152e <KEYPAD_getPressedKey+0x1de>
			break;
		case 3:
			GPIO_setupPinDirection(PORT_ROWID,PIN4_ROWID, PIN_INPUT);
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	67 e0       	ldi	r22, 0x07	; 7
    1528:	40 e0       	ldi	r20, 0x00	; 0
    152a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	a0 ea       	ldi	r26, 0xA0	; 160
    1534:	b0 e4       	ldi	r27, 0x40	; 64
    1536:	8b 87       	std	Y+11, r24	; 0x0b
    1538:	9c 87       	std	Y+12, r25	; 0x0c
    153a:	ad 87       	std	Y+13, r26	; 0x0d
    153c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    153e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1540:	7c 85       	ldd	r23, Y+12	; 0x0c
    1542:	8d 85       	ldd	r24, Y+13	; 0x0d
    1544:	9e 85       	ldd	r25, Y+14	; 0x0e
    1546:	20 e0       	ldi	r18, 0x00	; 0
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	4a e7       	ldi	r20, 0x7A	; 122
    154c:	53 e4       	ldi	r21, 0x43	; 67
    154e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	8f 83       	std	Y+7, r24	; 0x07
    1558:	98 87       	std	Y+8, r25	; 0x08
    155a:	a9 87       	std	Y+9, r26	; 0x09
    155c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    155e:	6f 81       	ldd	r22, Y+7	; 0x07
    1560:	78 85       	ldd	r23, Y+8	; 0x08
    1562:	89 85       	ldd	r24, Y+9	; 0x09
    1564:	9a 85       	ldd	r25, Y+10	; 0x0a
    1566:	20 e0       	ldi	r18, 0x00	; 0
    1568:	30 e0       	ldi	r19, 0x00	; 0
    156a:	40 e8       	ldi	r20, 0x80	; 128
    156c:	5f e3       	ldi	r21, 0x3F	; 63
    156e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1572:	88 23       	and	r24, r24
    1574:	2c f4       	brge	.+10     	; 0x1580 <KEYPAD_getPressedKey+0x230>
		__ticks = 1;
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	9e 83       	std	Y+6, r25	; 0x06
    157c:	8d 83       	std	Y+5, r24	; 0x05
    157e:	3f c0       	rjmp	.+126    	; 0x15fe <KEYPAD_getPressedKey+0x2ae>
	else if (__tmp > 65535)
    1580:	6f 81       	ldd	r22, Y+7	; 0x07
    1582:	78 85       	ldd	r23, Y+8	; 0x08
    1584:	89 85       	ldd	r24, Y+9	; 0x09
    1586:	9a 85       	ldd	r25, Y+10	; 0x0a
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	3f ef       	ldi	r19, 0xFF	; 255
    158c:	4f e7       	ldi	r20, 0x7F	; 127
    158e:	57 e4       	ldi	r21, 0x47	; 71
    1590:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1594:	18 16       	cp	r1, r24
    1596:	4c f5       	brge	.+82     	; 0x15ea <KEYPAD_getPressedKey+0x29a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1598:	6b 85       	ldd	r22, Y+11	; 0x0b
    159a:	7c 85       	ldd	r23, Y+12	; 0x0c
    159c:	8d 85       	ldd	r24, Y+13	; 0x0d
    159e:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a0:	20 e0       	ldi	r18, 0x00	; 0
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	40 e2       	ldi	r20, 0x20	; 32
    15a6:	51 e4       	ldi	r21, 0x41	; 65
    15a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15ac:	dc 01       	movw	r26, r24
    15ae:	cb 01       	movw	r24, r22
    15b0:	bc 01       	movw	r22, r24
    15b2:	cd 01       	movw	r24, r26
    15b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	9e 83       	std	Y+6, r25	; 0x06
    15be:	8d 83       	std	Y+5, r24	; 0x05
    15c0:	0f c0       	rjmp	.+30     	; 0x15e0 <KEYPAD_getPressedKey+0x290>
    15c2:	89 e1       	ldi	r24, 0x19	; 25
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	9c 83       	std	Y+4, r25	; 0x04
    15c8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	9c 81       	ldd	r25, Y+4	; 0x04
    15ce:	01 97       	sbiw	r24, 0x01	; 1
    15d0:	f1 f7       	brne	.-4      	; 0x15ce <KEYPAD_getPressedKey+0x27e>
    15d2:	9c 83       	std	Y+4, r25	; 0x04
    15d4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d6:	8d 81       	ldd	r24, Y+5	; 0x05
    15d8:	9e 81       	ldd	r25, Y+6	; 0x06
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	9e 83       	std	Y+6, r25	; 0x06
    15de:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e0:	8d 81       	ldd	r24, Y+5	; 0x05
    15e2:	9e 81       	ldd	r25, Y+6	; 0x06
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	69 f7       	brne	.-38     	; 0x15c2 <KEYPAD_getPressedKey+0x272>
    15e8:	14 c0       	rjmp	.+40     	; 0x1612 <KEYPAD_getPressedKey+0x2c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ea:	6f 81       	ldd	r22, Y+7	; 0x07
    15ec:	78 85       	ldd	r23, Y+8	; 0x08
    15ee:	89 85       	ldd	r24, Y+9	; 0x09
    15f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f6:	dc 01       	movw	r26, r24
    15f8:	cb 01       	movw	r24, r22
    15fa:	9e 83       	std	Y+6, r25	; 0x06
    15fc:	8d 83       	std	Y+5, r24	; 0x05
    15fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1600:	9e 81       	ldd	r25, Y+6	; 0x06
    1602:	9a 83       	std	Y+2, r25	; 0x02
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	9a 81       	ldd	r25, Y+2	; 0x02
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	f1 f7       	brne	.-4      	; 0x160a <KEYPAD_getPressedKey+0x2ba>
    160e:	9a 83       	std	Y+2, r25	; 0x02
    1610:	89 83       	std	Y+1, r24	; 0x01
		 	GPIO_setupPinDirection(PORT_ROWID ,PIN1_ROWID, PIN_INPUT);
			GPIO_setupPinDirection(PORT_ROWID ,PIN2_ROWID, PIN_INPUT);
			GPIO_setupPinDirection(PORT_ROWID ,PIN3_ROWID, PIN_INPUT);
			GPIO_setupPinDirection(PORT_ROWID ,PIN4_ROWID, PIN_INPUT);
while(1){
	for(a_row=0;a_row<ROWNUM; a_row++)
    1612:	89 89       	ldd	r24, Y+17	; 0x11
    1614:	8f 5f       	subi	r24, 0xFF	; 255
    1616:	89 8b       	std	Y+17, r24	; 0x11
    1618:	89 89       	ldd	r24, Y+17	; 0x11
    161a:	84 30       	cpi	r24, 0x04	; 4
    161c:	08 f4       	brcc	.+2      	; 0x1620 <KEYPAD_getPressedKey+0x2d0>
    161e:	b8 ce       	rjmp	.-656    	; 0x1390 <KEYPAD_getPressedKey+0x40>
    1620:	b5 ce       	rjmp	.-662    	; 0x138c <KEYPAD_getPressedKey+0x3c>

00001622 <KEYPAD_adjustKeyNumber>:
}

}

uint8 KEYPAD_adjustKeyNumber(uint8 a_buttonPosition)
{
    1622:	df 93       	push	r29
    1624:	cf 93       	push	r28
    1626:	00 d0       	rcall	.+0      	; 0x1628 <KEYPAD_adjustKeyNumber+0x6>
    1628:	00 d0       	rcall	.+0      	; 0x162a <KEYPAD_adjustKeyNumber+0x8>
    162a:	cd b7       	in	r28, 0x3d	; 61
    162c:	de b7       	in	r29, 0x3e	; 62
    162e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_keyPad=0;
    1630:	19 82       	std	Y+1, r1	; 0x01
#if(KEYPAD_4x4==1)
switch(a_buttonPosition)
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	3c 83       	std	Y+4, r19	; 0x04
    163a:	2b 83       	std	Y+3, r18	; 0x03
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	9c 81       	ldd	r25, Y+4	; 0x04
    1640:	88 30       	cpi	r24, 0x08	; 8
    1642:	91 05       	cpc	r25, r1
    1644:	09 f4       	brne	.+2      	; 0x1648 <KEYPAD_adjustKeyNumber+0x26>
    1646:	70 c0       	rjmp	.+224    	; 0x1728 <KEYPAD_adjustKeyNumber+0x106>
    1648:	2b 81       	ldd	r18, Y+3	; 0x03
    164a:	3c 81       	ldd	r19, Y+4	; 0x04
    164c:	29 30       	cpi	r18, 0x09	; 9
    164e:	31 05       	cpc	r19, r1
    1650:	5c f5       	brge	.+86     	; 0x16a8 <KEYPAD_adjustKeyNumber+0x86>
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	9c 81       	ldd	r25, Y+4	; 0x04
    1656:	84 30       	cpi	r24, 0x04	; 4
    1658:	91 05       	cpc	r25, r1
    165a:	09 f4       	brne	.+2      	; 0x165e <KEYPAD_adjustKeyNumber+0x3c>
    165c:	59 c0       	rjmp	.+178    	; 0x1710 <KEYPAD_adjustKeyNumber+0xee>
    165e:	2b 81       	ldd	r18, Y+3	; 0x03
    1660:	3c 81       	ldd	r19, Y+4	; 0x04
    1662:	25 30       	cpi	r18, 0x05	; 5
    1664:	31 05       	cpc	r19, r1
    1666:	9c f4       	brge	.+38     	; 0x168e <KEYPAD_adjustKeyNumber+0x6c>
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	9c 81       	ldd	r25, Y+4	; 0x04
    166c:	82 30       	cpi	r24, 0x02	; 2
    166e:	91 05       	cpc	r25, r1
    1670:	09 f4       	brne	.+2      	; 0x1674 <KEYPAD_adjustKeyNumber+0x52>
    1672:	48 c0       	rjmp	.+144    	; 0x1704 <KEYPAD_adjustKeyNumber+0xe2>
    1674:	2b 81       	ldd	r18, Y+3	; 0x03
    1676:	3c 81       	ldd	r19, Y+4	; 0x04
    1678:	23 30       	cpi	r18, 0x03	; 3
    167a:	31 05       	cpc	r19, r1
    167c:	0c f0       	brlt	.+2      	; 0x1680 <KEYPAD_adjustKeyNumber+0x5e>
    167e:	45 c0       	rjmp	.+138    	; 0x170a <KEYPAD_adjustKeyNumber+0xe8>
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	9c 81       	ldd	r25, Y+4	; 0x04
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	91 05       	cpc	r25, r1
    1688:	09 f4       	brne	.+2      	; 0x168c <KEYPAD_adjustKeyNumber+0x6a>
    168a:	39 c0       	rjmp	.+114    	; 0x16fe <KEYPAD_adjustKeyNumber+0xdc>
    168c:	66 c0       	rjmp	.+204    	; 0x175a <KEYPAD_adjustKeyNumber+0x138>
    168e:	2b 81       	ldd	r18, Y+3	; 0x03
    1690:	3c 81       	ldd	r19, Y+4	; 0x04
    1692:	26 30       	cpi	r18, 0x06	; 6
    1694:	31 05       	cpc	r19, r1
    1696:	09 f4       	brne	.+2      	; 0x169a <KEYPAD_adjustKeyNumber+0x78>
    1698:	41 c0       	rjmp	.+130    	; 0x171c <KEYPAD_adjustKeyNumber+0xfa>
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	9c 81       	ldd	r25, Y+4	; 0x04
    169e:	87 30       	cpi	r24, 0x07	; 7
    16a0:	91 05       	cpc	r25, r1
    16a2:	0c f0       	brlt	.+2      	; 0x16a6 <KEYPAD_adjustKeyNumber+0x84>
    16a4:	3e c0       	rjmp	.+124    	; 0x1722 <KEYPAD_adjustKeyNumber+0x100>
    16a6:	37 c0       	rjmp	.+110    	; 0x1716 <KEYPAD_adjustKeyNumber+0xf4>
    16a8:	2b 81       	ldd	r18, Y+3	; 0x03
    16aa:	3c 81       	ldd	r19, Y+4	; 0x04
    16ac:	2c 30       	cpi	r18, 0x0C	; 12
    16ae:	31 05       	cpc	r19, r1
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <KEYPAD_adjustKeyNumber+0x92>
    16b2:	46 c0       	rjmp	.+140    	; 0x1740 <KEYPAD_adjustKeyNumber+0x11e>
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	8d 30       	cpi	r24, 0x0D	; 13
    16ba:	91 05       	cpc	r25, r1
    16bc:	5c f4       	brge	.+22     	; 0x16d4 <KEYPAD_adjustKeyNumber+0xb2>
    16be:	2b 81       	ldd	r18, Y+3	; 0x03
    16c0:	3c 81       	ldd	r19, Y+4	; 0x04
    16c2:	2a 30       	cpi	r18, 0x0A	; 10
    16c4:	31 05       	cpc	r19, r1
    16c6:	b1 f1       	breq	.+108    	; 0x1734 <KEYPAD_adjustKeyNumber+0x112>
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ca:	9c 81       	ldd	r25, Y+4	; 0x04
    16cc:	8b 30       	cpi	r24, 0x0B	; 11
    16ce:	91 05       	cpc	r25, r1
    16d0:	a4 f5       	brge	.+104    	; 0x173a <KEYPAD_adjustKeyNumber+0x118>
    16d2:	2d c0       	rjmp	.+90     	; 0x172e <KEYPAD_adjustKeyNumber+0x10c>
    16d4:	2b 81       	ldd	r18, Y+3	; 0x03
    16d6:	3c 81       	ldd	r19, Y+4	; 0x04
    16d8:	2e 30       	cpi	r18, 0x0E	; 14
    16da:	31 05       	cpc	r19, r1
    16dc:	b9 f1       	breq	.+110    	; 0x174c <KEYPAD_adjustKeyNumber+0x12a>
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	9c 81       	ldd	r25, Y+4	; 0x04
    16e2:	8e 30       	cpi	r24, 0x0E	; 14
    16e4:	91 05       	cpc	r25, r1
    16e6:	7c f1       	brlt	.+94     	; 0x1746 <KEYPAD_adjustKeyNumber+0x124>
    16e8:	2b 81       	ldd	r18, Y+3	; 0x03
    16ea:	3c 81       	ldd	r19, Y+4	; 0x04
    16ec:	2f 30       	cpi	r18, 0x0F	; 15
    16ee:	31 05       	cpc	r19, r1
    16f0:	79 f1       	breq	.+94     	; 0x1750 <KEYPAD_adjustKeyNumber+0x12e>
    16f2:	8b 81       	ldd	r24, Y+3	; 0x03
    16f4:	9c 81       	ldd	r25, Y+4	; 0x04
    16f6:	80 31       	cpi	r24, 0x10	; 16
    16f8:	91 05       	cpc	r25, r1
    16fa:	69 f1       	breq	.+90     	; 0x1756 <KEYPAD_adjustKeyNumber+0x134>
    16fc:	2e c0       	rjmp	.+92     	; 0x175a <KEYPAD_adjustKeyNumber+0x138>
{
case 1 :
	a_keyPad=7;
    16fe:	87 e0       	ldi	r24, 0x07	; 7
    1700:	89 83       	std	Y+1, r24	; 0x01
    1702:	2b c0       	rjmp	.+86     	; 0x175a <KEYPAD_adjustKeyNumber+0x138>
	break;
case 2 :
	a_keyPad=8;
    1704:	88 e0       	ldi	r24, 0x08	; 8
    1706:	89 83       	std	Y+1, r24	; 0x01
    1708:	28 c0       	rjmp	.+80     	; 0x175a <KEYPAD_adjustKeyNumber+0x138>
		break;
case 3 :
	a_keyPad=9;
    170a:	89 e0       	ldi	r24, 0x09	; 9
    170c:	89 83       	std	Y+1, r24	; 0x01
    170e:	25 c0       	rjmp	.+74     	; 0x175a <KEYPAD_adjustKeyNumber+0x138>
		break;
case 4 :
	a_keyPad='%';
    1710:	85 e2       	ldi	r24, 0x25	; 37
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	22 c0       	rjmp	.+68     	; 0x175a <KEYPAD_adjustKeyNumber+0x138>
		break;
case 5 :
	a_keyPad=4;
    1716:	84 e0       	ldi	r24, 0x04	; 4
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	1f c0       	rjmp	.+62     	; 0x175a <KEYPAD_adjustKeyNumber+0x138>
		break;
case 6 :
	a_keyPad=5;
    171c:	85 e0       	ldi	r24, 0x05	; 5
    171e:	89 83       	std	Y+1, r24	; 0x01
    1720:	1c c0       	rjmp	.+56     	; 0x175a <KEYPAD_adjustKeyNumber+0x138>
		break;
case 7 :
	a_keyPad=6;
    1722:	86 e0       	ldi	r24, 0x06	; 6
    1724:	89 83       	std	Y+1, r24	; 0x01
    1726:	19 c0       	rjmp	.+50     	; 0x175a <KEYPAD_adjustKeyNumber+0x138>
		break;
case 8 :
	a_keyPad='x';
    1728:	88 e7       	ldi	r24, 0x78	; 120
    172a:	89 83       	std	Y+1, r24	; 0x01
    172c:	16 c0       	rjmp	.+44     	; 0x175a <KEYPAD_adjustKeyNumber+0x138>
		break;
case 9 :
	a_keyPad=1;
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	13 c0       	rjmp	.+38     	; 0x175a <KEYPAD_adjustKeyNumber+0x138>
		break;
case 10 :
	a_keyPad=2;
    1734:	82 e0       	ldi	r24, 0x02	; 2
    1736:	89 83       	std	Y+1, r24	; 0x01
    1738:	10 c0       	rjmp	.+32     	; 0x175a <KEYPAD_adjustKeyNumber+0x138>
		break;
case 11 :
	a_keyPad=3;
    173a:	83 e0       	ldi	r24, 0x03	; 3
    173c:	89 83       	std	Y+1, r24	; 0x01
    173e:	0d c0       	rjmp	.+26     	; 0x175a <KEYPAD_adjustKeyNumber+0x138>
		break;
case 12 :
	a_keyPad='-';
    1740:	8d e2       	ldi	r24, 0x2D	; 45
    1742:	89 83       	std	Y+1, r24	; 0x01
    1744:	0a c0       	rjmp	.+20     	; 0x175a <KEYPAD_adjustKeyNumber+0x138>
		break;
case 13 :
	a_keyPad='o';
    1746:	8f e6       	ldi	r24, 0x6F	; 111
    1748:	89 83       	std	Y+1, r24	; 0x01
    174a:	07 c0       	rjmp	.+14     	; 0x175a <KEYPAD_adjustKeyNumber+0x138>
		break;
case 14 :
	a_keyPad=0;
    174c:	19 82       	std	Y+1, r1	; 0x01
    174e:	05 c0       	rjmp	.+10     	; 0x175a <KEYPAD_adjustKeyNumber+0x138>
		break;
case 15 :
	a_keyPad='=';
    1750:	8d e3       	ldi	r24, 0x3D	; 61
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	02 c0       	rjmp	.+4      	; 0x175a <KEYPAD_adjustKeyNumber+0x138>
		break;
case 16 :
	a_keyPad='+';
    1756:	8b e2       	ldi	r24, 0x2B	; 43
    1758:	89 83       	std	Y+1, r24	; 0x01
	;
}

#endif

return a_keyPad;
    175a:	89 81       	ldd	r24, Y+1	; 0x01
}
    175c:	0f 90       	pop	r0
    175e:	0f 90       	pop	r0
    1760:	0f 90       	pop	r0
    1762:	0f 90       	pop	r0
    1764:	cf 91       	pop	r28
    1766:	df 91       	pop	r29
    1768:	08 95       	ret

0000176a <main>:
#include"keypad.h"
#include"sevensegment.h"
int main(void)
{
    176a:	df 93       	push	r29
    176c:	cf 93       	push	r28
    176e:	0f 92       	push	r0
    1770:	cd b7       	in	r28, 0x3d	; 61
    1772:	de b7       	in	r29, 0x3e	; 62
	KEYPAD_init();
    1774:	0e 94 8d 09 	call	0x131a	; 0x131a <KEYPAD_init>
	SEVENSEGMENT_init();
    1778:	0e 94 c5 0b 	call	0x178a	; 0x178a <SEVENSEGMENT_init>
	uint8 value;
	while(1)
	{
		value=KEYPAD_getPressedKey();
    177c:	0e 94 a8 09 	call	0x1350	; 0x1350 <KEYPAD_getPressedKey>
    1780:	89 83       	std	Y+1, r24	; 0x01
		SEVENSEGMENT_setNum(value);
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <SEVENSEGMENT_setNum>
    1788:	f9 cf       	rjmp	.-14     	; 0x177c <main+0x12>

0000178a <SEVENSEGMENT_init>:




void SEVENSEGMENT_init(void)
{
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
GPIO_setupPinDirection(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN1ID, PIN_OUTPUT);
GPIO_setupPinDirection(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN2ID, PIN_OUTPUT);
GPIO_setupPinDirection(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN3ID, PIN_OUTPUT);
#elif(SEVENSEGMENT_WITHOUTDEC==1)

GPIO_setupPinDirection(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN0ID, PIN_OUTPUT);
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	61 e0       	ldi	r22, 0x01	; 1
    1796:	41 e0       	ldi	r20, 0x01	; 1
    1798:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
GPIO_setupPinDirection(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN1ID, PIN_OUTPUT);
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	62 e0       	ldi	r22, 0x02	; 2
    17a0:	41 e0       	ldi	r20, 0x01	; 1
    17a2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
GPIO_setupPinDirection(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN2ID, PIN_OUTPUT);
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	63 e0       	ldi	r22, 0x03	; 3
    17aa:	41 e0       	ldi	r20, 0x01	; 1
    17ac:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
GPIO_setupPinDirection(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN3ID, PIN_OUTPUT);
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	64 e0       	ldi	r22, 0x04	; 4
    17b4:	41 e0       	ldi	r20, 0x01	; 1
    17b6:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
GPIO_setupPinDirection(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN4ID, PIN_OUTPUT);
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	65 e0       	ldi	r22, 0x05	; 5
    17be:	41 e0       	ldi	r20, 0x01	; 1
    17c0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
GPIO_setupPinDirection(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN5ID, PIN_OUTPUT);
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	66 e0       	ldi	r22, 0x06	; 6
    17c8:	41 e0       	ldi	r20, 0x01	; 1
    17ca:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
GPIO_setupPinDirection(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN6ID, PIN_OUTPUT);
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	67 e0       	ldi	r22, 0x07	; 7
    17d2:	41 e0       	ldi	r20, 0x01	; 1
    17d4:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#endif

#if(SEVENSEGMENT_COMMONCATHODE ==1)
GPIO_setupPinDirection(SEVENSEGMENT_PORTCATHODE_ID,SEVENSEGMENT_PINCATHODE_ID, PIN_OUTPUT);
    17d8:	82 e0       	ldi	r24, 0x02	; 2
    17da:	66 e0       	ldi	r22, 0x06	; 6
    17dc:	41 e0       	ldi	r20, 0x01	; 1
    17de:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
GPIO_writePin(SEVENSEGMENT_PORTCATHODE_ID,SEVENSEGMENT_PINCATHODE_ID, LOGIC_HIGH);
    17e2:	82 e0       	ldi	r24, 0x02	; 2
    17e4:	66 e0       	ldi	r22, 0x06	; 6
    17e6:	41 e0       	ldi	r20, 0x01	; 1
    17e8:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
#endif
SEVENSEGMENT_reset();
    17ec:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <SEVENSEGMENT_reset>
}
    17f0:	cf 91       	pop	r28
    17f2:	df 91       	pop	r29
    17f4:	08 95       	ret

000017f6 <SEVENSEGMENT_setNum>:
void SEVENSEGMENT_setNum(uint8 a_num)
{
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <SEVENSEGMENT_setNum+0x6>
    17fc:	0f 92       	push	r0
    17fe:	cd b7       	in	r28, 0x3d	; 61
    1800:	de b7       	in	r29, 0x3e	; 62
    1802:	89 83       	std	Y+1, r24	; 0x01
	g_num=a_num;
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	80 93 68 00 	sts	0x0068, r24
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN1ID, GET_BIT(g_num,1));
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN2ID, GET_BIT(g_num,2));
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN3ID, GET_BIT(g_num,3));
#elif(SEVENSEGMENT_WITHOUTDEC==1)

switch (g_num)
    180a:	80 91 68 00 	lds	r24, 0x0068
    180e:	28 2f       	mov	r18, r24
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	3b 83       	std	Y+3, r19	; 0x03
    1814:	2a 83       	std	Y+2, r18	; 0x02
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	9b 81       	ldd	r25, Y+3	; 0x03
    181a:	84 30       	cpi	r24, 0x04	; 4
    181c:	91 05       	cpc	r25, r1
    181e:	09 f4       	brne	.+2      	; 0x1822 <SEVENSEGMENT_setNum+0x2c>
    1820:	d7 c0       	rjmp	.+430    	; 0x19d0 <SEVENSEGMENT_setNum+0x1da>
    1822:	2a 81       	ldd	r18, Y+2	; 0x02
    1824:	3b 81       	ldd	r19, Y+3	; 0x03
    1826:	25 30       	cpi	r18, 0x05	; 5
    1828:	31 05       	cpc	r19, r1
    182a:	ec f4       	brge	.+58     	; 0x1866 <SEVENSEGMENT_setNum+0x70>
    182c:	8a 81       	ldd	r24, Y+2	; 0x02
    182e:	9b 81       	ldd	r25, Y+3	; 0x03
    1830:	81 30       	cpi	r24, 0x01	; 1
    1832:	91 05       	cpc	r25, r1
    1834:	09 f4       	brne	.+2      	; 0x1838 <SEVENSEGMENT_setNum+0x42>
    1836:	60 c0       	rjmp	.+192    	; 0x18f8 <SEVENSEGMENT_setNum+0x102>
    1838:	2a 81       	ldd	r18, Y+2	; 0x02
    183a:	3b 81       	ldd	r19, Y+3	; 0x03
    183c:	22 30       	cpi	r18, 0x02	; 2
    183e:	31 05       	cpc	r19, r1
    1840:	2c f4       	brge	.+10     	; 0x184c <SEVENSEGMENT_setNum+0x56>
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	9b 81       	ldd	r25, Y+3	; 0x03
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	99 f1       	breq	.+102    	; 0x18b0 <SEVENSEGMENT_setNum+0xba>
    184a:	99 c1       	rjmp	.+818    	; 0x1b7e <SEVENSEGMENT_setNum+0x388>
    184c:	2a 81       	ldd	r18, Y+2	; 0x02
    184e:	3b 81       	ldd	r19, Y+3	; 0x03
    1850:	22 30       	cpi	r18, 0x02	; 2
    1852:	31 05       	cpc	r19, r1
    1854:	09 f4       	brne	.+2      	; 0x1858 <SEVENSEGMENT_setNum+0x62>
    1856:	74 c0       	rjmp	.+232    	; 0x1940 <SEVENSEGMENT_setNum+0x14a>
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	9b 81       	ldd	r25, Y+3	; 0x03
    185c:	83 30       	cpi	r24, 0x03	; 3
    185e:	91 05       	cpc	r25, r1
    1860:	09 f4       	brne	.+2      	; 0x1864 <SEVENSEGMENT_setNum+0x6e>
    1862:	92 c0       	rjmp	.+292    	; 0x1988 <SEVENSEGMENT_setNum+0x192>
    1864:	8c c1       	rjmp	.+792    	; 0x1b7e <SEVENSEGMENT_setNum+0x388>
    1866:	2a 81       	ldd	r18, Y+2	; 0x02
    1868:	3b 81       	ldd	r19, Y+3	; 0x03
    186a:	27 30       	cpi	r18, 0x07	; 7
    186c:	31 05       	cpc	r19, r1
    186e:	09 f4       	brne	.+2      	; 0x1872 <SEVENSEGMENT_setNum+0x7c>
    1870:	1b c1       	rjmp	.+566    	; 0x1aa8 <SEVENSEGMENT_setNum+0x2b2>
    1872:	8a 81       	ldd	r24, Y+2	; 0x02
    1874:	9b 81       	ldd	r25, Y+3	; 0x03
    1876:	88 30       	cpi	r24, 0x08	; 8
    1878:	91 05       	cpc	r25, r1
    187a:	6c f4       	brge	.+26     	; 0x1896 <SEVENSEGMENT_setNum+0xa0>
    187c:	2a 81       	ldd	r18, Y+2	; 0x02
    187e:	3b 81       	ldd	r19, Y+3	; 0x03
    1880:	25 30       	cpi	r18, 0x05	; 5
    1882:	31 05       	cpc	r19, r1
    1884:	09 f4       	brne	.+2      	; 0x1888 <SEVENSEGMENT_setNum+0x92>
    1886:	c8 c0       	rjmp	.+400    	; 0x1a18 <SEVENSEGMENT_setNum+0x222>
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	9b 81       	ldd	r25, Y+3	; 0x03
    188c:	86 30       	cpi	r24, 0x06	; 6
    188e:	91 05       	cpc	r25, r1
    1890:	09 f4       	brne	.+2      	; 0x1894 <SEVENSEGMENT_setNum+0x9e>
    1892:	e6 c0       	rjmp	.+460    	; 0x1a60 <SEVENSEGMENT_setNum+0x26a>
    1894:	74 c1       	rjmp	.+744    	; 0x1b7e <SEVENSEGMENT_setNum+0x388>
    1896:	2a 81       	ldd	r18, Y+2	; 0x02
    1898:	3b 81       	ldd	r19, Y+3	; 0x03
    189a:	28 30       	cpi	r18, 0x08	; 8
    189c:	31 05       	cpc	r19, r1
    189e:	09 f4       	brne	.+2      	; 0x18a2 <SEVENSEGMENT_setNum+0xac>
    18a0:	27 c1       	rjmp	.+590    	; 0x1af0 <SEVENSEGMENT_setNum+0x2fa>
    18a2:	8a 81       	ldd	r24, Y+2	; 0x02
    18a4:	9b 81       	ldd	r25, Y+3	; 0x03
    18a6:	89 30       	cpi	r24, 0x09	; 9
    18a8:	91 05       	cpc	r25, r1
    18aa:	09 f4       	brne	.+2      	; 0x18ae <SEVENSEGMENT_setNum+0xb8>
    18ac:	45 c1       	rjmp	.+650    	; 0x1b38 <SEVENSEGMENT_setNum+0x342>
    18ae:	67 c1       	rjmp	.+718    	; 0x1b7e <SEVENSEGMENT_setNum+0x388>
{
case 0 :
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN0ID, GET_BIT(SEVENSEGMENT_ZER0,0));
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	61 e0       	ldi	r22, 0x01	; 1
    18b4:	41 e0       	ldi	r20, 0x01	; 1
    18b6:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN1ID, GET_BIT(SEVENSEGMENT_ZER0,1));
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	62 e0       	ldi	r22, 0x02	; 2
    18be:	41 e0       	ldi	r20, 0x01	; 1
    18c0:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN2ID, GET_BIT(SEVENSEGMENT_ZER0,2));
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	63 e0       	ldi	r22, 0x03	; 3
    18c8:	41 e0       	ldi	r20, 0x01	; 1
    18ca:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN3ID, GET_BIT(SEVENSEGMENT_ZER0,3));
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	64 e0       	ldi	r22, 0x04	; 4
    18d2:	41 e0       	ldi	r20, 0x01	; 1
    18d4:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN4ID, GET_BIT(SEVENSEGMENT_ZER0,4));
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	65 e0       	ldi	r22, 0x05	; 5
    18dc:	41 e0       	ldi	r20, 0x01	; 1
    18de:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN5ID, GET_BIT(SEVENSEGMENT_ZER0,5));
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	66 e0       	ldi	r22, 0x06	; 6
    18e6:	41 e0       	ldi	r20, 0x01	; 1
    18e8:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN6ID, GET_BIT(SEVENSEGMENT_ZER0,6));
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	67 e0       	ldi	r22, 0x07	; 7
    18f0:	40 e0       	ldi	r20, 0x00	; 0
    18f2:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
    18f6:	43 c1       	rjmp	.+646    	; 0x1b7e <SEVENSEGMENT_setNum+0x388>
									break;
case 1 :
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN0ID, GET_BIT(SEVENSEGMENT_ONE,0));
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	61 e0       	ldi	r22, 0x01	; 1
    18fc:	40 e0       	ldi	r20, 0x00	; 0
    18fe:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN1ID, GET_BIT(SEVENSEGMENT_ONE,1));
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	62 e0       	ldi	r22, 0x02	; 2
    1906:	41 e0       	ldi	r20, 0x01	; 1
    1908:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN2ID, GET_BIT(SEVENSEGMENT_ONE,2));
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	63 e0       	ldi	r22, 0x03	; 3
    1910:	41 e0       	ldi	r20, 0x01	; 1
    1912:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN3ID, GET_BIT(SEVENSEGMENT_ONE,3));
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	64 e0       	ldi	r22, 0x04	; 4
    191a:	40 e0       	ldi	r20, 0x00	; 0
    191c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN4ID, GET_BIT(SEVENSEGMENT_ONE,4));
    1920:	80 e0       	ldi	r24, 0x00	; 0
    1922:	65 e0       	ldi	r22, 0x05	; 5
    1924:	40 e0       	ldi	r20, 0x00	; 0
    1926:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN5ID, GET_BIT(SEVENSEGMENT_ONE,5));
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	66 e0       	ldi	r22, 0x06	; 6
    192e:	40 e0       	ldi	r20, 0x00	; 0
    1930:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN6ID, GET_BIT(SEVENSEGMENT_ONE,6));
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	67 e0       	ldi	r22, 0x07	; 7
    1938:	40 e0       	ldi	r20, 0x00	; 0
    193a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
    193e:	1f c1       	rjmp	.+574    	; 0x1b7e <SEVENSEGMENT_setNum+0x388>
									break;
case 2 :
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN0ID, GET_BIT(SEVENSEGMENT_TWO,0));
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	61 e0       	ldi	r22, 0x01	; 1
    1944:	41 e0       	ldi	r20, 0x01	; 1
    1946:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN1ID, GET_BIT(SEVENSEGMENT_TWO,1));
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	62 e0       	ldi	r22, 0x02	; 2
    194e:	41 e0       	ldi	r20, 0x01	; 1
    1950:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN2ID, GET_BIT(SEVENSEGMENT_TWO,2));
    1954:	80 e0       	ldi	r24, 0x00	; 0
    1956:	63 e0       	ldi	r22, 0x03	; 3
    1958:	40 e0       	ldi	r20, 0x00	; 0
    195a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN3ID, GET_BIT(SEVENSEGMENT_TWO,3));
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	64 e0       	ldi	r22, 0x04	; 4
    1962:	41 e0       	ldi	r20, 0x01	; 1
    1964:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN4ID, GET_BIT(SEVENSEGMENT_TWO,4));
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	65 e0       	ldi	r22, 0x05	; 5
    196c:	41 e0       	ldi	r20, 0x01	; 1
    196e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN5ID, GET_BIT(SEVENSEGMENT_TWO,5));
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	66 e0       	ldi	r22, 0x06	; 6
    1976:	40 e0       	ldi	r20, 0x00	; 0
    1978:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN6ID, GET_BIT(SEVENSEGMENT_TWO,6));
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	67 e0       	ldi	r22, 0x07	; 7
    1980:	41 e0       	ldi	r20, 0x01	; 1
    1982:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
    1986:	fb c0       	rjmp	.+502    	; 0x1b7e <SEVENSEGMENT_setNum+0x388>
									break;
case 3 :
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN0ID, GET_BIT(SEVENSEGMENT_THREE,0));
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	61 e0       	ldi	r22, 0x01	; 1
    198c:	41 e0       	ldi	r20, 0x01	; 1
    198e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN1ID, GET_BIT(SEVENSEGMENT_THREE,1));
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	62 e0       	ldi	r22, 0x02	; 2
    1996:	41 e0       	ldi	r20, 0x01	; 1
    1998:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN2ID, GET_BIT(SEVENSEGMENT_THREE,2));
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	63 e0       	ldi	r22, 0x03	; 3
    19a0:	41 e0       	ldi	r20, 0x01	; 1
    19a2:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN3ID, GET_BIT(SEVENSEGMENT_THREE,3));
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	64 e0       	ldi	r22, 0x04	; 4
    19aa:	41 e0       	ldi	r20, 0x01	; 1
    19ac:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN4ID, GET_BIT(SEVENSEGMENT_THREE,4));
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	65 e0       	ldi	r22, 0x05	; 5
    19b4:	40 e0       	ldi	r20, 0x00	; 0
    19b6:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN5ID, GET_BIT(SEVENSEGMENT_THREE,5));
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	66 e0       	ldi	r22, 0x06	; 6
    19be:	40 e0       	ldi	r20, 0x00	; 0
    19c0:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN6ID, GET_BIT(SEVENSEGMENT_THREE,6));
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	67 e0       	ldi	r22, 0x07	; 7
    19c8:	41 e0       	ldi	r20, 0x01	; 1
    19ca:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
    19ce:	d7 c0       	rjmp	.+430    	; 0x1b7e <SEVENSEGMENT_setNum+0x388>
									break;
case 4 :
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN0ID, GET_BIT(SEVENSEGMENT_FOUR,0));
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	61 e0       	ldi	r22, 0x01	; 1
    19d4:	40 e0       	ldi	r20, 0x00	; 0
    19d6:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN1ID, GET_BIT(SEVENSEGMENT_FOUR,1));
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	62 e0       	ldi	r22, 0x02	; 2
    19de:	41 e0       	ldi	r20, 0x01	; 1
    19e0:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN2ID, GET_BIT(SEVENSEGMENT_FOUR,2));
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	63 e0       	ldi	r22, 0x03	; 3
    19e8:	41 e0       	ldi	r20, 0x01	; 1
    19ea:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN3ID, GET_BIT(SEVENSEGMENT_FOUR,3));
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	64 e0       	ldi	r22, 0x04	; 4
    19f2:	40 e0       	ldi	r20, 0x00	; 0
    19f4:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN4ID, GET_BIT(SEVENSEGMENT_FOUR,4));
    19f8:	80 e0       	ldi	r24, 0x00	; 0
    19fa:	65 e0       	ldi	r22, 0x05	; 5
    19fc:	40 e0       	ldi	r20, 0x00	; 0
    19fe:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN5ID, GET_BIT(SEVENSEGMENT_FOUR,5));
    1a02:	80 e0       	ldi	r24, 0x00	; 0
    1a04:	66 e0       	ldi	r22, 0x06	; 6
    1a06:	41 e0       	ldi	r20, 0x01	; 1
    1a08:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN6ID, GET_BIT(SEVENSEGMENT_FOUR,6));
    1a0c:	80 e0       	ldi	r24, 0x00	; 0
    1a0e:	67 e0       	ldi	r22, 0x07	; 7
    1a10:	41 e0       	ldi	r20, 0x01	; 1
    1a12:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
    1a16:	b3 c0       	rjmp	.+358    	; 0x1b7e <SEVENSEGMENT_setNum+0x388>
									break;
case 5 :
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN0ID, GET_BIT(SEVENSEGMENT_FIVE,0));
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	61 e0       	ldi	r22, 0x01	; 1
    1a1c:	41 e0       	ldi	r20, 0x01	; 1
    1a1e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN1ID, GET_BIT(SEVENSEGMENT_FIVE,1));
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	62 e0       	ldi	r22, 0x02	; 2
    1a26:	40 e0       	ldi	r20, 0x00	; 0
    1a28:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN2ID, GET_BIT(SEVENSEGMENT_FIVE,2));
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	63 e0       	ldi	r22, 0x03	; 3
    1a30:	41 e0       	ldi	r20, 0x01	; 1
    1a32:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN3ID, GET_BIT(SEVENSEGMENT_FIVE,3));
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	64 e0       	ldi	r22, 0x04	; 4
    1a3a:	41 e0       	ldi	r20, 0x01	; 1
    1a3c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN4ID, GET_BIT(SEVENSEGMENT_FIVE,4));
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	65 e0       	ldi	r22, 0x05	; 5
    1a44:	40 e0       	ldi	r20, 0x00	; 0
    1a46:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN5ID, GET_BIT(SEVENSEGMENT_FIVE,5));
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	66 e0       	ldi	r22, 0x06	; 6
    1a4e:	41 e0       	ldi	r20, 0x01	; 1
    1a50:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN6ID, GET_BIT(SEVENSEGMENT_FIVE,6));
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	67 e0       	ldi	r22, 0x07	; 7
    1a58:	41 e0       	ldi	r20, 0x01	; 1
    1a5a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
    1a5e:	8f c0       	rjmp	.+286    	; 0x1b7e <SEVENSEGMENT_setNum+0x388>
									break;
case 6 :
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN0ID, GET_BIT(SEVENSEGMENT_SIX,0));
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	61 e0       	ldi	r22, 0x01	; 1
    1a64:	40 e0       	ldi	r20, 0x00	; 0
    1a66:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN1ID, GET_BIT(SEVENSEGMENT_SIX,1));
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	62 e0       	ldi	r22, 0x02	; 2
    1a6e:	40 e0       	ldi	r20, 0x00	; 0
    1a70:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN2ID, GET_BIT(SEVENSEGMENT_SIX,2));
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	63 e0       	ldi	r22, 0x03	; 3
    1a78:	41 e0       	ldi	r20, 0x01	; 1
    1a7a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN3ID, GET_BIT(SEVENSEGMENT_SIX,3));
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	64 e0       	ldi	r22, 0x04	; 4
    1a82:	41 e0       	ldi	r20, 0x01	; 1
    1a84:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN4ID, GET_BIT(SEVENSEGMENT_SIX,4));
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	65 e0       	ldi	r22, 0x05	; 5
    1a8c:	41 e0       	ldi	r20, 0x01	; 1
    1a8e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN5ID, GET_BIT(SEVENSEGMENT_SIX,5));
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	66 e0       	ldi	r22, 0x06	; 6
    1a96:	41 e0       	ldi	r20, 0x01	; 1
    1a98:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN6ID, GET_BIT(SEVENSEGMENT_SIX,6));
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	67 e0       	ldi	r22, 0x07	; 7
    1aa0:	41 e0       	ldi	r20, 0x01	; 1
    1aa2:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
    1aa6:	6b c0       	rjmp	.+214    	; 0x1b7e <SEVENSEGMENT_setNum+0x388>
									break;
case 7 :
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN0ID, GET_BIT(SEVENSEGMENT_SEVEN,0));
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	61 e0       	ldi	r22, 0x01	; 1
    1aac:	41 e0       	ldi	r20, 0x01	; 1
    1aae:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN1ID, GET_BIT(SEVENSEGMENT_SEVEN,1));
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	62 e0       	ldi	r22, 0x02	; 2
    1ab6:	41 e0       	ldi	r20, 0x01	; 1
    1ab8:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN2ID, GET_BIT(SEVENSEGMENT_SEVEN,2));
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	63 e0       	ldi	r22, 0x03	; 3
    1ac0:	41 e0       	ldi	r20, 0x01	; 1
    1ac2:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN3ID, GET_BIT(SEVENSEGMENT_SEVEN,3));
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	64 e0       	ldi	r22, 0x04	; 4
    1aca:	40 e0       	ldi	r20, 0x00	; 0
    1acc:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN4ID, GET_BIT(SEVENSEGMENT_SEVEN,4));
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	65 e0       	ldi	r22, 0x05	; 5
    1ad4:	40 e0       	ldi	r20, 0x00	; 0
    1ad6:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN5ID, GET_BIT(SEVENSEGMENT_SEVEN,5));
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	66 e0       	ldi	r22, 0x06	; 6
    1ade:	40 e0       	ldi	r20, 0x00	; 0
    1ae0:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN6ID, GET_BIT(SEVENSEGMENT_SEVEN,6));
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	67 e0       	ldi	r22, 0x07	; 7
    1ae8:	40 e0       	ldi	r20, 0x00	; 0
    1aea:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
    1aee:	47 c0       	rjmp	.+142    	; 0x1b7e <SEVENSEGMENT_setNum+0x388>
									break;
case 8 :
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN0ID, GET_BIT(SEVENSEGMENT_EIGHT,0));
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	61 e0       	ldi	r22, 0x01	; 1
    1af4:	41 e0       	ldi	r20, 0x01	; 1
    1af6:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN1ID, GET_BIT(SEVENSEGMENT_EIGHT,1));
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	62 e0       	ldi	r22, 0x02	; 2
    1afe:	41 e0       	ldi	r20, 0x01	; 1
    1b00:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN2ID, GET_BIT(SEVENSEGMENT_EIGHT,2));
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	63 e0       	ldi	r22, 0x03	; 3
    1b08:	41 e0       	ldi	r20, 0x01	; 1
    1b0a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN3ID, GET_BIT(SEVENSEGMENT_EIGHT,3));
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	64 e0       	ldi	r22, 0x04	; 4
    1b12:	41 e0       	ldi	r20, 0x01	; 1
    1b14:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN4ID, GET_BIT(SEVENSEGMENT_EIGHT,4));
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	65 e0       	ldi	r22, 0x05	; 5
    1b1c:	41 e0       	ldi	r20, 0x01	; 1
    1b1e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN5ID, GET_BIT(SEVENSEGMENT_EIGHT,5));
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	66 e0       	ldi	r22, 0x06	; 6
    1b26:	41 e0       	ldi	r20, 0x01	; 1
    1b28:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN6ID, GET_BIT(SEVENSEGMENT_EIGHT,6));
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	67 e0       	ldi	r22, 0x07	; 7
    1b30:	41 e0       	ldi	r20, 0x01	; 1
    1b32:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
    1b36:	23 c0       	rjmp	.+70     	; 0x1b7e <SEVENSEGMENT_setNum+0x388>
									break;
case 9 :
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN0ID, GET_BIT(SEVENSEGMENT_NINE,0));
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	61 e0       	ldi	r22, 0x01	; 1
    1b3c:	41 e0       	ldi	r20, 0x01	; 1
    1b3e:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN1ID, GET_BIT(SEVENSEGMENT_NINE,1));
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	62 e0       	ldi	r22, 0x02	; 2
    1b46:	41 e0       	ldi	r20, 0x01	; 1
    1b48:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN2ID, GET_BIT(SEVENSEGMENT_NINE,2));
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	63 e0       	ldi	r22, 0x03	; 3
    1b50:	41 e0       	ldi	r20, 0x01	; 1
    1b52:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN3ID, GET_BIT(SEVENSEGMENT_NINE,3));
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	64 e0       	ldi	r22, 0x04	; 4
    1b5a:	40 e0       	ldi	r20, 0x00	; 0
    1b5c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN4ID, GET_BIT(SEVENSEGMENT_NINE,4));
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	65 e0       	ldi	r22, 0x05	; 5
    1b64:	40 e0       	ldi	r20, 0x00	; 0
    1b66:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN5ID, GET_BIT(SEVENSEGMENT_NINE,5));
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	66 e0       	ldi	r22, 0x06	; 6
    1b6e:	41 e0       	ldi	r20, 0x01	; 1
    1b70:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
GPIO_writePin(SEVENSEGMENT_PORTID, SEVENSEGMENT_PIN6ID, GET_BIT(SEVENSEGMENT_NINE,6));
    1b74:	80 e0       	ldi	r24, 0x00	; 0
    1b76:	67 e0       	ldi	r22, 0x07	; 7
    1b78:	41 e0       	ldi	r20, 0x01	; 1
    1b7a:	0e 94 9d 06 	call	0xd3a	; 0xd3a <GPIO_writePin>
#endif




}
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	cf 91       	pop	r28
    1b86:	df 91       	pop	r29
    1b88:	08 95       	ret

00001b8a <SEVENSEGMENT_increment>:
void SEVENSEGMENT_increment(void)
{
    1b8a:	df 93       	push	r29
    1b8c:	cf 93       	push	r28
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
	g_num++;
    1b92:	80 91 68 00 	lds	r24, 0x0068
    1b96:	8f 5f       	subi	r24, 0xFF	; 255
    1b98:	80 93 68 00 	sts	0x0068, r24
	SEVENSEGMENT_setNum(g_num);
    1b9c:	80 91 68 00 	lds	r24, 0x0068
    1ba0:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <SEVENSEGMENT_setNum>

}
    1ba4:	cf 91       	pop	r28
    1ba6:	df 91       	pop	r29
    1ba8:	08 95       	ret

00001baa <SEVENSEGMENT_decrement>:
void SEVENSEGMENT_decrement(void)
{
    1baa:	df 93       	push	r29
    1bac:	cf 93       	push	r28
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
	g_num--;
    1bb2:	80 91 68 00 	lds	r24, 0x0068
    1bb6:	81 50       	subi	r24, 0x01	; 1
    1bb8:	80 93 68 00 	sts	0x0068, r24
	SEVENSEGMENT_setNum(g_num);
    1bbc:	80 91 68 00 	lds	r24, 0x0068
    1bc0:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <SEVENSEGMENT_setNum>


}
    1bc4:	cf 91       	pop	r28
    1bc6:	df 91       	pop	r29
    1bc8:	08 95       	ret

00001bca <SEVENSEGMENT_reset>:
void SEVENSEGMENT_reset(void)
{
    1bca:	df 93       	push	r29
    1bcc:	cf 93       	push	r28
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
	g_num=0;
    1bd2:	10 92 68 00 	sts	0x0068, r1
	SEVENSEGMENT_setNum(g_num);
    1bd6:	80 91 68 00 	lds	r24, 0x0068
    1bda:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <SEVENSEGMENT_setNum>


}
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <__prologue_saves__>:
    1be4:	2f 92       	push	r2
    1be6:	3f 92       	push	r3
    1be8:	4f 92       	push	r4
    1bea:	5f 92       	push	r5
    1bec:	6f 92       	push	r6
    1bee:	7f 92       	push	r7
    1bf0:	8f 92       	push	r8
    1bf2:	9f 92       	push	r9
    1bf4:	af 92       	push	r10
    1bf6:	bf 92       	push	r11
    1bf8:	cf 92       	push	r12
    1bfa:	df 92       	push	r13
    1bfc:	ef 92       	push	r14
    1bfe:	ff 92       	push	r15
    1c00:	0f 93       	push	r16
    1c02:	1f 93       	push	r17
    1c04:	cf 93       	push	r28
    1c06:	df 93       	push	r29
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
    1c0c:	ca 1b       	sub	r28, r26
    1c0e:	db 0b       	sbc	r29, r27
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	de bf       	out	0x3e, r29	; 62
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	cd bf       	out	0x3d, r28	; 61
    1c1a:	09 94       	ijmp

00001c1c <__epilogue_restores__>:
    1c1c:	2a 88       	ldd	r2, Y+18	; 0x12
    1c1e:	39 88       	ldd	r3, Y+17	; 0x11
    1c20:	48 88       	ldd	r4, Y+16	; 0x10
    1c22:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c24:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c26:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c28:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c2a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c2c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c2e:	b9 84       	ldd	r11, Y+9	; 0x09
    1c30:	c8 84       	ldd	r12, Y+8	; 0x08
    1c32:	df 80       	ldd	r13, Y+7	; 0x07
    1c34:	ee 80       	ldd	r14, Y+6	; 0x06
    1c36:	fd 80       	ldd	r15, Y+5	; 0x05
    1c38:	0c 81       	ldd	r16, Y+4	; 0x04
    1c3a:	1b 81       	ldd	r17, Y+3	; 0x03
    1c3c:	aa 81       	ldd	r26, Y+2	; 0x02
    1c3e:	b9 81       	ldd	r27, Y+1	; 0x01
    1c40:	ce 0f       	add	r28, r30
    1c42:	d1 1d       	adc	r29, r1
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	de bf       	out	0x3e, r29	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	cd bf       	out	0x3d, r28	; 61
    1c4e:	ed 01       	movw	r28, r26
    1c50:	08 95       	ret

00001c52 <_exit>:
    1c52:	f8 94       	cli

00001c54 <__stop_program>:
    1c54:	ff cf       	rjmp	.-2      	; 0x1c54 <__stop_program>
