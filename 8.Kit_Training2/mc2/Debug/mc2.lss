
mc2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000af0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000f00  00000000  00000000  00000b44  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000a14  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 20 04 	call	0x840	; 0x840 <main>
  64:	0c 94 76 05 	jmp	0xaec	; 0xaec <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_setupPinDirection>:
/*-----------------------FUNCTION Definitions------------------*/


/* Setting the pin on each port to be either Input pin or Output pin */
void GPIO_setupPinDirection( uint8 a_portNum,uint8 a_pinNum,GPIO_PinDirectionType a_direction )
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <GPIO_setupPinDirection+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <GPIO_setupPinDirection+0x8>
  74:	0f 92       	push	r0
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
  7a:	89 83       	std	Y+1, r24	; 0x01
  7c:	6a 83       	std	Y+2, r22	; 0x02
  7e:	4b 83       	std	Y+3, r20	; 0x03

	/* Checking the number given by the user is valid  for Port number and Pin number */
	if( a_portNum>=GPIO_NUM_OF_PORTS || a_pinNum>=GPIO_NUM_OF_PINS )
  80:	89 81       	ldd	r24, Y+1	; 0x01
  82:	84 30       	cpi	r24, 0x04	; 4
  84:	08 f0       	brcs	.+2      	; 0x88 <GPIO_setupPinDirection+0x1c>
  86:	e4 c0       	rjmp	.+456    	; 0x250 <GPIO_setupPinDirection+0x1e4>
  88:	8a 81       	ldd	r24, Y+2	; 0x02
  8a:	88 30       	cpi	r24, 0x08	; 8
  8c:	08 f0       	brcs	.+2      	; 0x90 <GPIO_setupPinDirection+0x24>
  8e:	e0 c0       	rjmp	.+448    	; 0x250 <GPIO_setupPinDirection+0x1e4>
	/*------- If the number is within the range--------*/
	else
	{

		/*------- Selecting the Port you will set the Pin Direction in --------*/
		switch ( a_portNum )
  90:	89 81       	ldd	r24, Y+1	; 0x01
  92:	28 2f       	mov	r18, r24
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	3d 83       	std	Y+5, r19	; 0x05
  98:	2c 83       	std	Y+4, r18	; 0x04
  9a:	8c 81       	ldd	r24, Y+4	; 0x04
  9c:	9d 81       	ldd	r25, Y+5	; 0x05
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	91 05       	cpc	r25, r1
  a2:	09 f4       	brne	.+2      	; 0xa6 <GPIO_setupPinDirection+0x3a>
  a4:	47 c0       	rjmp	.+142    	; 0x134 <GPIO_setupPinDirection+0xc8>
  a6:	2c 81       	ldd	r18, Y+4	; 0x04
  a8:	3d 81       	ldd	r19, Y+5	; 0x05
  aa:	22 30       	cpi	r18, 0x02	; 2
  ac:	31 05       	cpc	r19, r1
  ae:	2c f4       	brge	.+10     	; 0xba <GPIO_setupPinDirection+0x4e>
  b0:	8c 81       	ldd	r24, Y+4	; 0x04
  b2:	9d 81       	ldd	r25, Y+5	; 0x05
  b4:	00 97       	sbiw	r24, 0x00	; 0
  b6:	71 f0       	breq	.+28     	; 0xd4 <GPIO_setupPinDirection+0x68>
  b8:	cb c0       	rjmp	.+406    	; 0x250 <GPIO_setupPinDirection+0x1e4>
  ba:	2c 81       	ldd	r18, Y+4	; 0x04
  bc:	3d 81       	ldd	r19, Y+5	; 0x05
  be:	22 30       	cpi	r18, 0x02	; 2
  c0:	31 05       	cpc	r19, r1
  c2:	09 f4       	brne	.+2      	; 0xc6 <GPIO_setupPinDirection+0x5a>
  c4:	67 c0       	rjmp	.+206    	; 0x194 <GPIO_setupPinDirection+0x128>
  c6:	8c 81       	ldd	r24, Y+4	; 0x04
  c8:	9d 81       	ldd	r25, Y+5	; 0x05
  ca:	83 30       	cpi	r24, 0x03	; 3
  cc:	91 05       	cpc	r25, r1
  ce:	09 f4       	brne	.+2      	; 0xd2 <GPIO_setupPinDirection+0x66>
  d0:	91 c0       	rjmp	.+290    	; 0x1f4 <GPIO_setupPinDirection+0x188>
  d2:	be c0       	rjmp	.+380    	; 0x250 <GPIO_setupPinDirection+0x1e4>
		{

				case PORTA_ID :

		/*------- Selecting the Mode you will set the Pin Direction to --------*/
					if( a_direction == PIN_INPUT)
  d4:	8b 81       	ldd	r24, Y+3	; 0x03
  d6:	88 23       	and	r24, r24
  d8:	a9 f4       	brne	.+42     	; 0x104 <GPIO_setupPinDirection+0x98>
					{

						/* Common Macro function to clear a bit*/
						CLEAR_BIT( DDRA,a_pinNum );
  da:	aa e3       	ldi	r26, 0x3A	; 58
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	ea e3       	ldi	r30, 0x3A	; 58
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	48 2f       	mov	r20, r24
  e6:	8a 81       	ldd	r24, Y+2	; 0x02
  e8:	28 2f       	mov	r18, r24
  ea:	30 e0       	ldi	r19, 0x00	; 0
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	02 2e       	mov	r0, r18
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <GPIO_setupPinDirection+0x8c>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	0a 94       	dec	r0
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <GPIO_setupPinDirection+0x88>
  fc:	80 95       	com	r24
  fe:	84 23       	and	r24, r20
 100:	8c 93       	st	X, r24
 102:	a6 c0       	rjmp	.+332    	; 0x250 <GPIO_setupPinDirection+0x1e4>

					}
					else if ( a_direction == PIN_OUTPUT )
 104:	8b 81       	ldd	r24, Y+3	; 0x03
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	09 f0       	breq	.+2      	; 0x10c <GPIO_setupPinDirection+0xa0>
 10a:	a2 c0       	rjmp	.+324    	; 0x250 <GPIO_setupPinDirection+0x1e4>
					{

						/* Common Macro function to Set a bit to 1*/
						SET_BIT( DDRA,a_pinNum );
 10c:	aa e3       	ldi	r26, 0x3A	; 58
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	ea e3       	ldi	r30, 0x3A	; 58
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	48 2f       	mov	r20, r24
 118:	8a 81       	ldd	r24, Y+2	; 0x02
 11a:	28 2f       	mov	r18, r24
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 2e       	mov	r0, r18
 124:	02 c0       	rjmp	.+4      	; 0x12a <GPIO_setupPinDirection+0xbe>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	0a 94       	dec	r0
 12c:	e2 f7       	brpl	.-8      	; 0x126 <GPIO_setupPinDirection+0xba>
 12e:	84 2b       	or	r24, r20
 130:	8c 93       	st	X, r24
 132:	8e c0       	rjmp	.+284    	; 0x250 <GPIO_setupPinDirection+0x1e4>
					break;

				case PORTB_ID :

				/*------- Selecting the Mode you will set the Pin Direction to --------*/
					if( a_direction == PIN_INPUT )
 134:	8b 81       	ldd	r24, Y+3	; 0x03
 136:	88 23       	and	r24, r24
 138:	a9 f4       	brne	.+42     	; 0x164 <GPIO_setupPinDirection+0xf8>
					{

						/* Common Macro function to clear a bit*/
						 CLEAR_BIT( DDRB,a_pinNum );
 13a:	a7 e3       	ldi	r26, 0x37	; 55
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	e7 e3       	ldi	r30, 0x37	; 55
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	48 2f       	mov	r20, r24
 146:	8a 81       	ldd	r24, Y+2	; 0x02
 148:	28 2f       	mov	r18, r24
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 2e       	mov	r0, r18
 152:	02 c0       	rjmp	.+4      	; 0x158 <GPIO_setupPinDirection+0xec>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	0a 94       	dec	r0
 15a:	e2 f7       	brpl	.-8      	; 0x154 <GPIO_setupPinDirection+0xe8>
 15c:	80 95       	com	r24
 15e:	84 23       	and	r24, r20
 160:	8c 93       	st	X, r24
 162:	76 c0       	rjmp	.+236    	; 0x250 <GPIO_setupPinDirection+0x1e4>

					}

					else if ( a_direction == PIN_OUTPUT )
 164:	8b 81       	ldd	r24, Y+3	; 0x03
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	09 f0       	breq	.+2      	; 0x16c <GPIO_setupPinDirection+0x100>
 16a:	72 c0       	rjmp	.+228    	; 0x250 <GPIO_setupPinDirection+0x1e4>
					{

						/* Common Macro function to Set a bit to 1*/
						SET_BIT( DDRB,a_pinNum );
 16c:	a7 e3       	ldi	r26, 0x37	; 55
 16e:	b0 e0       	ldi	r27, 0x00	; 0
 170:	e7 e3       	ldi	r30, 0x37	; 55
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	48 2f       	mov	r20, r24
 178:	8a 81       	ldd	r24, Y+2	; 0x02
 17a:	28 2f       	mov	r18, r24
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 2e       	mov	r0, r18
 184:	02 c0       	rjmp	.+4      	; 0x18a <GPIO_setupPinDirection+0x11e>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	0a 94       	dec	r0
 18c:	e2 f7       	brpl	.-8      	; 0x186 <GPIO_setupPinDirection+0x11a>
 18e:	84 2b       	or	r24, r20
 190:	8c 93       	st	X, r24
 192:	5e c0       	rjmp	.+188    	; 0x250 <GPIO_setupPinDirection+0x1e4>
					break;

				case PORTC_ID :

					/*------- Selecting the Mode you will set the Pin Direction to --------*/
					if( a_direction == PIN_INPUT )
 194:	8b 81       	ldd	r24, Y+3	; 0x03
 196:	88 23       	and	r24, r24
 198:	a9 f4       	brne	.+42     	; 0x1c4 <GPIO_setupPinDirection+0x158>
					{
					/* Common Macro function to clear a bit*/
						 CLEAR_BIT( DDRC,a_pinNum );
 19a:	a4 e3       	ldi	r26, 0x34	; 52
 19c:	b0 e0       	ldi	r27, 0x00	; 0
 19e:	e4 e3       	ldi	r30, 0x34	; 52
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	80 81       	ld	r24, Z
 1a4:	48 2f       	mov	r20, r24
 1a6:	8a 81       	ldd	r24, Y+2	; 0x02
 1a8:	28 2f       	mov	r18, r24
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 2e       	mov	r0, r18
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <GPIO_setupPinDirection+0x14c>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	0a 94       	dec	r0
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <GPIO_setupPinDirection+0x148>
 1bc:	80 95       	com	r24
 1be:	84 23       	and	r24, r20
 1c0:	8c 93       	st	X, r24
 1c2:	46 c0       	rjmp	.+140    	; 0x250 <GPIO_setupPinDirection+0x1e4>

					}

					else if ( a_direction == PIN_OUTPUT )
 1c4:	8b 81       	ldd	r24, Y+3	; 0x03
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	09 f0       	breq	.+2      	; 0x1cc <GPIO_setupPinDirection+0x160>
 1ca:	42 c0       	rjmp	.+132    	; 0x250 <GPIO_setupPinDirection+0x1e4>
					{

						/* Common Macro function to Set a bit to 1*/
	   					 SET_BIT( DDRC,a_pinNum );
 1cc:	a4 e3       	ldi	r26, 0x34	; 52
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	e4 e3       	ldi	r30, 0x34	; 52
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	48 2f       	mov	r20, r24
 1d8:	8a 81       	ldd	r24, Y+2	; 0x02
 1da:	28 2f       	mov	r18, r24
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	02 2e       	mov	r0, r18
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <GPIO_setupPinDirection+0x17e>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	0a 94       	dec	r0
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <GPIO_setupPinDirection+0x17a>
 1ee:	84 2b       	or	r24, r20
 1f0:	8c 93       	st	X, r24
 1f2:	2e c0       	rjmp	.+92     	; 0x250 <GPIO_setupPinDirection+0x1e4>
					break;

				case PORTD_ID :

					/*------- Selecting the Mode you will set the Pin Direction to --------*/
					if( a_direction == PIN_INPUT )
 1f4:	8b 81       	ldd	r24, Y+3	; 0x03
 1f6:	88 23       	and	r24, r24
 1f8:	a9 f4       	brne	.+42     	; 0x224 <GPIO_setupPinDirection+0x1b8>
					{

						/* Common Macro function to clear a bit*/
						CLEAR_BIT( DDRD,a_pinNum );
 1fa:	a1 e3       	ldi	r26, 0x31	; 49
 1fc:	b0 e0       	ldi	r27, 0x00	; 0
 1fe:	e1 e3       	ldi	r30, 0x31	; 49
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	48 2f       	mov	r20, r24
 206:	8a 81       	ldd	r24, Y+2	; 0x02
 208:	28 2f       	mov	r18, r24
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 2e       	mov	r0, r18
 212:	02 c0       	rjmp	.+4      	; 0x218 <GPIO_setupPinDirection+0x1ac>
 214:	88 0f       	add	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	0a 94       	dec	r0
 21a:	e2 f7       	brpl	.-8      	; 0x214 <GPIO_setupPinDirection+0x1a8>
 21c:	80 95       	com	r24
 21e:	84 23       	and	r24, r20
 220:	8c 93       	st	X, r24
 222:	16 c0       	rjmp	.+44     	; 0x250 <GPIO_setupPinDirection+0x1e4>

					}

					else if ( a_direction == PIN_OUTPUT )
 224:	8b 81       	ldd	r24, Y+3	; 0x03
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	99 f4       	brne	.+38     	; 0x250 <GPIO_setupPinDirection+0x1e4>
					{
						/* Common Macro function to Set a bit to 1*/
						SET_BIT( DDRD,a_pinNum );
 22a:	a1 e3       	ldi	r26, 0x31	; 49
 22c:	b0 e0       	ldi	r27, 0x00	; 0
 22e:	e1 e3       	ldi	r30, 0x31	; 49
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	48 2f       	mov	r20, r24
 236:	8a 81       	ldd	r24, Y+2	; 0x02
 238:	28 2f       	mov	r18, r24
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	02 2e       	mov	r0, r18
 242:	02 c0       	rjmp	.+4      	; 0x248 <GPIO_setupPinDirection+0x1dc>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	0a 94       	dec	r0
 24a:	e2 f7       	brpl	.-8      	; 0x244 <GPIO_setupPinDirection+0x1d8>
 24c:	84 2b       	or	r24, r20
 24e:	8c 93       	st	X, r24

	}



}
 250:	0f 90       	pop	r0
 252:	0f 90       	pop	r0
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	0f 90       	pop	r0
 25a:	cf 91       	pop	r28
 25c:	df 91       	pop	r29
 25e:	08 95       	ret

00000260 <GPIO_writePin>:


/* Writing a logic 0 or 1 on an Output pin */
void GPIO_writePin(uint8 a_portNum,uint8 a_pinNum,uint8 a_value)
{
 260:	df 93       	push	r29
 262:	cf 93       	push	r28
 264:	00 d0       	rcall	.+0      	; 0x266 <GPIO_writePin+0x6>
 266:	00 d0       	rcall	.+0      	; 0x268 <GPIO_writePin+0x8>
 268:	0f 92       	push	r0
 26a:	cd b7       	in	r28, 0x3d	; 61
 26c:	de b7       	in	r29, 0x3e	; 62
 26e:	89 83       	std	Y+1, r24	; 0x01
 270:	6a 83       	std	Y+2, r22	; 0x02
 272:	4b 83       	std	Y+3, r20	; 0x03

	/* Checking the number given by the user is valid  for Port number and Pin number */

	if( a_portNum>=GPIO_NUM_OF_PORTS || a_pinNum>=GPIO_NUM_OF_PINS )
 274:	89 81       	ldd	r24, Y+1	; 0x01
 276:	84 30       	cpi	r24, 0x04	; 4
 278:	08 f0       	brcs	.+2      	; 0x27c <GPIO_writePin+0x1c>
 27a:	e4 c0       	rjmp	.+456    	; 0x444 <GPIO_writePin+0x1e4>
 27c:	8a 81       	ldd	r24, Y+2	; 0x02
 27e:	88 30       	cpi	r24, 0x08	; 8
 280:	08 f0       	brcs	.+2      	; 0x284 <GPIO_writePin+0x24>
 282:	e0 c0       	rjmp	.+448    	; 0x444 <GPIO_writePin+0x1e4>
	/*------- If the number is within the range--------*/
		else
		{

		/*------- Selecting the Port you will write on a Pin in --------*/
			switch ( a_portNum )
 284:	89 81       	ldd	r24, Y+1	; 0x01
 286:	28 2f       	mov	r18, r24
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	3d 83       	std	Y+5, r19	; 0x05
 28c:	2c 83       	std	Y+4, r18	; 0x04
 28e:	8c 81       	ldd	r24, Y+4	; 0x04
 290:	9d 81       	ldd	r25, Y+5	; 0x05
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	91 05       	cpc	r25, r1
 296:	09 f4       	brne	.+2      	; 0x29a <GPIO_writePin+0x3a>
 298:	47 c0       	rjmp	.+142    	; 0x328 <GPIO_writePin+0xc8>
 29a:	2c 81       	ldd	r18, Y+4	; 0x04
 29c:	3d 81       	ldd	r19, Y+5	; 0x05
 29e:	22 30       	cpi	r18, 0x02	; 2
 2a0:	31 05       	cpc	r19, r1
 2a2:	2c f4       	brge	.+10     	; 0x2ae <GPIO_writePin+0x4e>
 2a4:	8c 81       	ldd	r24, Y+4	; 0x04
 2a6:	9d 81       	ldd	r25, Y+5	; 0x05
 2a8:	00 97       	sbiw	r24, 0x00	; 0
 2aa:	71 f0       	breq	.+28     	; 0x2c8 <GPIO_writePin+0x68>
 2ac:	cb c0       	rjmp	.+406    	; 0x444 <GPIO_writePin+0x1e4>
 2ae:	2c 81       	ldd	r18, Y+4	; 0x04
 2b0:	3d 81       	ldd	r19, Y+5	; 0x05
 2b2:	22 30       	cpi	r18, 0x02	; 2
 2b4:	31 05       	cpc	r19, r1
 2b6:	09 f4       	brne	.+2      	; 0x2ba <GPIO_writePin+0x5a>
 2b8:	67 c0       	rjmp	.+206    	; 0x388 <GPIO_writePin+0x128>
 2ba:	8c 81       	ldd	r24, Y+4	; 0x04
 2bc:	9d 81       	ldd	r25, Y+5	; 0x05
 2be:	83 30       	cpi	r24, 0x03	; 3
 2c0:	91 05       	cpc	r25, r1
 2c2:	09 f4       	brne	.+2      	; 0x2c6 <GPIO_writePin+0x66>
 2c4:	91 c0       	rjmp	.+290    	; 0x3e8 <GPIO_writePin+0x188>
 2c6:	be c0       	rjmp	.+380    	; 0x444 <GPIO_writePin+0x1e4>
			{
					case PORTA_ID :

		/*------- Selecting the value you will write on a Pin in --------*/
						if( a_value == LOGIC_LOW )
 2c8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ca:	88 23       	and	r24, r24
 2cc:	a9 f4       	brne	.+42     	; 0x2f8 <GPIO_writePin+0x98>
						{

							/* Common Macro function to clear a bit*/
							CLEAR_BIT( PORTA,a_pinNum );
 2ce:	ab e3       	ldi	r26, 0x3B	; 59
 2d0:	b0 e0       	ldi	r27, 0x00	; 0
 2d2:	eb e3       	ldi	r30, 0x3B	; 59
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	48 2f       	mov	r20, r24
 2da:	8a 81       	ldd	r24, Y+2	; 0x02
 2dc:	28 2f       	mov	r18, r24
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	02 2e       	mov	r0, r18
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <GPIO_writePin+0x8c>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	0a 94       	dec	r0
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <GPIO_writePin+0x88>
 2f0:	80 95       	com	r24
 2f2:	84 23       	and	r24, r20
 2f4:	8c 93       	st	X, r24
 2f6:	a6 c0       	rjmp	.+332    	; 0x444 <GPIO_writePin+0x1e4>

						}
						else if ( a_value == LOGIC_HIGH )
 2f8:	8b 81       	ldd	r24, Y+3	; 0x03
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	09 f0       	breq	.+2      	; 0x300 <GPIO_writePin+0xa0>
 2fe:	a2 c0       	rjmp	.+324    	; 0x444 <GPIO_writePin+0x1e4>
						{

							/* Common Macro function to Set a bit to 1*/
							SET_BIT( PORTA,a_pinNum );
 300:	ab e3       	ldi	r26, 0x3B	; 59
 302:	b0 e0       	ldi	r27, 0x00	; 0
 304:	eb e3       	ldi	r30, 0x3B	; 59
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	48 2f       	mov	r20, r24
 30c:	8a 81       	ldd	r24, Y+2	; 0x02
 30e:	28 2f       	mov	r18, r24
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	02 2e       	mov	r0, r18
 318:	02 c0       	rjmp	.+4      	; 0x31e <GPIO_writePin+0xbe>
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	0a 94       	dec	r0
 320:	e2 f7       	brpl	.-8      	; 0x31a <GPIO_writePin+0xba>
 322:	84 2b       	or	r24, r20
 324:	8c 93       	st	X, r24
 326:	8e c0       	rjmp	.+284    	; 0x444 <GPIO_writePin+0x1e4>
						break;

					case PORTB_ID :

					/*------- Selecting the value you will write on a Pin in --------*/
						if( a_value == LOGIC_LOW )
 328:	8b 81       	ldd	r24, Y+3	; 0x03
 32a:	88 23       	and	r24, r24
 32c:	a9 f4       	brne	.+42     	; 0x358 <GPIO_writePin+0xf8>
						{

							/* Common Macro function to clear a bit*/
							 CLEAR_BIT( PORTB,a_pinNum );
 32e:	a8 e3       	ldi	r26, 0x38	; 56
 330:	b0 e0       	ldi	r27, 0x00	; 0
 332:	e8 e3       	ldi	r30, 0x38	; 56
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 81       	ld	r24, Z
 338:	48 2f       	mov	r20, r24
 33a:	8a 81       	ldd	r24, Y+2	; 0x02
 33c:	28 2f       	mov	r18, r24
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	02 2e       	mov	r0, r18
 346:	02 c0       	rjmp	.+4      	; 0x34c <GPIO_writePin+0xec>
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	0a 94       	dec	r0
 34e:	e2 f7       	brpl	.-8      	; 0x348 <GPIO_writePin+0xe8>
 350:	80 95       	com	r24
 352:	84 23       	and	r24, r20
 354:	8c 93       	st	X, r24
 356:	76 c0       	rjmp	.+236    	; 0x444 <GPIO_writePin+0x1e4>

						}

						else if ( a_value == LOGIC_HIGH )
 358:	8b 81       	ldd	r24, Y+3	; 0x03
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	09 f0       	breq	.+2      	; 0x360 <GPIO_writePin+0x100>
 35e:	72 c0       	rjmp	.+228    	; 0x444 <GPIO_writePin+0x1e4>
						{

							/* Common Macro function to Set a bit to 1*/
							SET_BIT( PORTB,a_pinNum );
 360:	a8 e3       	ldi	r26, 0x38	; 56
 362:	b0 e0       	ldi	r27, 0x00	; 0
 364:	e8 e3       	ldi	r30, 0x38	; 56
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	80 81       	ld	r24, Z
 36a:	48 2f       	mov	r20, r24
 36c:	8a 81       	ldd	r24, Y+2	; 0x02
 36e:	28 2f       	mov	r18, r24
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	02 2e       	mov	r0, r18
 378:	02 c0       	rjmp	.+4      	; 0x37e <GPIO_writePin+0x11e>
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	0a 94       	dec	r0
 380:	e2 f7       	brpl	.-8      	; 0x37a <GPIO_writePin+0x11a>
 382:	84 2b       	or	r24, r20
 384:	8c 93       	st	X, r24
 386:	5e c0       	rjmp	.+188    	; 0x444 <GPIO_writePin+0x1e4>
						break;

					case PORTC_ID :

						/*------- Selecting the value you will write on a Pin in --------*/
						if( a_value == LOGIC_LOW )
 388:	8b 81       	ldd	r24, Y+3	; 0x03
 38a:	88 23       	and	r24, r24
 38c:	a9 f4       	brne	.+42     	; 0x3b8 <GPIO_writePin+0x158>
						{

							/* Common Macro function to clear a bit*/
							 CLEAR_BIT( PORTC,a_pinNum );
 38e:	a5 e3       	ldi	r26, 0x35	; 53
 390:	b0 e0       	ldi	r27, 0x00	; 0
 392:	e5 e3       	ldi	r30, 0x35	; 53
 394:	f0 e0       	ldi	r31, 0x00	; 0
 396:	80 81       	ld	r24, Z
 398:	48 2f       	mov	r20, r24
 39a:	8a 81       	ldd	r24, Y+2	; 0x02
 39c:	28 2f       	mov	r18, r24
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	02 2e       	mov	r0, r18
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <GPIO_writePin+0x14c>
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	0a 94       	dec	r0
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <GPIO_writePin+0x148>
 3b0:	80 95       	com	r24
 3b2:	84 23       	and	r24, r20
 3b4:	8c 93       	st	X, r24
 3b6:	46 c0       	rjmp	.+140    	; 0x444 <GPIO_writePin+0x1e4>

						}

						else if ( a_value == LOGIC_HIGH )
 3b8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ba:	81 30       	cpi	r24, 0x01	; 1
 3bc:	09 f0       	breq	.+2      	; 0x3c0 <GPIO_writePin+0x160>
 3be:	42 c0       	rjmp	.+132    	; 0x444 <GPIO_writePin+0x1e4>
						{

							/* Common Macro function to Set a bit to 1*/
		   					 SET_BIT( PORTC,a_pinNum );
 3c0:	a5 e3       	ldi	r26, 0x35	; 53
 3c2:	b0 e0       	ldi	r27, 0x00	; 0
 3c4:	e5 e3       	ldi	r30, 0x35	; 53
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	48 2f       	mov	r20, r24
 3cc:	8a 81       	ldd	r24, Y+2	; 0x02
 3ce:	28 2f       	mov	r18, r24
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	02 2e       	mov	r0, r18
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <GPIO_writePin+0x17e>
 3da:	88 0f       	add	r24, r24
 3dc:	99 1f       	adc	r25, r25
 3de:	0a 94       	dec	r0
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <GPIO_writePin+0x17a>
 3e2:	84 2b       	or	r24, r20
 3e4:	8c 93       	st	X, r24
 3e6:	2e c0       	rjmp	.+92     	; 0x444 <GPIO_writePin+0x1e4>
						break;

					case PORTD_ID :

						/*------- Selecting the value you will write on a Pin in --------*/
						if( a_value == LOGIC_LOW )
 3e8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ea:	88 23       	and	r24, r24
 3ec:	a9 f4       	brne	.+42     	; 0x418 <GPIO_writePin+0x1b8>
						{

							/* Common Macro function to clear a bit*/
							CLEAR_BIT( PORTD,a_pinNum );
 3ee:	a2 e3       	ldi	r26, 0x32	; 50
 3f0:	b0 e0       	ldi	r27, 0x00	; 0
 3f2:	e2 e3       	ldi	r30, 0x32	; 50
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	80 81       	ld	r24, Z
 3f8:	48 2f       	mov	r20, r24
 3fa:	8a 81       	ldd	r24, Y+2	; 0x02
 3fc:	28 2f       	mov	r18, r24
 3fe:	30 e0       	ldi	r19, 0x00	; 0
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	02 2e       	mov	r0, r18
 406:	02 c0       	rjmp	.+4      	; 0x40c <GPIO_writePin+0x1ac>
 408:	88 0f       	add	r24, r24
 40a:	99 1f       	adc	r25, r25
 40c:	0a 94       	dec	r0
 40e:	e2 f7       	brpl	.-8      	; 0x408 <GPIO_writePin+0x1a8>
 410:	80 95       	com	r24
 412:	84 23       	and	r24, r20
 414:	8c 93       	st	X, r24
 416:	16 c0       	rjmp	.+44     	; 0x444 <GPIO_writePin+0x1e4>

						}

						else if ( a_value == LOGIC_HIGH )
 418:	8b 81       	ldd	r24, Y+3	; 0x03
 41a:	81 30       	cpi	r24, 0x01	; 1
 41c:	99 f4       	brne	.+38     	; 0x444 <GPIO_writePin+0x1e4>
						{

							/* Common Macro function to Set a bit to 1*/
							SET_BIT( PORTD,a_pinNum );
 41e:	a2 e3       	ldi	r26, 0x32	; 50
 420:	b0 e0       	ldi	r27, 0x00	; 0
 422:	e2 e3       	ldi	r30, 0x32	; 50
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	80 81       	ld	r24, Z
 428:	48 2f       	mov	r20, r24
 42a:	8a 81       	ldd	r24, Y+2	; 0x02
 42c:	28 2f       	mov	r18, r24
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	81 e0       	ldi	r24, 0x01	; 1
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	02 2e       	mov	r0, r18
 436:	02 c0       	rjmp	.+4      	; 0x43c <GPIO_writePin+0x1dc>
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	0a 94       	dec	r0
 43e:	e2 f7       	brpl	.-8      	; 0x438 <GPIO_writePin+0x1d8>
 440:	84 2b       	or	r24, r20
 442:	8c 93       	st	X, r24
		}




}
 444:	0f 90       	pop	r0
 446:	0f 90       	pop	r0
 448:	0f 90       	pop	r0
 44a:	0f 90       	pop	r0
 44c:	0f 90       	pop	r0
 44e:	cf 91       	pop	r28
 450:	df 91       	pop	r29
 452:	08 95       	ret

00000454 <GPIO_togglePin>:



void GPIO_togglePin(uint8 a_portNum,uint8 a_pinNum)
{
 454:	df 93       	push	r29
 456:	cf 93       	push	r28
 458:	00 d0       	rcall	.+0      	; 0x45a <GPIO_togglePin+0x6>
 45a:	00 d0       	rcall	.+0      	; 0x45c <GPIO_togglePin+0x8>
 45c:	cd b7       	in	r28, 0x3d	; 61
 45e:	de b7       	in	r29, 0x3e	; 62
 460:	89 83       	std	Y+1, r24	; 0x01
 462:	6a 83       	std	Y+2, r22	; 0x02
	/* Checking the number given by the user is valid  for Port number and Pin number */

	if( a_portNum>=GPIO_NUM_OF_PORTS || a_pinNum>=GPIO_NUM_OF_PINS )
 464:	89 81       	ldd	r24, Y+1	; 0x01
 466:	84 30       	cpi	r24, 0x04	; 4
 468:	08 f0       	brcs	.+2      	; 0x46c <GPIO_togglePin+0x18>
 46a:	72 c0       	rjmp	.+228    	; 0x550 <GPIO_togglePin+0xfc>
 46c:	8a 81       	ldd	r24, Y+2	; 0x02
 46e:	88 30       	cpi	r24, 0x08	; 8
 470:	08 f0       	brcs	.+2      	; 0x474 <GPIO_togglePin+0x20>
 472:	6e c0       	rjmp	.+220    	; 0x550 <GPIO_togglePin+0xfc>
	/*------- If the number is within the range--------*/
		else
		{

		/*------- Selecting the Port you will toggle a Pin in --------*/
			switch ( a_portNum )
 474:	89 81       	ldd	r24, Y+1	; 0x01
 476:	28 2f       	mov	r18, r24
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	3c 83       	std	Y+4, r19	; 0x04
 47c:	2b 83       	std	Y+3, r18	; 0x03
 47e:	8b 81       	ldd	r24, Y+3	; 0x03
 480:	9c 81       	ldd	r25, Y+4	; 0x04
 482:	81 30       	cpi	r24, 0x01	; 1
 484:	91 05       	cpc	r25, r1
 486:	49 f1       	breq	.+82     	; 0x4da <GPIO_togglePin+0x86>
 488:	2b 81       	ldd	r18, Y+3	; 0x03
 48a:	3c 81       	ldd	r19, Y+4	; 0x04
 48c:	22 30       	cpi	r18, 0x02	; 2
 48e:	31 05       	cpc	r19, r1
 490:	2c f4       	brge	.+10     	; 0x49c <GPIO_togglePin+0x48>
 492:	8b 81       	ldd	r24, Y+3	; 0x03
 494:	9c 81       	ldd	r25, Y+4	; 0x04
 496:	00 97       	sbiw	r24, 0x00	; 0
 498:	61 f0       	breq	.+24     	; 0x4b2 <GPIO_togglePin+0x5e>
 49a:	5a c0       	rjmp	.+180    	; 0x550 <GPIO_togglePin+0xfc>
 49c:	2b 81       	ldd	r18, Y+3	; 0x03
 49e:	3c 81       	ldd	r19, Y+4	; 0x04
 4a0:	22 30       	cpi	r18, 0x02	; 2
 4a2:	31 05       	cpc	r19, r1
 4a4:	71 f1       	breq	.+92     	; 0x502 <GPIO_togglePin+0xae>
 4a6:	8b 81       	ldd	r24, Y+3	; 0x03
 4a8:	9c 81       	ldd	r25, Y+4	; 0x04
 4aa:	83 30       	cpi	r24, 0x03	; 3
 4ac:	91 05       	cpc	r25, r1
 4ae:	e9 f1       	breq	.+122    	; 0x52a <GPIO_togglePin+0xd6>
 4b0:	4f c0       	rjmp	.+158    	; 0x550 <GPIO_togglePin+0xfc>
			{
					case PORTA_ID :

				/* Common Macro function to Toggle a bit*/
					TOGGLE_BIT(PORTA,a_pinNum);
 4b2:	ab e3       	ldi	r26, 0x3B	; 59
 4b4:	b0 e0       	ldi	r27, 0x00	; 0
 4b6:	eb e3       	ldi	r30, 0x3B	; 59
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	80 81       	ld	r24, Z
 4bc:	48 2f       	mov	r20, r24
 4be:	8a 81       	ldd	r24, Y+2	; 0x02
 4c0:	28 2f       	mov	r18, r24
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 2e       	mov	r0, r18
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <GPIO_togglePin+0x7c>
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	0a 94       	dec	r0
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <GPIO_togglePin+0x78>
 4d4:	84 27       	eor	r24, r20
 4d6:	8c 93       	st	X, r24
 4d8:	3b c0       	rjmp	.+118    	; 0x550 <GPIO_togglePin+0xfc>
						break;

					case PORTB_ID :

				/* Common Macro function to Toggle a bit*/
						TOGGLE_BIT(PORTB,a_pinNum);
 4da:	a8 e3       	ldi	r26, 0x38	; 56
 4dc:	b0 e0       	ldi	r27, 0x00	; 0
 4de:	e8 e3       	ldi	r30, 0x38	; 56
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	80 81       	ld	r24, Z
 4e4:	48 2f       	mov	r20, r24
 4e6:	8a 81       	ldd	r24, Y+2	; 0x02
 4e8:	28 2f       	mov	r18, r24
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	02 2e       	mov	r0, r18
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <GPIO_togglePin+0xa4>
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	0a 94       	dec	r0
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <GPIO_togglePin+0xa0>
 4fc:	84 27       	eor	r24, r20
 4fe:	8c 93       	st	X, r24
 500:	27 c0       	rjmp	.+78     	; 0x550 <GPIO_togglePin+0xfc>
						break;

					case PORTC_ID :

				/* Common Macro function to Toggle a bit*/
						TOGGLE_BIT(PORTC,a_pinNum);
 502:	a5 e3       	ldi	r26, 0x35	; 53
 504:	b0 e0       	ldi	r27, 0x00	; 0
 506:	e5 e3       	ldi	r30, 0x35	; 53
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	80 81       	ld	r24, Z
 50c:	48 2f       	mov	r20, r24
 50e:	8a 81       	ldd	r24, Y+2	; 0x02
 510:	28 2f       	mov	r18, r24
 512:	30 e0       	ldi	r19, 0x00	; 0
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	02 2e       	mov	r0, r18
 51a:	02 c0       	rjmp	.+4      	; 0x520 <GPIO_togglePin+0xcc>
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	0a 94       	dec	r0
 522:	e2 f7       	brpl	.-8      	; 0x51c <GPIO_togglePin+0xc8>
 524:	84 27       	eor	r24, r20
 526:	8c 93       	st	X, r24
 528:	13 c0       	rjmp	.+38     	; 0x550 <GPIO_togglePin+0xfc>
						break;

					case PORTD_ID :

				/* Common Macro function to Toggle a bit*/
						TOGGLE_BIT(PORTD,a_pinNum);
 52a:	a2 e3       	ldi	r26, 0x32	; 50
 52c:	b0 e0       	ldi	r27, 0x00	; 0
 52e:	e2 e3       	ldi	r30, 0x32	; 50
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	80 81       	ld	r24, Z
 534:	48 2f       	mov	r20, r24
 536:	8a 81       	ldd	r24, Y+2	; 0x02
 538:	28 2f       	mov	r18, r24
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	02 2e       	mov	r0, r18
 542:	02 c0       	rjmp	.+4      	; 0x548 <GPIO_togglePin+0xf4>
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	0a 94       	dec	r0
 54a:	e2 f7       	brpl	.-8      	; 0x544 <GPIO_togglePin+0xf0>
 54c:	84 27       	eor	r24, r20
 54e:	8c 93       	st	X, r24


		}


}
 550:	0f 90       	pop	r0
 552:	0f 90       	pop	r0
 554:	0f 90       	pop	r0
 556:	0f 90       	pop	r0
 558:	cf 91       	pop	r28
 55a:	df 91       	pop	r29
 55c:	08 95       	ret

0000055e <GPIO_readPin>:



/* Reading the value on an Input pin and returning it's value */
uint8 GPIO_readPin( uint8 a_portNum,uint8 a_pinNum )
{
 55e:	df 93       	push	r29
 560:	cf 93       	push	r28
 562:	00 d0       	rcall	.+0      	; 0x564 <GPIO_readPin+0x6>
 564:	00 d0       	rcall	.+0      	; 0x566 <GPIO_readPin+0x8>
 566:	00 d0       	rcall	.+0      	; 0x568 <GPIO_readPin+0xa>
 568:	cd b7       	in	r28, 0x3d	; 61
 56a:	de b7       	in	r29, 0x3e	; 62
 56c:	8a 83       	std	Y+2, r24	; 0x02
 56e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_pinValue = LOGIC_LOW;
 570:	19 82       	std	Y+1, r1	; 0x01

	/* Checking the number given by the user is valid  for Port number and Pin number */
	if( a_portNum>=GPIO_NUM_OF_PORTS || a_pinNum>=GPIO_NUM_OF_PINS )
 572:	8a 81       	ldd	r24, Y+2	; 0x02
 574:	84 30       	cpi	r24, 0x04	; 4
 576:	18 f4       	brcc	.+6      	; 0x57e <GPIO_readPin+0x20>
 578:	8b 81       	ldd	r24, Y+3	; 0x03
 57a:	88 30       	cpi	r24, 0x08	; 8
 57c:	18 f0       	brcs	.+6      	; 0x584 <GPIO_readPin+0x26>
	{

		/*------- If the number is not within the range--------*/

						return a_pinValue;
 57e:	29 81       	ldd	r18, Y+1	; 0x01
 580:	2e 83       	std	Y+6, r18	; 0x06
 582:	82 c0       	rjmp	.+260    	; 0x688 <GPIO_readPin+0x12a>

	/*------- If the number is within the range--------*/
	else
	{
		/*------- Selecting the Port you will read a Pin from --------*/
		switch ( a_portNum )
 584:	8a 81       	ldd	r24, Y+2	; 0x02
 586:	48 2f       	mov	r20, r24
 588:	50 e0       	ldi	r21, 0x00	; 0
 58a:	5d 83       	std	Y+5, r21	; 0x05
 58c:	4c 83       	std	Y+4, r20	; 0x04
 58e:	8c 81       	ldd	r24, Y+4	; 0x04
 590:	9d 81       	ldd	r25, Y+5	; 0x05
 592:	81 30       	cpi	r24, 0x01	; 1
 594:	91 05       	cpc	r25, r1
 596:	79 f1       	breq	.+94     	; 0x5f6 <GPIO_readPin+0x98>
 598:	2c 81       	ldd	r18, Y+4	; 0x04
 59a:	3d 81       	ldd	r19, Y+5	; 0x05
 59c:	22 30       	cpi	r18, 0x02	; 2
 59e:	31 05       	cpc	r19, r1
 5a0:	34 f4       	brge	.+12     	; 0x5ae <GPIO_readPin+0x50>
 5a2:	4c 81       	ldd	r20, Y+4	; 0x04
 5a4:	5d 81       	ldd	r21, Y+5	; 0x05
 5a6:	41 15       	cp	r20, r1
 5a8:	51 05       	cpc	r21, r1
 5aa:	69 f0       	breq	.+26     	; 0x5c6 <GPIO_readPin+0x68>
 5ac:	6b c0       	rjmp	.+214    	; 0x684 <GPIO_readPin+0x126>
 5ae:	8c 81       	ldd	r24, Y+4	; 0x04
 5b0:	9d 81       	ldd	r25, Y+5	; 0x05
 5b2:	82 30       	cpi	r24, 0x02	; 2
 5b4:	91 05       	cpc	r25, r1
 5b6:	b9 f1       	breq	.+110    	; 0x626 <GPIO_readPin+0xc8>
 5b8:	2c 81       	ldd	r18, Y+4	; 0x04
 5ba:	3d 81       	ldd	r19, Y+5	; 0x05
 5bc:	23 30       	cpi	r18, 0x03	; 3
 5be:	31 05       	cpc	r19, r1
 5c0:	09 f4       	brne	.+2      	; 0x5c4 <GPIO_readPin+0x66>
 5c2:	49 c0       	rjmp	.+146    	; 0x656 <GPIO_readPin+0xf8>
 5c4:	5f c0       	rjmp	.+190    	; 0x684 <GPIO_readPin+0x126>
		{
		case PORTA_ID :
		/*------- Checking the Pin value by a Common macro function--------*/
			if( BIT_IS_SET(PINA,a_pinNum) )
 5c6:	e9 e3       	ldi	r30, 0x39	; 57
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	80 81       	ld	r24, Z
 5cc:	28 2f       	mov	r18, r24
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	8b 81       	ldd	r24, Y+3	; 0x03
 5d2:	88 2f       	mov	r24, r24
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	a9 01       	movw	r20, r18
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <GPIO_readPin+0x80>
 5da:	55 95       	asr	r21
 5dc:	47 95       	ror	r20
 5de:	8a 95       	dec	r24
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <GPIO_readPin+0x7c>
 5e2:	ca 01       	movw	r24, r20
 5e4:	81 70       	andi	r24, 0x01	; 1
 5e6:	90 70       	andi	r25, 0x00	; 0
 5e8:	88 23       	and	r24, r24
 5ea:	19 f0       	breq	.+6      	; 0x5f2 <GPIO_readPin+0x94>
			{
				a_pinValue=LOGIC_HIGH;
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	89 83       	std	Y+1, r24	; 0x01
 5f0:	49 c0       	rjmp	.+146    	; 0x684 <GPIO_readPin+0x126>

			}
			else
				a_pinValue=LOGIC_LOW;
 5f2:	19 82       	std	Y+1, r1	; 0x01
 5f4:	47 c0       	rjmp	.+142    	; 0x684 <GPIO_readPin+0x126>

			break;

		case PORTB_ID :
			/*------- Checking the Pin value by a Common macro function--------*/
			if( BIT_IS_SET(PINB,a_pinNum) )
 5f6:	e6 e3       	ldi	r30, 0x36	; 54
 5f8:	f0 e0       	ldi	r31, 0x00	; 0
 5fa:	80 81       	ld	r24, Z
 5fc:	28 2f       	mov	r18, r24
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	8b 81       	ldd	r24, Y+3	; 0x03
 602:	88 2f       	mov	r24, r24
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	a9 01       	movw	r20, r18
 608:	02 c0       	rjmp	.+4      	; 0x60e <GPIO_readPin+0xb0>
 60a:	55 95       	asr	r21
 60c:	47 95       	ror	r20
 60e:	8a 95       	dec	r24
 610:	e2 f7       	brpl	.-8      	; 0x60a <GPIO_readPin+0xac>
 612:	ca 01       	movw	r24, r20
 614:	81 70       	andi	r24, 0x01	; 1
 616:	90 70       	andi	r25, 0x00	; 0
 618:	88 23       	and	r24, r24
 61a:	19 f0       	breq	.+6      	; 0x622 <GPIO_readPin+0xc4>
			{
				a_pinValue=LOGIC_HIGH;
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	89 83       	std	Y+1, r24	; 0x01
 620:	31 c0       	rjmp	.+98     	; 0x684 <GPIO_readPin+0x126>

			}
			else
				a_pinValue=LOGIC_LOW;
 622:	19 82       	std	Y+1, r1	; 0x01
 624:	2f c0       	rjmp	.+94     	; 0x684 <GPIO_readPin+0x126>

					break;

		case PORTC_ID :
			/*------- Checking the Pin value by a Common macro function--------*/
			if( BIT_IS_SET(PINC,a_pinNum) )
 626:	e3 e3       	ldi	r30, 0x33	; 51
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	80 81       	ld	r24, Z
 62c:	28 2f       	mov	r18, r24
 62e:	30 e0       	ldi	r19, 0x00	; 0
 630:	8b 81       	ldd	r24, Y+3	; 0x03
 632:	88 2f       	mov	r24, r24
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	a9 01       	movw	r20, r18
 638:	02 c0       	rjmp	.+4      	; 0x63e <GPIO_readPin+0xe0>
 63a:	55 95       	asr	r21
 63c:	47 95       	ror	r20
 63e:	8a 95       	dec	r24
 640:	e2 f7       	brpl	.-8      	; 0x63a <GPIO_readPin+0xdc>
 642:	ca 01       	movw	r24, r20
 644:	81 70       	andi	r24, 0x01	; 1
 646:	90 70       	andi	r25, 0x00	; 0
 648:	88 23       	and	r24, r24
 64a:	19 f0       	breq	.+6      	; 0x652 <GPIO_readPin+0xf4>
			{
				a_pinValue=LOGIC_HIGH;
 64c:	81 e0       	ldi	r24, 0x01	; 1
 64e:	89 83       	std	Y+1, r24	; 0x01
 650:	19 c0       	rjmp	.+50     	; 0x684 <GPIO_readPin+0x126>

			}
			else
				a_pinValue=LOGIC_LOW;
 652:	19 82       	std	Y+1, r1	; 0x01
 654:	17 c0       	rjmp	.+46     	; 0x684 <GPIO_readPin+0x126>
					break;

		case PORTD_ID :
			/*------- Checking the Pin value by a Common macro function--------*/

			if( BIT_IS_SET(PIND,a_pinNum) )
 656:	e0 e3       	ldi	r30, 0x30	; 48
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	80 81       	ld	r24, Z
 65c:	28 2f       	mov	r18, r24
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	8b 81       	ldd	r24, Y+3	; 0x03
 662:	88 2f       	mov	r24, r24
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	a9 01       	movw	r20, r18
 668:	02 c0       	rjmp	.+4      	; 0x66e <GPIO_readPin+0x110>
 66a:	55 95       	asr	r21
 66c:	47 95       	ror	r20
 66e:	8a 95       	dec	r24
 670:	e2 f7       	brpl	.-8      	; 0x66a <GPIO_readPin+0x10c>
 672:	ca 01       	movw	r24, r20
 674:	81 70       	andi	r24, 0x01	; 1
 676:	90 70       	andi	r25, 0x00	; 0
 678:	88 23       	and	r24, r24
 67a:	19 f0       	breq	.+6      	; 0x682 <GPIO_readPin+0x124>
			{
				a_pinValue=LOGIC_HIGH;
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	89 83       	std	Y+1, r24	; 0x01
 680:	01 c0       	rjmp	.+2      	; 0x684 <GPIO_readPin+0x126>

			}
			else
				a_pinValue=LOGIC_LOW;
 682:	19 82       	std	Y+1, r1	; 0x01
		}


	}

	return a_pinValue;
 684:	59 81       	ldd	r21, Y+1	; 0x01
 686:	5e 83       	std	Y+6, r21	; 0x06
 688:	8e 81       	ldd	r24, Y+6	; 0x06
}
 68a:	26 96       	adiw	r28, 0x06	; 6
 68c:	0f b6       	in	r0, 0x3f	; 63
 68e:	f8 94       	cli
 690:	de bf       	out	0x3e, r29	; 62
 692:	0f be       	out	0x3f, r0	; 63
 694:	cd bf       	out	0x3d, r28	; 61
 696:	cf 91       	pop	r28
 698:	df 91       	pop	r29
 69a:	08 95       	ret

0000069c <GPIO_setupPortDirection>:


/* Setting the whole Port to be either Input or Output Port
 * */
void GPIO_setupPortDirection( uint8 a_portNum,GPIO_PortDirectionType a_direction )
{
 69c:	df 93       	push	r29
 69e:	cf 93       	push	r28
 6a0:	00 d0       	rcall	.+0      	; 0x6a2 <GPIO_setupPortDirection+0x6>
 6a2:	00 d0       	rcall	.+0      	; 0x6a4 <GPIO_setupPortDirection+0x8>
 6a4:	cd b7       	in	r28, 0x3d	; 61
 6a6:	de b7       	in	r29, 0x3e	; 62
 6a8:	89 83       	std	Y+1, r24	; 0x01
 6aa:	6a 83       	std	Y+2, r22	; 0x02
	/* Checking the number given by the user is valid  for Port number and Pin number
	 *
	 *
	 *  Direction of Port must be either PORT_INPUT or PORT_OUTPUT
	 *  */
	if( a_portNum>=GPIO_NUM_OF_PORTS || ((a_direction !=PORT_INPUT ) && (a_direction !=PORT_OUTPUT )) )
 6ac:	89 81       	ldd	r24, Y+1	; 0x01
 6ae:	84 30       	cpi	r24, 0x04	; 4
 6b0:	c0 f5       	brcc	.+112    	; 0x722 <GPIO_setupPortDirection+0x86>
 6b2:	8a 81       	ldd	r24, Y+2	; 0x02
 6b4:	88 23       	and	r24, r24
 6b6:	19 f0       	breq	.+6      	; 0x6be <GPIO_setupPortDirection+0x22>
 6b8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ba:	8f 3f       	cpi	r24, 0xFF	; 255
 6bc:	91 f5       	brne	.+100    	; 0x722 <GPIO_setupPortDirection+0x86>

		/*------- If the number is within the range--------*/
	else
	{
		/*------- Selecting the Port you will set the it's Direction --------*/
		switch ( a_portNum )
 6be:	89 81       	ldd	r24, Y+1	; 0x01
 6c0:	28 2f       	mov	r18, r24
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	3c 83       	std	Y+4, r19	; 0x04
 6c6:	2b 83       	std	Y+3, r18	; 0x03
 6c8:	8b 81       	ldd	r24, Y+3	; 0x03
 6ca:	9c 81       	ldd	r25, Y+4	; 0x04
 6cc:	81 30       	cpi	r24, 0x01	; 1
 6ce:	91 05       	cpc	r25, r1
 6d0:	d1 f0       	breq	.+52     	; 0x706 <GPIO_setupPortDirection+0x6a>
 6d2:	2b 81       	ldd	r18, Y+3	; 0x03
 6d4:	3c 81       	ldd	r19, Y+4	; 0x04
 6d6:	22 30       	cpi	r18, 0x02	; 2
 6d8:	31 05       	cpc	r19, r1
 6da:	2c f4       	brge	.+10     	; 0x6e6 <GPIO_setupPortDirection+0x4a>
 6dc:	8b 81       	ldd	r24, Y+3	; 0x03
 6de:	9c 81       	ldd	r25, Y+4	; 0x04
 6e0:	00 97       	sbiw	r24, 0x00	; 0
 6e2:	61 f0       	breq	.+24     	; 0x6fc <GPIO_setupPortDirection+0x60>
 6e4:	1e c0       	rjmp	.+60     	; 0x722 <GPIO_setupPortDirection+0x86>
 6e6:	2b 81       	ldd	r18, Y+3	; 0x03
 6e8:	3c 81       	ldd	r19, Y+4	; 0x04
 6ea:	22 30       	cpi	r18, 0x02	; 2
 6ec:	31 05       	cpc	r19, r1
 6ee:	81 f0       	breq	.+32     	; 0x710 <GPIO_setupPortDirection+0x74>
 6f0:	8b 81       	ldd	r24, Y+3	; 0x03
 6f2:	9c 81       	ldd	r25, Y+4	; 0x04
 6f4:	83 30       	cpi	r24, 0x03	; 3
 6f6:	91 05       	cpc	r25, r1
 6f8:	81 f0       	breq	.+32     	; 0x71a <GPIO_setupPortDirection+0x7e>
 6fa:	13 c0       	rjmp	.+38     	; 0x722 <GPIO_setupPortDirection+0x86>
		{
				case PORTA_ID :

				DDRA=a_direction;
 6fc:	ea e3       	ldi	r30, 0x3A	; 58
 6fe:	f0 e0       	ldi	r31, 0x00	; 0
 700:	8a 81       	ldd	r24, Y+2	; 0x02
 702:	80 83       	st	Z, r24
 704:	0e c0       	rjmp	.+28     	; 0x722 <GPIO_setupPortDirection+0x86>

					break;

				case PORTB_ID :

				DDRB=a_direction;
 706:	e7 e3       	ldi	r30, 0x37	; 55
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	8a 81       	ldd	r24, Y+2	; 0x02
 70c:	80 83       	st	Z, r24
 70e:	09 c0       	rjmp	.+18     	; 0x722 <GPIO_setupPortDirection+0x86>

					break;

				case PORTC_ID :

				DDRC=a_direction;
 710:	e4 e3       	ldi	r30, 0x34	; 52
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	8a 81       	ldd	r24, Y+2	; 0x02
 716:	80 83       	st	Z, r24
 718:	04 c0       	rjmp	.+8      	; 0x722 <GPIO_setupPortDirection+0x86>

					break;

				case PORTD_ID :

				DDRD=a_direction;
 71a:	e1 e3       	ldi	r30, 0x31	; 49
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	8a 81       	ldd	r24, Y+2	; 0x02
 720:	80 83       	st	Z, r24





}
 722:	0f 90       	pop	r0
 724:	0f 90       	pop	r0
 726:	0f 90       	pop	r0
 728:	0f 90       	pop	r0
 72a:	cf 91       	pop	r28
 72c:	df 91       	pop	r29
 72e:	08 95       	ret

00000730 <GPIO_writePort>:



/* Writing any value ranged between (0000 0000 "0x00") to (1111 1111 "0xFF") on a Port */
void GPIO_writePort( uint8 a_portNum,uint8 a_value )
{
 730:	df 93       	push	r29
 732:	cf 93       	push	r28
 734:	00 d0       	rcall	.+0      	; 0x736 <GPIO_writePort+0x6>
 736:	00 d0       	rcall	.+0      	; 0x738 <GPIO_writePort+0x8>
 738:	cd b7       	in	r28, 0x3d	; 61
 73a:	de b7       	in	r29, 0x3e	; 62
 73c:	89 83       	std	Y+1, r24	; 0x01
 73e:	6a 83       	std	Y+2, r22	; 0x02

	/* Checking the number given by the user is valid  for Port number and Pin number
	 *
	 */
	if( a_portNum>=GPIO_NUM_OF_PORTS )
 740:	89 81       	ldd	r24, Y+1	; 0x01
 742:	84 30       	cpi	r24, 0x04	; 4
 744:	90 f5       	brcc	.+100    	; 0x7aa <GPIO_writePort+0x7a>
			/*------- If the number is within the range--------*/
	else
	{

	/*------- Selecting the Port you will write a value on --------*/
	switch (a_portNum)
 746:	89 81       	ldd	r24, Y+1	; 0x01
 748:	28 2f       	mov	r18, r24
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	3c 83       	std	Y+4, r19	; 0x04
 74e:	2b 83       	std	Y+3, r18	; 0x03
 750:	8b 81       	ldd	r24, Y+3	; 0x03
 752:	9c 81       	ldd	r25, Y+4	; 0x04
 754:	81 30       	cpi	r24, 0x01	; 1
 756:	91 05       	cpc	r25, r1
 758:	d1 f0       	breq	.+52     	; 0x78e <GPIO_writePort+0x5e>
 75a:	2b 81       	ldd	r18, Y+3	; 0x03
 75c:	3c 81       	ldd	r19, Y+4	; 0x04
 75e:	22 30       	cpi	r18, 0x02	; 2
 760:	31 05       	cpc	r19, r1
 762:	2c f4       	brge	.+10     	; 0x76e <GPIO_writePort+0x3e>
 764:	8b 81       	ldd	r24, Y+3	; 0x03
 766:	9c 81       	ldd	r25, Y+4	; 0x04
 768:	00 97       	sbiw	r24, 0x00	; 0
 76a:	61 f0       	breq	.+24     	; 0x784 <GPIO_writePort+0x54>
 76c:	1e c0       	rjmp	.+60     	; 0x7aa <GPIO_writePort+0x7a>
 76e:	2b 81       	ldd	r18, Y+3	; 0x03
 770:	3c 81       	ldd	r19, Y+4	; 0x04
 772:	22 30       	cpi	r18, 0x02	; 2
 774:	31 05       	cpc	r19, r1
 776:	81 f0       	breq	.+32     	; 0x798 <GPIO_writePort+0x68>
 778:	8b 81       	ldd	r24, Y+3	; 0x03
 77a:	9c 81       	ldd	r25, Y+4	; 0x04
 77c:	83 30       	cpi	r24, 0x03	; 3
 77e:	91 05       	cpc	r25, r1
 780:	81 f0       	breq	.+32     	; 0x7a2 <GPIO_writePort+0x72>
 782:	13 c0       	rjmp	.+38     	; 0x7aa <GPIO_writePort+0x7a>
			{
			case PORTA_ID :
				PORTA=a_value;
 784:	eb e3       	ldi	r30, 0x3B	; 59
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	8a 81       	ldd	r24, Y+2	; 0x02
 78a:	80 83       	st	Z, r24
 78c:	0e c0       	rjmp	.+28     	; 0x7aa <GPIO_writePort+0x7a>
				break;

			case PORTB_ID :
				PORTB=a_value;
 78e:	e8 e3       	ldi	r30, 0x38	; 56
 790:	f0 e0       	ldi	r31, 0x00	; 0
 792:	8a 81       	ldd	r24, Y+2	; 0x02
 794:	80 83       	st	Z, r24
 796:	09 c0       	rjmp	.+18     	; 0x7aa <GPIO_writePort+0x7a>
						break;

			case PORTC_ID :
				PORTC=a_value;
 798:	e5 e3       	ldi	r30, 0x35	; 53
 79a:	f0 e0       	ldi	r31, 0x00	; 0
 79c:	8a 81       	ldd	r24, Y+2	; 0x02
 79e:	80 83       	st	Z, r24
 7a0:	04 c0       	rjmp	.+8      	; 0x7aa <GPIO_writePort+0x7a>
						break;

			case PORTD_ID :
				PORTD=a_value;
 7a2:	e2 e3       	ldi	r30, 0x32	; 50
 7a4:	f0 e0       	ldi	r31, 0x00	; 0
 7a6:	8a 81       	ldd	r24, Y+2	; 0x02
 7a8:	80 83       	st	Z, r24
						break;

			}
	}

}
 7aa:	0f 90       	pop	r0
 7ac:	0f 90       	pop	r0
 7ae:	0f 90       	pop	r0
 7b0:	0f 90       	pop	r0
 7b2:	cf 91       	pop	r28
 7b4:	df 91       	pop	r29
 7b6:	08 95       	ret

000007b8 <GPIO_readPort>:


/* Reading any value ranged between (0000 0000 "0x00") to (1111 1111 "0xFF") on a Port */
uint8 GPIO_readPort(uint8 a_portNum)
{
 7b8:	df 93       	push	r29
 7ba:	cf 93       	push	r28
 7bc:	00 d0       	rcall	.+0      	; 0x7be <GPIO_readPort+0x6>
 7be:	00 d0       	rcall	.+0      	; 0x7c0 <GPIO_readPort+0x8>
 7c0:	cd b7       	in	r28, 0x3d	; 61
 7c2:	de b7       	in	r29, 0x3e	; 62
 7c4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_portValue;
	/* Checking the number given by the user is valid  for Port number and Pin number */
	if( a_portNum>=GPIO_NUM_OF_PORTS )
 7c6:	8a 81       	ldd	r24, Y+2	; 0x02
 7c8:	84 30       	cpi	r24, 0x04	; 4
 7ca:	90 f5       	brcc	.+100    	; 0x830 <GPIO_readPort+0x78>
				/*------- If the number is within the range--------*/
		else
		{

			/*------- Selecting the Port you will read a value from --------*/
		switch (a_portNum)
 7cc:	8a 81       	ldd	r24, Y+2	; 0x02
 7ce:	28 2f       	mov	r18, r24
 7d0:	30 e0       	ldi	r19, 0x00	; 0
 7d2:	3c 83       	std	Y+4, r19	; 0x04
 7d4:	2b 83       	std	Y+3, r18	; 0x03
 7d6:	8b 81       	ldd	r24, Y+3	; 0x03
 7d8:	9c 81       	ldd	r25, Y+4	; 0x04
 7da:	81 30       	cpi	r24, 0x01	; 1
 7dc:	91 05       	cpc	r25, r1
 7de:	d1 f0       	breq	.+52     	; 0x814 <GPIO_readPort+0x5c>
 7e0:	2b 81       	ldd	r18, Y+3	; 0x03
 7e2:	3c 81       	ldd	r19, Y+4	; 0x04
 7e4:	22 30       	cpi	r18, 0x02	; 2
 7e6:	31 05       	cpc	r19, r1
 7e8:	2c f4       	brge	.+10     	; 0x7f4 <GPIO_readPort+0x3c>
 7ea:	8b 81       	ldd	r24, Y+3	; 0x03
 7ec:	9c 81       	ldd	r25, Y+4	; 0x04
 7ee:	00 97       	sbiw	r24, 0x00	; 0
 7f0:	61 f0       	breq	.+24     	; 0x80a <GPIO_readPort+0x52>
 7f2:	1e c0       	rjmp	.+60     	; 0x830 <GPIO_readPort+0x78>
 7f4:	2b 81       	ldd	r18, Y+3	; 0x03
 7f6:	3c 81       	ldd	r19, Y+4	; 0x04
 7f8:	22 30       	cpi	r18, 0x02	; 2
 7fa:	31 05       	cpc	r19, r1
 7fc:	81 f0       	breq	.+32     	; 0x81e <GPIO_readPort+0x66>
 7fe:	8b 81       	ldd	r24, Y+3	; 0x03
 800:	9c 81       	ldd	r25, Y+4	; 0x04
 802:	83 30       	cpi	r24, 0x03	; 3
 804:	91 05       	cpc	r25, r1
 806:	81 f0       	breq	.+32     	; 0x828 <GPIO_readPort+0x70>
 808:	13 c0       	rjmp	.+38     	; 0x830 <GPIO_readPort+0x78>
				{
				case PORTA_ID :

					a_portValue=PINA;
 80a:	e9 e3       	ldi	r30, 0x39	; 57
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	80 81       	ld	r24, Z
 810:	89 83       	std	Y+1, r24	; 0x01
 812:	0e c0       	rjmp	.+28     	; 0x830 <GPIO_readPort+0x78>

					break;

				case PORTB_ID :

					a_portValue=PINB;
 814:	e6 e3       	ldi	r30, 0x36	; 54
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	80 81       	ld	r24, Z
 81a:	89 83       	std	Y+1, r24	; 0x01
 81c:	09 c0       	rjmp	.+18     	; 0x830 <GPIO_readPort+0x78>

					break;

				case PORTC_ID :

					a_portValue=PINC;
 81e:	e3 e3       	ldi	r30, 0x33	; 51
 820:	f0 e0       	ldi	r31, 0x00	; 0
 822:	80 81       	ld	r24, Z
 824:	89 83       	std	Y+1, r24	; 0x01
 826:	04 c0       	rjmp	.+8      	; 0x830 <GPIO_readPort+0x78>

					break;

				case PORTD_ID :

					a_portValue=PIND;
 828:	e0 e3       	ldi	r30, 0x30	; 48
 82a:	f0 e0       	ldi	r31, 0x00	; 0
 82c:	80 81       	ld	r24, Z
 82e:	89 83       	std	Y+1, r24	; 0x01
					;
				}

		}

	return a_portValue;
 830:	89 81       	ldd	r24, Y+1	; 0x01

}
 832:	0f 90       	pop	r0
 834:	0f 90       	pop	r0
 836:	0f 90       	pop	r0
 838:	0f 90       	pop	r0
 83a:	cf 91       	pop	r28
 83c:	df 91       	pop	r29
 83e:	08 95       	ret

00000840 <main>:
#include "gpio.h"
#include "uart.h"

int main(void)
{
 840:	df 93       	push	r29
 842:	cf 93       	push	r28
 844:	0f 92       	push	r0
 846:	cd b7       	in	r28, 0x3d	; 61
 848:	de b7       	in	r29, 0x3e	; 62
	UART_init(9600);
 84a:	60 e8       	ldi	r22, 0x80	; 128
 84c:	75 e2       	ldi	r23, 0x25	; 37
 84e:	80 e0       	ldi	r24, 0x00	; 0
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	0e 94 76 04 	call	0x8ec	; 0x8ec <UART_init>
	uint8 value;
	GPIO_setupPinDirection(PORTA_ID,PIN0_ID, PIN_OUTPUT);
 856:	80 e0       	ldi	r24, 0x00	; 0
 858:	60 e0       	ldi	r22, 0x00	; 0
 85a:	41 e0       	ldi	r20, 0x01	; 1
 85c:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTA_ID,PIN1_ID, PIN_OUTPUT);
 860:	80 e0       	ldi	r24, 0x00	; 0
 862:	61 e0       	ldi	r22, 0x01	; 1
 864:	41 e0       	ldi	r20, 0x01	; 1
 866:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTA_ID,PIN2_ID, PIN_OUTPUT);
 86a:	80 e0       	ldi	r24, 0x00	; 0
 86c:	62 e0       	ldi	r22, 0x02	; 2
 86e:	41 e0       	ldi	r20, 0x01	; 1
 870:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_setupPinDirection>
	while(1)
	{
		value=UART_recieveByte();
 874:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <UART_recieveByte>
 878:	89 83       	std	Y+1, r24	; 0x01

		if(value == 1)
 87a:	89 81       	ldd	r24, Y+1	; 0x01
 87c:	81 30       	cpi	r24, 0x01	; 1
 87e:	81 f4       	brne	.+32     	; 0x8a0 <__stack+0x41>
		{
GPIO_writePin(PORTA_ID, PIN0_ID, LOGIC_HIGH);
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	60 e0       	ldi	r22, 0x00	; 0
 884:	41 e0       	ldi	r20, 0x01	; 1
 886:	0e 94 30 01 	call	0x260	; 0x260 <GPIO_writePin>
GPIO_writePin(PORTA_ID, PIN1_ID, LOGIC_LOW);
 88a:	80 e0       	ldi	r24, 0x00	; 0
 88c:	61 e0       	ldi	r22, 0x01	; 1
 88e:	40 e0       	ldi	r20, 0x00	; 0
 890:	0e 94 30 01 	call	0x260	; 0x260 <GPIO_writePin>
GPIO_writePin(PORTA_ID, PIN2_ID, LOGIC_LOW);
 894:	80 e0       	ldi	r24, 0x00	; 0
 896:	62 e0       	ldi	r22, 0x02	; 2
 898:	40 e0       	ldi	r20, 0x00	; 0
 89a:	0e 94 30 01 	call	0x260	; 0x260 <GPIO_writePin>
 89e:	ea cf       	rjmp	.-44     	; 0x874 <__stack+0x15>

		}
		else if(value == 2)
 8a0:	89 81       	ldd	r24, Y+1	; 0x01
 8a2:	82 30       	cpi	r24, 0x02	; 2
 8a4:	81 f4       	brne	.+32     	; 0x8c6 <__stack+0x67>
		{

			GPIO_writePin(PORTA_ID, PIN0_ID, LOGIC_LOW);
 8a6:	80 e0       	ldi	r24, 0x00	; 0
 8a8:	60 e0       	ldi	r22, 0x00	; 0
 8aa:	40 e0       	ldi	r20, 0x00	; 0
 8ac:	0e 94 30 01 	call	0x260	; 0x260 <GPIO_writePin>
			GPIO_writePin(PORTA_ID, PIN1_ID, LOGIC_HIGH);
 8b0:	80 e0       	ldi	r24, 0x00	; 0
 8b2:	61 e0       	ldi	r22, 0x01	; 1
 8b4:	41 e0       	ldi	r20, 0x01	; 1
 8b6:	0e 94 30 01 	call	0x260	; 0x260 <GPIO_writePin>
			GPIO_writePin(PORTA_ID, PIN2_ID, LOGIC_LOW);
 8ba:	80 e0       	ldi	r24, 0x00	; 0
 8bc:	62 e0       	ldi	r22, 0x02	; 2
 8be:	40 e0       	ldi	r20, 0x00	; 0
 8c0:	0e 94 30 01 	call	0x260	; 0x260 <GPIO_writePin>
 8c4:	d7 cf       	rjmp	.-82     	; 0x874 <__stack+0x15>


		}
		else if(value == 3)
 8c6:	89 81       	ldd	r24, Y+1	; 0x01
 8c8:	83 30       	cpi	r24, 0x03	; 3
 8ca:	a1 f6       	brne	.-88     	; 0x874 <__stack+0x15>
		{
			GPIO_writePin(PORTA_ID, PIN0_ID, LOGIC_LOW);
 8cc:	80 e0       	ldi	r24, 0x00	; 0
 8ce:	60 e0       	ldi	r22, 0x00	; 0
 8d0:	40 e0       	ldi	r20, 0x00	; 0
 8d2:	0e 94 30 01 	call	0x260	; 0x260 <GPIO_writePin>
			GPIO_writePin(PORTA_ID, PIN1_ID, LOGIC_LOW);
 8d6:	80 e0       	ldi	r24, 0x00	; 0
 8d8:	61 e0       	ldi	r22, 0x01	; 1
 8da:	40 e0       	ldi	r20, 0x00	; 0
 8dc:	0e 94 30 01 	call	0x260	; 0x260 <GPIO_writePin>
			GPIO_writePin(PORTA_ID, PIN2_ID, LOGIC_HIGH);
 8e0:	80 e0       	ldi	r24, 0x00	; 0
 8e2:	62 e0       	ldi	r22, 0x02	; 2
 8e4:	41 e0       	ldi	r20, 0x01	; 1
 8e6:	0e 94 30 01 	call	0x260	; 0x260 <GPIO_writePin>
 8ea:	c4 cf       	rjmp	.-120    	; 0x874 <__stack+0x15>

000008ec <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
 8ec:	df 93       	push	r29
 8ee:	cf 93       	push	r28
 8f0:	00 d0       	rcall	.+0      	; 0x8f2 <UART_init+0x6>
 8f2:	00 d0       	rcall	.+0      	; 0x8f4 <UART_init+0x8>
 8f4:	00 d0       	rcall	.+0      	; 0x8f6 <UART_init+0xa>
 8f6:	cd b7       	in	r28, 0x3d	; 61
 8f8:	de b7       	in	r29, 0x3e	; 62
 8fa:	6b 83       	std	Y+3, r22	; 0x03
 8fc:	7c 83       	std	Y+4, r23	; 0x04
 8fe:	8d 83       	std	Y+5, r24	; 0x05
 900:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
 902:	1a 82       	std	Y+2, r1	; 0x02
 904:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
 906:	eb e2       	ldi	r30, 0x2B	; 43
 908:	f0 e0       	ldi	r31, 0x00	; 0
 90a:	82 e0       	ldi	r24, 0x02	; 2
 90c:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
 90e:	ea e2       	ldi	r30, 0x2A	; 42
 910:	f0 e0       	ldi	r31, 0x00	; 0
 912:	88 e1       	ldi	r24, 0x18	; 24
 914:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
 916:	e0 e4       	ldi	r30, 0x40	; 64
 918:	f0 e0       	ldi	r31, 0x00	; 0
 91a:	86 e8       	ldi	r24, 0x86	; 134
 91c:	80 83       	st	Z, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
 91e:	8b 81       	ldd	r24, Y+3	; 0x03
 920:	9c 81       	ldd	r25, Y+4	; 0x04
 922:	ad 81       	ldd	r26, Y+5	; 0x05
 924:	be 81       	ldd	r27, Y+6	; 0x06
 926:	88 0f       	add	r24, r24
 928:	99 1f       	adc	r25, r25
 92a:	aa 1f       	adc	r26, r26
 92c:	bb 1f       	adc	r27, r27
 92e:	88 0f       	add	r24, r24
 930:	99 1f       	adc	r25, r25
 932:	aa 1f       	adc	r26, r26
 934:	bb 1f       	adc	r27, r27
 936:	88 0f       	add	r24, r24
 938:	99 1f       	adc	r25, r25
 93a:	aa 1f       	adc	r26, r26
 93c:	bb 1f       	adc	r27, r27
 93e:	9c 01       	movw	r18, r24
 940:	ad 01       	movw	r20, r26
 942:	80 e4       	ldi	r24, 0x40	; 64
 944:	92 e4       	ldi	r25, 0x42	; 66
 946:	af e0       	ldi	r26, 0x0F	; 15
 948:	b0 e0       	ldi	r27, 0x00	; 0
 94a:	bc 01       	movw	r22, r24
 94c:	cd 01       	movw	r24, r26
 94e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__udivmodsi4>
 952:	da 01       	movw	r26, r20
 954:	c9 01       	movw	r24, r18
 956:	01 97       	sbiw	r24, 0x01	; 1
 958:	9a 83       	std	Y+2, r25	; 0x02
 95a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
 95c:	e0 e4       	ldi	r30, 0x40	; 64
 95e:	f0 e0       	ldi	r31, 0x00	; 0
 960:	89 81       	ldd	r24, Y+1	; 0x01
 962:	9a 81       	ldd	r25, Y+2	; 0x02
 964:	89 2f       	mov	r24, r25
 966:	99 27       	eor	r25, r25
 968:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
 96a:	e9 e2       	ldi	r30, 0x29	; 41
 96c:	f0 e0       	ldi	r31, 0x00	; 0
 96e:	89 81       	ldd	r24, Y+1	; 0x01
 970:	80 83       	st	Z, r24
}
 972:	26 96       	adiw	r28, 0x06	; 6
 974:	0f b6       	in	r0, 0x3f	; 63
 976:	f8 94       	cli
 978:	de bf       	out	0x3e, r29	; 62
 97a:	0f be       	out	0x3f, r0	; 63
 97c:	cd bf       	out	0x3d, r28	; 61
 97e:	cf 91       	pop	r28
 980:	df 91       	pop	r29
 982:	08 95       	ret

00000984 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
 984:	df 93       	push	r29
 986:	cf 93       	push	r28
 988:	0f 92       	push	r0
 98a:	cd b7       	in	r28, 0x3d	; 61
 98c:	de b7       	in	r29, 0x3e	; 62
 98e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
 990:	eb e2       	ldi	r30, 0x2B	; 43
 992:	f0 e0       	ldi	r31, 0x00	; 0
 994:	80 81       	ld	r24, Z
 996:	88 2f       	mov	r24, r24
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	80 72       	andi	r24, 0x20	; 32
 99c:	90 70       	andi	r25, 0x00	; 0
 99e:	00 97       	sbiw	r24, 0x00	; 0
 9a0:	b9 f3       	breq	.-18     	; 0x990 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
 9a2:	ec e2       	ldi	r30, 0x2C	; 44
 9a4:	f0 e0       	ldi	r31, 0x00	; 0
 9a6:	89 81       	ldd	r24, Y+1	; 0x01
 9a8:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
 9aa:	0f 90       	pop	r0
 9ac:	cf 91       	pop	r28
 9ae:	df 91       	pop	r29
 9b0:	08 95       	ret

000009b2 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
 9b2:	df 93       	push	r29
 9b4:	cf 93       	push	r28
 9b6:	cd b7       	in	r28, 0x3d	; 61
 9b8:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
 9ba:	eb e2       	ldi	r30, 0x2B	; 43
 9bc:	f0 e0       	ldi	r31, 0x00	; 0
 9be:	80 81       	ld	r24, Z
 9c0:	88 23       	and	r24, r24
 9c2:	dc f7       	brge	.-10     	; 0x9ba <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
 9c4:	ec e2       	ldi	r30, 0x2C	; 44
 9c6:	f0 e0       	ldi	r31, 0x00	; 0
 9c8:	80 81       	ld	r24, Z
}
 9ca:	cf 91       	pop	r28
 9cc:	df 91       	pop	r29
 9ce:	08 95       	ret

000009d0 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
 9d0:	df 93       	push	r29
 9d2:	cf 93       	push	r28
 9d4:	00 d0       	rcall	.+0      	; 0x9d6 <UART_sendString+0x6>
 9d6:	0f 92       	push	r0
 9d8:	cd b7       	in	r28, 0x3d	; 61
 9da:	de b7       	in	r29, 0x3e	; 62
 9dc:	9b 83       	std	Y+3, r25	; 0x03
 9de:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
 9e0:	19 82       	std	Y+1, r1	; 0x01
 9e2:	0e c0       	rjmp	.+28     	; 0xa00 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
 9e4:	89 81       	ldd	r24, Y+1	; 0x01
 9e6:	28 2f       	mov	r18, r24
 9e8:	30 e0       	ldi	r19, 0x00	; 0
 9ea:	8a 81       	ldd	r24, Y+2	; 0x02
 9ec:	9b 81       	ldd	r25, Y+3	; 0x03
 9ee:	fc 01       	movw	r30, r24
 9f0:	e2 0f       	add	r30, r18
 9f2:	f3 1f       	adc	r31, r19
 9f4:	80 81       	ld	r24, Z
 9f6:	0e 94 c2 04 	call	0x984	; 0x984 <UART_sendByte>
		i++;
 9fa:	89 81       	ldd	r24, Y+1	; 0x01
 9fc:	8f 5f       	subi	r24, 0xFF	; 255
 9fe:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
 a00:	89 81       	ldd	r24, Y+1	; 0x01
 a02:	28 2f       	mov	r18, r24
 a04:	30 e0       	ldi	r19, 0x00	; 0
 a06:	8a 81       	ldd	r24, Y+2	; 0x02
 a08:	9b 81       	ldd	r25, Y+3	; 0x03
 a0a:	fc 01       	movw	r30, r24
 a0c:	e2 0f       	add	r30, r18
 a0e:	f3 1f       	adc	r31, r19
 a10:	80 81       	ld	r24, Z
 a12:	88 23       	and	r24, r24
 a14:	39 f7       	brne	.-50     	; 0x9e4 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
 a16:	0f 90       	pop	r0
 a18:	0f 90       	pop	r0
 a1a:	0f 90       	pop	r0
 a1c:	cf 91       	pop	r28
 a1e:	df 91       	pop	r29
 a20:	08 95       	ret

00000a22 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
 a22:	0f 93       	push	r16
 a24:	1f 93       	push	r17
 a26:	df 93       	push	r29
 a28:	cf 93       	push	r28
 a2a:	00 d0       	rcall	.+0      	; 0xa2c <UART_receiveString+0xa>
 a2c:	0f 92       	push	r0
 a2e:	cd b7       	in	r28, 0x3d	; 61
 a30:	de b7       	in	r29, 0x3e	; 62
 a32:	9b 83       	std	Y+3, r25	; 0x03
 a34:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
 a36:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
 a38:	89 81       	ldd	r24, Y+1	; 0x01
 a3a:	28 2f       	mov	r18, r24
 a3c:	30 e0       	ldi	r19, 0x00	; 0
 a3e:	8a 81       	ldd	r24, Y+2	; 0x02
 a40:	9b 81       	ldd	r25, Y+3	; 0x03
 a42:	8c 01       	movw	r16, r24
 a44:	02 0f       	add	r16, r18
 a46:	13 1f       	adc	r17, r19
 a48:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <UART_recieveByte>
 a4c:	f8 01       	movw	r30, r16
 a4e:	80 83       	st	Z, r24
 a50:	0f c0       	rjmp	.+30     	; 0xa70 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
 a52:	89 81       	ldd	r24, Y+1	; 0x01
 a54:	8f 5f       	subi	r24, 0xFF	; 255
 a56:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
 a58:	89 81       	ldd	r24, Y+1	; 0x01
 a5a:	28 2f       	mov	r18, r24
 a5c:	30 e0       	ldi	r19, 0x00	; 0
 a5e:	8a 81       	ldd	r24, Y+2	; 0x02
 a60:	9b 81       	ldd	r25, Y+3	; 0x03
 a62:	8c 01       	movw	r16, r24
 a64:	02 0f       	add	r16, r18
 a66:	13 1f       	adc	r17, r19
 a68:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <UART_recieveByte>
 a6c:	f8 01       	movw	r30, r16
 a6e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
 a70:	89 81       	ldd	r24, Y+1	; 0x01
 a72:	28 2f       	mov	r18, r24
 a74:	30 e0       	ldi	r19, 0x00	; 0
 a76:	8a 81       	ldd	r24, Y+2	; 0x02
 a78:	9b 81       	ldd	r25, Y+3	; 0x03
 a7a:	fc 01       	movw	r30, r24
 a7c:	e2 0f       	add	r30, r18
 a7e:	f3 1f       	adc	r31, r19
 a80:	80 81       	ld	r24, Z
 a82:	83 32       	cpi	r24, 0x23	; 35
 a84:	31 f7       	brne	.-52     	; 0xa52 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
 a86:	89 81       	ldd	r24, Y+1	; 0x01
 a88:	28 2f       	mov	r18, r24
 a8a:	30 e0       	ldi	r19, 0x00	; 0
 a8c:	8a 81       	ldd	r24, Y+2	; 0x02
 a8e:	9b 81       	ldd	r25, Y+3	; 0x03
 a90:	fc 01       	movw	r30, r24
 a92:	e2 0f       	add	r30, r18
 a94:	f3 1f       	adc	r31, r19
 a96:	10 82       	st	Z, r1
}
 a98:	0f 90       	pop	r0
 a9a:	0f 90       	pop	r0
 a9c:	0f 90       	pop	r0
 a9e:	cf 91       	pop	r28
 aa0:	df 91       	pop	r29
 aa2:	1f 91       	pop	r17
 aa4:	0f 91       	pop	r16
 aa6:	08 95       	ret

00000aa8 <__udivmodsi4>:
 aa8:	a1 e2       	ldi	r26, 0x21	; 33
 aaa:	1a 2e       	mov	r1, r26
 aac:	aa 1b       	sub	r26, r26
 aae:	bb 1b       	sub	r27, r27
 ab0:	fd 01       	movw	r30, r26
 ab2:	0d c0       	rjmp	.+26     	; 0xace <__udivmodsi4_ep>

00000ab4 <__udivmodsi4_loop>:
 ab4:	aa 1f       	adc	r26, r26
 ab6:	bb 1f       	adc	r27, r27
 ab8:	ee 1f       	adc	r30, r30
 aba:	ff 1f       	adc	r31, r31
 abc:	a2 17       	cp	r26, r18
 abe:	b3 07       	cpc	r27, r19
 ac0:	e4 07       	cpc	r30, r20
 ac2:	f5 07       	cpc	r31, r21
 ac4:	20 f0       	brcs	.+8      	; 0xace <__udivmodsi4_ep>
 ac6:	a2 1b       	sub	r26, r18
 ac8:	b3 0b       	sbc	r27, r19
 aca:	e4 0b       	sbc	r30, r20
 acc:	f5 0b       	sbc	r31, r21

00000ace <__udivmodsi4_ep>:
 ace:	66 1f       	adc	r22, r22
 ad0:	77 1f       	adc	r23, r23
 ad2:	88 1f       	adc	r24, r24
 ad4:	99 1f       	adc	r25, r25
 ad6:	1a 94       	dec	r1
 ad8:	69 f7       	brne	.-38     	; 0xab4 <__udivmodsi4_loop>
 ada:	60 95       	com	r22
 adc:	70 95       	com	r23
 ade:	80 95       	com	r24
 ae0:	90 95       	com	r25
 ae2:	9b 01       	movw	r18, r22
 ae4:	ac 01       	movw	r20, r24
 ae6:	bd 01       	movw	r22, r26
 ae8:	cf 01       	movw	r24, r30
 aea:	08 95       	ret

00000aec <_exit>:
 aec:	f8 94       	cli

00000aee <__stop_program>:
 aee:	ff cf       	rjmp	.-2      	; 0xaee <__stop_program>
