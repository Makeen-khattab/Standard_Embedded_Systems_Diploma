
icuex2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000273e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000112  00800060  0000273e  000027d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800172  00800172  000028e4  2**0
                  ALLOC
  3 .stab         000020b8  00000000  00000000  000028e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010fc  00000000  00000000  0000499c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00005a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  00005c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  00005deb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  00007dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  00008f6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00009f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000a10c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000a3cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ac7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e7       	ldi	r26, 0x72	; 114
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <main>
      8a:	0c 94 9d 13 	jmp	0x273a	; 0x273a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 66 13 	jmp	0x26cc	; 0x26cc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e6       	ldi	r26, 0x68	; 104
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 66 13 	jmp	0x26cc	; 0x26cc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e6       	ldi	r24, 0x68	; 104
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 82 13 	jmp	0x2704	; 0x2704 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 72 13 	jmp	0x26e4	; 0x26e4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 8e 13 	jmp	0x271c	; 0x271c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 76 13 	jmp	0x26ec	; 0x26ec <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 92 13 	jmp	0x2724	; 0x2724 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e0 59       	subi	r30, 0x90	; 144
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <GPIO_setupPinDirection>:
/*-----------------------FUNCTION Definitions------------------*/


/* Setting the pin on each port to be either Input pin or Output pin */
void GPIO_setupPinDirection( uint8 a_portNum,uint8 a_pinNum,GPIO_PinDirectionType a_direction )
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	00 d0       	rcall	.+0      	; 0xcdc <GPIO_setupPinDirection+0x6>
     cdc:	00 d0       	rcall	.+0      	; 0xcde <GPIO_setupPinDirection+0x8>
     cde:	0f 92       	push	r0
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	89 83       	std	Y+1, r24	; 0x01
     ce6:	6a 83       	std	Y+2, r22	; 0x02
     ce8:	4b 83       	std	Y+3, r20	; 0x03

	/* Checking the number given by the user is valid  for Port number and Pin number */
	if( a_portNum>=GPIO_NUM_OF_PORTS || a_pinNum>=GPIO_NUM_OF_PINS )
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	84 30       	cpi	r24, 0x04	; 4
     cee:	08 f0       	brcs	.+2      	; 0xcf2 <GPIO_setupPinDirection+0x1c>
     cf0:	e4 c0       	rjmp	.+456    	; 0xeba <GPIO_setupPinDirection+0x1e4>
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	88 30       	cpi	r24, 0x08	; 8
     cf6:	08 f0       	brcs	.+2      	; 0xcfa <GPIO_setupPinDirection+0x24>
     cf8:	e0 c0       	rjmp	.+448    	; 0xeba <GPIO_setupPinDirection+0x1e4>
	/*------- If the number is within the range--------*/
	else
	{

		/*------- Selecting the Port you will set the Pin Direction in --------*/
		switch ( a_portNum )
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	28 2f       	mov	r18, r24
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	3d 83       	std	Y+5, r19	; 0x05
     d02:	2c 83       	std	Y+4, r18	; 0x04
     d04:	8c 81       	ldd	r24, Y+4	; 0x04
     d06:	9d 81       	ldd	r25, Y+5	; 0x05
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	91 05       	cpc	r25, r1
     d0c:	09 f4       	brne	.+2      	; 0xd10 <GPIO_setupPinDirection+0x3a>
     d0e:	47 c0       	rjmp	.+142    	; 0xd9e <GPIO_setupPinDirection+0xc8>
     d10:	2c 81       	ldd	r18, Y+4	; 0x04
     d12:	3d 81       	ldd	r19, Y+5	; 0x05
     d14:	22 30       	cpi	r18, 0x02	; 2
     d16:	31 05       	cpc	r19, r1
     d18:	2c f4       	brge	.+10     	; 0xd24 <GPIO_setupPinDirection+0x4e>
     d1a:	8c 81       	ldd	r24, Y+4	; 0x04
     d1c:	9d 81       	ldd	r25, Y+5	; 0x05
     d1e:	00 97       	sbiw	r24, 0x00	; 0
     d20:	71 f0       	breq	.+28     	; 0xd3e <GPIO_setupPinDirection+0x68>
     d22:	cb c0       	rjmp	.+406    	; 0xeba <GPIO_setupPinDirection+0x1e4>
     d24:	2c 81       	ldd	r18, Y+4	; 0x04
     d26:	3d 81       	ldd	r19, Y+5	; 0x05
     d28:	22 30       	cpi	r18, 0x02	; 2
     d2a:	31 05       	cpc	r19, r1
     d2c:	09 f4       	brne	.+2      	; 0xd30 <GPIO_setupPinDirection+0x5a>
     d2e:	67 c0       	rjmp	.+206    	; 0xdfe <GPIO_setupPinDirection+0x128>
     d30:	8c 81       	ldd	r24, Y+4	; 0x04
     d32:	9d 81       	ldd	r25, Y+5	; 0x05
     d34:	83 30       	cpi	r24, 0x03	; 3
     d36:	91 05       	cpc	r25, r1
     d38:	09 f4       	brne	.+2      	; 0xd3c <GPIO_setupPinDirection+0x66>
     d3a:	91 c0       	rjmp	.+290    	; 0xe5e <GPIO_setupPinDirection+0x188>
     d3c:	be c0       	rjmp	.+380    	; 0xeba <GPIO_setupPinDirection+0x1e4>
		{

				case PORTA_ID :

		/*------- Selecting the Mode you will set the Pin Direction to --------*/
					if( a_direction == PIN_INPUT)
     d3e:	8b 81       	ldd	r24, Y+3	; 0x03
     d40:	88 23       	and	r24, r24
     d42:	a9 f4       	brne	.+42     	; 0xd6e <GPIO_setupPinDirection+0x98>
					{

						/* Common Macro function to clear a bit*/
						CLEAR_BIT( DDRA,a_pinNum );
     d44:	aa e3       	ldi	r26, 0x3A	; 58
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	ea e3       	ldi	r30, 0x3A	; 58
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	48 2f       	mov	r20, r24
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	28 2f       	mov	r18, r24
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	02 2e       	mov	r0, r18
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <GPIO_setupPinDirection+0x8c>
     d5e:	88 0f       	add	r24, r24
     d60:	99 1f       	adc	r25, r25
     d62:	0a 94       	dec	r0
     d64:	e2 f7       	brpl	.-8      	; 0xd5e <GPIO_setupPinDirection+0x88>
     d66:	80 95       	com	r24
     d68:	84 23       	and	r24, r20
     d6a:	8c 93       	st	X, r24
     d6c:	a6 c0       	rjmp	.+332    	; 0xeba <GPIO_setupPinDirection+0x1e4>

					}
					else if ( a_direction == PIN_OUTPUT )
     d6e:	8b 81       	ldd	r24, Y+3	; 0x03
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	09 f0       	breq	.+2      	; 0xd76 <GPIO_setupPinDirection+0xa0>
     d74:	a2 c0       	rjmp	.+324    	; 0xeba <GPIO_setupPinDirection+0x1e4>
					{

						/* Common Macro function to Set a bit to 1*/
						SET_BIT( DDRA,a_pinNum );
     d76:	aa e3       	ldi	r26, 0x3A	; 58
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	ea e3       	ldi	r30, 0x3A	; 58
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	48 2f       	mov	r20, r24
     d82:	8a 81       	ldd	r24, Y+2	; 0x02
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	02 2e       	mov	r0, r18
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <GPIO_setupPinDirection+0xbe>
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	0a 94       	dec	r0
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <GPIO_setupPinDirection+0xba>
     d98:	84 2b       	or	r24, r20
     d9a:	8c 93       	st	X, r24
     d9c:	8e c0       	rjmp	.+284    	; 0xeba <GPIO_setupPinDirection+0x1e4>
					break;

				case PORTB_ID :

				/*------- Selecting the Mode you will set the Pin Direction to --------*/
					if( a_direction == PIN_INPUT )
     d9e:	8b 81       	ldd	r24, Y+3	; 0x03
     da0:	88 23       	and	r24, r24
     da2:	a9 f4       	brne	.+42     	; 0xdce <GPIO_setupPinDirection+0xf8>
					{

						/* Common Macro function to clear a bit*/
						 CLEAR_BIT( DDRB,a_pinNum );
     da4:	a7 e3       	ldi	r26, 0x37	; 55
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	e7 e3       	ldi	r30, 0x37	; 55
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	48 2f       	mov	r20, r24
     db0:	8a 81       	ldd	r24, Y+2	; 0x02
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	02 2e       	mov	r0, r18
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <GPIO_setupPinDirection+0xec>
     dbe:	88 0f       	add	r24, r24
     dc0:	99 1f       	adc	r25, r25
     dc2:	0a 94       	dec	r0
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <GPIO_setupPinDirection+0xe8>
     dc6:	80 95       	com	r24
     dc8:	84 23       	and	r24, r20
     dca:	8c 93       	st	X, r24
     dcc:	76 c0       	rjmp	.+236    	; 0xeba <GPIO_setupPinDirection+0x1e4>

					}

					else if ( a_direction == PIN_OUTPUT )
     dce:	8b 81       	ldd	r24, Y+3	; 0x03
     dd0:	81 30       	cpi	r24, 0x01	; 1
     dd2:	09 f0       	breq	.+2      	; 0xdd6 <GPIO_setupPinDirection+0x100>
     dd4:	72 c0       	rjmp	.+228    	; 0xeba <GPIO_setupPinDirection+0x1e4>
					{

						/* Common Macro function to Set a bit to 1*/
						SET_BIT( DDRB,a_pinNum );
     dd6:	a7 e3       	ldi	r26, 0x37	; 55
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	e7 e3       	ldi	r30, 0x37	; 55
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	48 2f       	mov	r20, r24
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	02 2e       	mov	r0, r18
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <GPIO_setupPinDirection+0x11e>
     df0:	88 0f       	add	r24, r24
     df2:	99 1f       	adc	r25, r25
     df4:	0a 94       	dec	r0
     df6:	e2 f7       	brpl	.-8      	; 0xdf0 <GPIO_setupPinDirection+0x11a>
     df8:	84 2b       	or	r24, r20
     dfa:	8c 93       	st	X, r24
     dfc:	5e c0       	rjmp	.+188    	; 0xeba <GPIO_setupPinDirection+0x1e4>
					break;

				case PORTC_ID :

					/*------- Selecting the Mode you will set the Pin Direction to --------*/
					if( a_direction == PIN_INPUT )
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	88 23       	and	r24, r24
     e02:	a9 f4       	brne	.+42     	; 0xe2e <GPIO_setupPinDirection+0x158>
					{
					/* Common Macro function to clear a bit*/
						 CLEAR_BIT( DDRC,a_pinNum );
     e04:	a4 e3       	ldi	r26, 0x34	; 52
     e06:	b0 e0       	ldi	r27, 0x00	; 0
     e08:	e4 e3       	ldi	r30, 0x34	; 52
     e0a:	f0 e0       	ldi	r31, 0x00	; 0
     e0c:	80 81       	ld	r24, Z
     e0e:	48 2f       	mov	r20, r24
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	02 2e       	mov	r0, r18
     e1c:	02 c0       	rjmp	.+4      	; 0xe22 <GPIO_setupPinDirection+0x14c>
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	0a 94       	dec	r0
     e24:	e2 f7       	brpl	.-8      	; 0xe1e <GPIO_setupPinDirection+0x148>
     e26:	80 95       	com	r24
     e28:	84 23       	and	r24, r20
     e2a:	8c 93       	st	X, r24
     e2c:	46 c0       	rjmp	.+140    	; 0xeba <GPIO_setupPinDirection+0x1e4>

					}

					else if ( a_direction == PIN_OUTPUT )
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	81 30       	cpi	r24, 0x01	; 1
     e32:	09 f0       	breq	.+2      	; 0xe36 <GPIO_setupPinDirection+0x160>
     e34:	42 c0       	rjmp	.+132    	; 0xeba <GPIO_setupPinDirection+0x1e4>
					{

						/* Common Macro function to Set a bit to 1*/
	   					 SET_BIT( DDRC,a_pinNum );
     e36:	a4 e3       	ldi	r26, 0x34	; 52
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e4 e3       	ldi	r30, 0x34	; 52
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	48 2f       	mov	r20, r24
     e42:	8a 81       	ldd	r24, Y+2	; 0x02
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	02 2e       	mov	r0, r18
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <GPIO_setupPinDirection+0x17e>
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	0a 94       	dec	r0
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <GPIO_setupPinDirection+0x17a>
     e58:	84 2b       	or	r24, r20
     e5a:	8c 93       	st	X, r24
     e5c:	2e c0       	rjmp	.+92     	; 0xeba <GPIO_setupPinDirection+0x1e4>
					break;

				case PORTD_ID :

					/*------- Selecting the Mode you will set the Pin Direction to --------*/
					if( a_direction == PIN_INPUT )
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	88 23       	and	r24, r24
     e62:	a9 f4       	brne	.+42     	; 0xe8e <GPIO_setupPinDirection+0x1b8>
					{

						/* Common Macro function to clear a bit*/
						CLEAR_BIT( DDRD,a_pinNum );
     e64:	a1 e3       	ldi	r26, 0x31	; 49
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e1 e3       	ldi	r30, 0x31	; 49
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <GPIO_setupPinDirection+0x1ac>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <GPIO_setupPinDirection+0x1a8>
     e86:	80 95       	com	r24
     e88:	84 23       	and	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	16 c0       	rjmp	.+44     	; 0xeba <GPIO_setupPinDirection+0x1e4>

					}

					else if ( a_direction == PIN_OUTPUT )
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	81 30       	cpi	r24, 0x01	; 1
     e92:	99 f4       	brne	.+38     	; 0xeba <GPIO_setupPinDirection+0x1e4>
					{
						/* Common Macro function to Set a bit to 1*/
						SET_BIT( DDRD,a_pinNum );
     e94:	a1 e3       	ldi	r26, 0x31	; 49
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	e1 e3       	ldi	r30, 0x31	; 49
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	48 2f       	mov	r20, r24
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	02 2e       	mov	r0, r18
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <GPIO_setupPinDirection+0x1dc>
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	0a 94       	dec	r0
     eb4:	e2 f7       	brpl	.-8      	; 0xeae <GPIO_setupPinDirection+0x1d8>
     eb6:	84 2b       	or	r24, r20
     eb8:	8c 93       	st	X, r24

	}



}
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <GPIO_writePin>:


/* Writing a logic 0 or 1 on an Output pin */
void GPIO_writePin(uint8 a_portNum,uint8 a_pinNum,uint8 a_value)
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	00 d0       	rcall	.+0      	; 0xed0 <GPIO_writePin+0x6>
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <GPIO_writePin+0x8>
     ed2:	0f 92       	push	r0
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	89 83       	std	Y+1, r24	; 0x01
     eda:	6a 83       	std	Y+2, r22	; 0x02
     edc:	4b 83       	std	Y+3, r20	; 0x03

	/* Checking the number given by the user is valid  for Port number and Pin number */

	if( a_portNum>=GPIO_NUM_OF_PORTS || a_pinNum>=GPIO_NUM_OF_PINS )
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	84 30       	cpi	r24, 0x04	; 4
     ee2:	08 f0       	brcs	.+2      	; 0xee6 <GPIO_writePin+0x1c>
     ee4:	e4 c0       	rjmp	.+456    	; 0x10ae <GPIO_writePin+0x1e4>
     ee6:	8a 81       	ldd	r24, Y+2	; 0x02
     ee8:	88 30       	cpi	r24, 0x08	; 8
     eea:	08 f0       	brcs	.+2      	; 0xeee <GPIO_writePin+0x24>
     eec:	e0 c0       	rjmp	.+448    	; 0x10ae <GPIO_writePin+0x1e4>
	/*------- If the number is within the range--------*/
		else
		{

		/*------- Selecting the Port you will write on a Pin in --------*/
			switch ( a_portNum )
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	3d 83       	std	Y+5, r19	; 0x05
     ef6:	2c 83       	std	Y+4, r18	; 0x04
     ef8:	8c 81       	ldd	r24, Y+4	; 0x04
     efa:	9d 81       	ldd	r25, Y+5	; 0x05
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	91 05       	cpc	r25, r1
     f00:	09 f4       	brne	.+2      	; 0xf04 <GPIO_writePin+0x3a>
     f02:	47 c0       	rjmp	.+142    	; 0xf92 <GPIO_writePin+0xc8>
     f04:	2c 81       	ldd	r18, Y+4	; 0x04
     f06:	3d 81       	ldd	r19, Y+5	; 0x05
     f08:	22 30       	cpi	r18, 0x02	; 2
     f0a:	31 05       	cpc	r19, r1
     f0c:	2c f4       	brge	.+10     	; 0xf18 <GPIO_writePin+0x4e>
     f0e:	8c 81       	ldd	r24, Y+4	; 0x04
     f10:	9d 81       	ldd	r25, Y+5	; 0x05
     f12:	00 97       	sbiw	r24, 0x00	; 0
     f14:	71 f0       	breq	.+28     	; 0xf32 <GPIO_writePin+0x68>
     f16:	cb c0       	rjmp	.+406    	; 0x10ae <GPIO_writePin+0x1e4>
     f18:	2c 81       	ldd	r18, Y+4	; 0x04
     f1a:	3d 81       	ldd	r19, Y+5	; 0x05
     f1c:	22 30       	cpi	r18, 0x02	; 2
     f1e:	31 05       	cpc	r19, r1
     f20:	09 f4       	brne	.+2      	; 0xf24 <GPIO_writePin+0x5a>
     f22:	67 c0       	rjmp	.+206    	; 0xff2 <GPIO_writePin+0x128>
     f24:	8c 81       	ldd	r24, Y+4	; 0x04
     f26:	9d 81       	ldd	r25, Y+5	; 0x05
     f28:	83 30       	cpi	r24, 0x03	; 3
     f2a:	91 05       	cpc	r25, r1
     f2c:	09 f4       	brne	.+2      	; 0xf30 <GPIO_writePin+0x66>
     f2e:	91 c0       	rjmp	.+290    	; 0x1052 <GPIO_writePin+0x188>
     f30:	be c0       	rjmp	.+380    	; 0x10ae <GPIO_writePin+0x1e4>
			{
					case PORTA_ID :

		/*------- Selecting the value you will write on a Pin in --------*/
						if( a_value == LOGIC_LOW )
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	88 23       	and	r24, r24
     f36:	a9 f4       	brne	.+42     	; 0xf62 <GPIO_writePin+0x98>
						{

							/* Common Macro function to clear a bit*/
							CLEAR_BIT( PORTA,a_pinNum );
     f38:	ab e3       	ldi	r26, 0x3B	; 59
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	eb e3       	ldi	r30, 0x3B	; 59
     f3e:	f0 e0       	ldi	r31, 0x00	; 0
     f40:	80 81       	ld	r24, Z
     f42:	48 2f       	mov	r20, r24
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	28 2f       	mov	r18, r24
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	02 2e       	mov	r0, r18
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <GPIO_writePin+0x8c>
     f52:	88 0f       	add	r24, r24
     f54:	99 1f       	adc	r25, r25
     f56:	0a 94       	dec	r0
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <GPIO_writePin+0x88>
     f5a:	80 95       	com	r24
     f5c:	84 23       	and	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	a6 c0       	rjmp	.+332    	; 0x10ae <GPIO_writePin+0x1e4>

						}
						else if ( a_value == LOGIC_HIGH )
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	09 f0       	breq	.+2      	; 0xf6a <GPIO_writePin+0xa0>
     f68:	a2 c0       	rjmp	.+324    	; 0x10ae <GPIO_writePin+0x1e4>
						{

							/* Common Macro function to Set a bit to 1*/
							SET_BIT( PORTA,a_pinNum );
     f6a:	ab e3       	ldi	r26, 0x3B	; 59
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	eb e3       	ldi	r30, 0x3B	; 59
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	80 81       	ld	r24, Z
     f74:	48 2f       	mov	r20, r24
     f76:	8a 81       	ldd	r24, Y+2	; 0x02
     f78:	28 2f       	mov	r18, r24
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	02 2e       	mov	r0, r18
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <GPIO_writePin+0xbe>
     f84:	88 0f       	add	r24, r24
     f86:	99 1f       	adc	r25, r25
     f88:	0a 94       	dec	r0
     f8a:	e2 f7       	brpl	.-8      	; 0xf84 <GPIO_writePin+0xba>
     f8c:	84 2b       	or	r24, r20
     f8e:	8c 93       	st	X, r24
     f90:	8e c0       	rjmp	.+284    	; 0x10ae <GPIO_writePin+0x1e4>
						break;

					case PORTB_ID :

					/*------- Selecting the value you will write on a Pin in --------*/
						if( a_value == LOGIC_LOW )
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 23       	and	r24, r24
     f96:	a9 f4       	brne	.+42     	; 0xfc2 <GPIO_writePin+0xf8>
						{

							/* Common Macro function to clear a bit*/
							 CLEAR_BIT( PORTB,a_pinNum );
     f98:	a8 e3       	ldi	r26, 0x38	; 56
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e8 e3       	ldi	r30, 0x38	; 56
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <GPIO_writePin+0xec>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <GPIO_writePin+0xe8>
     fba:	80 95       	com	r24
     fbc:	84 23       	and	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	76 c0       	rjmp	.+236    	; 0x10ae <GPIO_writePin+0x1e4>

						}

						else if ( a_value == LOGIC_HIGH )
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	09 f0       	breq	.+2      	; 0xfca <GPIO_writePin+0x100>
     fc8:	72 c0       	rjmp	.+228    	; 0x10ae <GPIO_writePin+0x1e4>
						{

							/* Common Macro function to Set a bit to 1*/
							SET_BIT( PORTB,a_pinNum );
     fca:	a8 e3       	ldi	r26, 0x38	; 56
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e8 e3       	ldi	r30, 0x38	; 56
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	48 2f       	mov	r20, r24
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 2e       	mov	r0, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <GPIO_writePin+0x11e>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <GPIO_writePin+0x11a>
     fec:	84 2b       	or	r24, r20
     fee:	8c 93       	st	X, r24
     ff0:	5e c0       	rjmp	.+188    	; 0x10ae <GPIO_writePin+0x1e4>
						break;

					case PORTC_ID :

						/*------- Selecting the value you will write on a Pin in --------*/
						if( a_value == LOGIC_LOW )
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 23       	and	r24, r24
     ff6:	a9 f4       	brne	.+42     	; 0x1022 <GPIO_writePin+0x158>
						{

							/* Common Macro function to clear a bit*/
							 CLEAR_BIT( PORTC,a_pinNum );
     ff8:	a5 e3       	ldi	r26, 0x35	; 53
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e5 e3       	ldi	r30, 0x35	; 53
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <GPIO_writePin+0x14c>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <GPIO_writePin+0x148>
    101a:	80 95       	com	r24
    101c:	84 23       	and	r24, r20
    101e:	8c 93       	st	X, r24
    1020:	46 c0       	rjmp	.+140    	; 0x10ae <GPIO_writePin+0x1e4>

						}

						else if ( a_value == LOGIC_HIGH )
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	81 30       	cpi	r24, 0x01	; 1
    1026:	09 f0       	breq	.+2      	; 0x102a <GPIO_writePin+0x160>
    1028:	42 c0       	rjmp	.+132    	; 0x10ae <GPIO_writePin+0x1e4>
						{

							/* Common Macro function to Set a bit to 1*/
		   					 SET_BIT( PORTC,a_pinNum );
    102a:	a5 e3       	ldi	r26, 0x35	; 53
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e5 e3       	ldi	r30, 0x35	; 53
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	48 2f       	mov	r20, r24
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 2e       	mov	r0, r18
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <GPIO_writePin+0x17e>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	0a 94       	dec	r0
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <GPIO_writePin+0x17a>
    104c:	84 2b       	or	r24, r20
    104e:	8c 93       	st	X, r24
    1050:	2e c0       	rjmp	.+92     	; 0x10ae <GPIO_writePin+0x1e4>
						break;

					case PORTD_ID :

						/*------- Selecting the value you will write on a Pin in --------*/
						if( a_value == LOGIC_LOW )
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	88 23       	and	r24, r24
    1056:	a9 f4       	brne	.+42     	; 0x1082 <GPIO_writePin+0x1b8>
						{

							/* Common Macro function to clear a bit*/
							CLEAR_BIT( PORTD,a_pinNum );
    1058:	a2 e3       	ldi	r26, 0x32	; 50
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e2 e3       	ldi	r30, 0x32	; 50
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <GPIO_writePin+0x1ac>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <GPIO_writePin+0x1a8>
    107a:	80 95       	com	r24
    107c:	84 23       	and	r24, r20
    107e:	8c 93       	st	X, r24
    1080:	16 c0       	rjmp	.+44     	; 0x10ae <GPIO_writePin+0x1e4>

						}

						else if ( a_value == LOGIC_HIGH )
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	99 f4       	brne	.+38     	; 0x10ae <GPIO_writePin+0x1e4>
						{

							/* Common Macro function to Set a bit to 1*/
							SET_BIT( PORTD,a_pinNum );
    1088:	a2 e3       	ldi	r26, 0x32	; 50
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e2 e3       	ldi	r30, 0x32	; 50
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 2e       	mov	r0, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <GPIO_writePin+0x1dc>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	0a 94       	dec	r0
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <GPIO_writePin+0x1d8>
    10aa:	84 2b       	or	r24, r20
    10ac:	8c 93       	st	X, r24
		}




}
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <GPIO_togglePin>:



void GPIO_togglePin(uint8 a_portNum,uint8 a_pinNum)
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <GPIO_togglePin+0x6>
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <GPIO_togglePin+0x8>
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	89 83       	std	Y+1, r24	; 0x01
    10cc:	6a 83       	std	Y+2, r22	; 0x02
	/* Checking the number given by the user is valid  for Port number and Pin number */

	if( a_portNum>=GPIO_NUM_OF_PORTS || a_pinNum>=GPIO_NUM_OF_PINS )
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	84 30       	cpi	r24, 0x04	; 4
    10d2:	08 f0       	brcs	.+2      	; 0x10d6 <GPIO_togglePin+0x18>
    10d4:	72 c0       	rjmp	.+228    	; 0x11ba <GPIO_togglePin+0xfc>
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	88 30       	cpi	r24, 0x08	; 8
    10da:	08 f0       	brcs	.+2      	; 0x10de <GPIO_togglePin+0x20>
    10dc:	6e c0       	rjmp	.+220    	; 0x11ba <GPIO_togglePin+0xfc>
	/*------- If the number is within the range--------*/
		else
		{

		/*------- Selecting the Port you will toggle a Pin in --------*/
			switch ( a_portNum )
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	28 2f       	mov	r18, r24
    10e2:	30 e0       	ldi	r19, 0x00	; 0
    10e4:	3c 83       	std	Y+4, r19	; 0x04
    10e6:	2b 83       	std	Y+3, r18	; 0x03
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	9c 81       	ldd	r25, Y+4	; 0x04
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	91 05       	cpc	r25, r1
    10f0:	49 f1       	breq	.+82     	; 0x1144 <GPIO_togglePin+0x86>
    10f2:	2b 81       	ldd	r18, Y+3	; 0x03
    10f4:	3c 81       	ldd	r19, Y+4	; 0x04
    10f6:	22 30       	cpi	r18, 0x02	; 2
    10f8:	31 05       	cpc	r19, r1
    10fa:	2c f4       	brge	.+10     	; 0x1106 <GPIO_togglePin+0x48>
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	61 f0       	breq	.+24     	; 0x111c <GPIO_togglePin+0x5e>
    1104:	5a c0       	rjmp	.+180    	; 0x11ba <GPIO_togglePin+0xfc>
    1106:	2b 81       	ldd	r18, Y+3	; 0x03
    1108:	3c 81       	ldd	r19, Y+4	; 0x04
    110a:	22 30       	cpi	r18, 0x02	; 2
    110c:	31 05       	cpc	r19, r1
    110e:	71 f1       	breq	.+92     	; 0x116c <GPIO_togglePin+0xae>
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	9c 81       	ldd	r25, Y+4	; 0x04
    1114:	83 30       	cpi	r24, 0x03	; 3
    1116:	91 05       	cpc	r25, r1
    1118:	e9 f1       	breq	.+122    	; 0x1194 <GPIO_togglePin+0xd6>
    111a:	4f c0       	rjmp	.+158    	; 0x11ba <GPIO_togglePin+0xfc>
			{
					case PORTA_ID :

				/* Common Macro function to Toggle a bit*/
					TOGGLE_BIT(PORTA,a_pinNum);
    111c:	ab e3       	ldi	r26, 0x3B	; 59
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	eb e3       	ldi	r30, 0x3B	; 59
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	80 81       	ld	r24, Z
    1126:	48 2f       	mov	r20, r24
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	81 e0       	ldi	r24, 0x01	; 1
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	02 2e       	mov	r0, r18
    1134:	02 c0       	rjmp	.+4      	; 0x113a <GPIO_togglePin+0x7c>
    1136:	88 0f       	add	r24, r24
    1138:	99 1f       	adc	r25, r25
    113a:	0a 94       	dec	r0
    113c:	e2 f7       	brpl	.-8      	; 0x1136 <GPIO_togglePin+0x78>
    113e:	84 27       	eor	r24, r20
    1140:	8c 93       	st	X, r24
    1142:	3b c0       	rjmp	.+118    	; 0x11ba <GPIO_togglePin+0xfc>
						break;

					case PORTB_ID :

				/* Common Macro function to Toggle a bit*/
						TOGGLE_BIT(PORTB,a_pinNum);
    1144:	a8 e3       	ldi	r26, 0x38	; 56
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e8 e3       	ldi	r30, 0x38	; 56
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	48 2f       	mov	r20, r24
    1150:	8a 81       	ldd	r24, Y+2	; 0x02
    1152:	28 2f       	mov	r18, r24
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	81 e0       	ldi	r24, 0x01	; 1
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	02 2e       	mov	r0, r18
    115c:	02 c0       	rjmp	.+4      	; 0x1162 <GPIO_togglePin+0xa4>
    115e:	88 0f       	add	r24, r24
    1160:	99 1f       	adc	r25, r25
    1162:	0a 94       	dec	r0
    1164:	e2 f7       	brpl	.-8      	; 0x115e <GPIO_togglePin+0xa0>
    1166:	84 27       	eor	r24, r20
    1168:	8c 93       	st	X, r24
    116a:	27 c0       	rjmp	.+78     	; 0x11ba <GPIO_togglePin+0xfc>
						break;

					case PORTC_ID :

				/* Common Macro function to Toggle a bit*/
						TOGGLE_BIT(PORTC,a_pinNum);
    116c:	a5 e3       	ldi	r26, 0x35	; 53
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e5 e3       	ldi	r30, 0x35	; 53
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	48 2f       	mov	r20, r24
    1178:	8a 81       	ldd	r24, Y+2	; 0x02
    117a:	28 2f       	mov	r18, r24
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	02 2e       	mov	r0, r18
    1184:	02 c0       	rjmp	.+4      	; 0x118a <GPIO_togglePin+0xcc>
    1186:	88 0f       	add	r24, r24
    1188:	99 1f       	adc	r25, r25
    118a:	0a 94       	dec	r0
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <GPIO_togglePin+0xc8>
    118e:	84 27       	eor	r24, r20
    1190:	8c 93       	st	X, r24
    1192:	13 c0       	rjmp	.+38     	; 0x11ba <GPIO_togglePin+0xfc>
						break;

					case PORTD_ID :

				/* Common Macro function to Toggle a bit*/
						TOGGLE_BIT(PORTD,a_pinNum);
    1194:	a2 e3       	ldi	r26, 0x32	; 50
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e2 e3       	ldi	r30, 0x32	; 50
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	48 2f       	mov	r20, r24
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 2e       	mov	r0, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <GPIO_togglePin+0xf4>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	0a 94       	dec	r0
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <GPIO_togglePin+0xf0>
    11b6:	84 27       	eor	r24, r20
    11b8:	8c 93       	st	X, r24


		}


}
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	0f 90       	pop	r0
    11c2:	cf 91       	pop	r28
    11c4:	df 91       	pop	r29
    11c6:	08 95       	ret

000011c8 <GPIO_readPin>:



/* Reading the value on an Input pin and returning it's value */
uint8 GPIO_readPin( uint8 a_portNum,uint8 a_pinNum )
{
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <GPIO_readPin+0x6>
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <GPIO_readPin+0x8>
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <GPIO_readPin+0xa>
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
    11d6:	8a 83       	std	Y+2, r24	; 0x02
    11d8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_pinValue = LOGIC_LOW;
    11da:	19 82       	std	Y+1, r1	; 0x01

	/* Checking the number given by the user is valid  for Port number and Pin number */
	if( a_portNum>=GPIO_NUM_OF_PORTS || a_pinNum>=GPIO_NUM_OF_PINS )
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	84 30       	cpi	r24, 0x04	; 4
    11e0:	18 f4       	brcc	.+6      	; 0x11e8 <GPIO_readPin+0x20>
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	88 30       	cpi	r24, 0x08	; 8
    11e6:	18 f0       	brcs	.+6      	; 0x11ee <GPIO_readPin+0x26>
	{

		/*------- If the number is not within the range--------*/

						return a_pinValue;
    11e8:	29 81       	ldd	r18, Y+1	; 0x01
    11ea:	2e 83       	std	Y+6, r18	; 0x06
    11ec:	82 c0       	rjmp	.+260    	; 0x12f2 <GPIO_readPin+0x12a>

	/*------- If the number is within the range--------*/
	else
	{
		/*------- Selecting the Port you will read a Pin from --------*/
		switch ( a_portNum )
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	48 2f       	mov	r20, r24
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	5d 83       	std	Y+5, r21	; 0x05
    11f6:	4c 83       	std	Y+4, r20	; 0x04
    11f8:	8c 81       	ldd	r24, Y+4	; 0x04
    11fa:	9d 81       	ldd	r25, Y+5	; 0x05
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	91 05       	cpc	r25, r1
    1200:	79 f1       	breq	.+94     	; 0x1260 <GPIO_readPin+0x98>
    1202:	2c 81       	ldd	r18, Y+4	; 0x04
    1204:	3d 81       	ldd	r19, Y+5	; 0x05
    1206:	22 30       	cpi	r18, 0x02	; 2
    1208:	31 05       	cpc	r19, r1
    120a:	34 f4       	brge	.+12     	; 0x1218 <GPIO_readPin+0x50>
    120c:	4c 81       	ldd	r20, Y+4	; 0x04
    120e:	5d 81       	ldd	r21, Y+5	; 0x05
    1210:	41 15       	cp	r20, r1
    1212:	51 05       	cpc	r21, r1
    1214:	69 f0       	breq	.+26     	; 0x1230 <GPIO_readPin+0x68>
    1216:	6b c0       	rjmp	.+214    	; 0x12ee <GPIO_readPin+0x126>
    1218:	8c 81       	ldd	r24, Y+4	; 0x04
    121a:	9d 81       	ldd	r25, Y+5	; 0x05
    121c:	82 30       	cpi	r24, 0x02	; 2
    121e:	91 05       	cpc	r25, r1
    1220:	b9 f1       	breq	.+110    	; 0x1290 <GPIO_readPin+0xc8>
    1222:	2c 81       	ldd	r18, Y+4	; 0x04
    1224:	3d 81       	ldd	r19, Y+5	; 0x05
    1226:	23 30       	cpi	r18, 0x03	; 3
    1228:	31 05       	cpc	r19, r1
    122a:	09 f4       	brne	.+2      	; 0x122e <GPIO_readPin+0x66>
    122c:	49 c0       	rjmp	.+146    	; 0x12c0 <GPIO_readPin+0xf8>
    122e:	5f c0       	rjmp	.+190    	; 0x12ee <GPIO_readPin+0x126>
		{
		case PORTA_ID :
		/*------- Checking the Pin value by a Common macro function--------*/
			if( BIT_IS_SET(PINA,a_pinNum) )
    1230:	e9 e3       	ldi	r30, 0x39	; 57
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	a9 01       	movw	r20, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <GPIO_readPin+0x80>
    1244:	55 95       	asr	r21
    1246:	47 95       	ror	r20
    1248:	8a 95       	dec	r24
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <GPIO_readPin+0x7c>
    124c:	ca 01       	movw	r24, r20
    124e:	81 70       	andi	r24, 0x01	; 1
    1250:	90 70       	andi	r25, 0x00	; 0
    1252:	88 23       	and	r24, r24
    1254:	19 f0       	breq	.+6      	; 0x125c <GPIO_readPin+0x94>
			{
				a_pinValue=LOGIC_HIGH;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	89 83       	std	Y+1, r24	; 0x01
    125a:	49 c0       	rjmp	.+146    	; 0x12ee <GPIO_readPin+0x126>

			}
			else
				a_pinValue=LOGIC_LOW;
    125c:	19 82       	std	Y+1, r1	; 0x01
    125e:	47 c0       	rjmp	.+142    	; 0x12ee <GPIO_readPin+0x126>

			break;

		case PORTB_ID :
			/*------- Checking the Pin value by a Common macro function--------*/
			if( BIT_IS_SET(PINB,a_pinNum) )
    1260:	e6 e3       	ldi	r30, 0x36	; 54
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	88 2f       	mov	r24, r24
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	a9 01       	movw	r20, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <GPIO_readPin+0xb0>
    1274:	55 95       	asr	r21
    1276:	47 95       	ror	r20
    1278:	8a 95       	dec	r24
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <GPIO_readPin+0xac>
    127c:	ca 01       	movw	r24, r20
    127e:	81 70       	andi	r24, 0x01	; 1
    1280:	90 70       	andi	r25, 0x00	; 0
    1282:	88 23       	and	r24, r24
    1284:	19 f0       	breq	.+6      	; 0x128c <GPIO_readPin+0xc4>
			{
				a_pinValue=LOGIC_HIGH;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	89 83       	std	Y+1, r24	; 0x01
    128a:	31 c0       	rjmp	.+98     	; 0x12ee <GPIO_readPin+0x126>

			}
			else
				a_pinValue=LOGIC_LOW;
    128c:	19 82       	std	Y+1, r1	; 0x01
    128e:	2f c0       	rjmp	.+94     	; 0x12ee <GPIO_readPin+0x126>

					break;

		case PORTC_ID :
			/*------- Checking the Pin value by a Common macro function--------*/
			if( BIT_IS_SET(PINC,a_pinNum) )
    1290:	e3 e3       	ldi	r30, 0x33	; 51
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	88 2f       	mov	r24, r24
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	a9 01       	movw	r20, r18
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <GPIO_readPin+0xe0>
    12a4:	55 95       	asr	r21
    12a6:	47 95       	ror	r20
    12a8:	8a 95       	dec	r24
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <GPIO_readPin+0xdc>
    12ac:	ca 01       	movw	r24, r20
    12ae:	81 70       	andi	r24, 0x01	; 1
    12b0:	90 70       	andi	r25, 0x00	; 0
    12b2:	88 23       	and	r24, r24
    12b4:	19 f0       	breq	.+6      	; 0x12bc <GPIO_readPin+0xf4>
			{
				a_pinValue=LOGIC_HIGH;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	89 83       	std	Y+1, r24	; 0x01
    12ba:	19 c0       	rjmp	.+50     	; 0x12ee <GPIO_readPin+0x126>

			}
			else
				a_pinValue=LOGIC_LOW;
    12bc:	19 82       	std	Y+1, r1	; 0x01
    12be:	17 c0       	rjmp	.+46     	; 0x12ee <GPIO_readPin+0x126>
					break;

		case PORTD_ID :
			/*------- Checking the Pin value by a Common macro function--------*/

			if( BIT_IS_SET(PIND,a_pinNum) )
    12c0:	e0 e3       	ldi	r30, 0x30	; 48
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	88 2f       	mov	r24, r24
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	a9 01       	movw	r20, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <GPIO_readPin+0x110>
    12d4:	55 95       	asr	r21
    12d6:	47 95       	ror	r20
    12d8:	8a 95       	dec	r24
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <GPIO_readPin+0x10c>
    12dc:	ca 01       	movw	r24, r20
    12de:	81 70       	andi	r24, 0x01	; 1
    12e0:	90 70       	andi	r25, 0x00	; 0
    12e2:	88 23       	and	r24, r24
    12e4:	19 f0       	breq	.+6      	; 0x12ec <GPIO_readPin+0x124>
			{
				a_pinValue=LOGIC_HIGH;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	89 83       	std	Y+1, r24	; 0x01
    12ea:	01 c0       	rjmp	.+2      	; 0x12ee <GPIO_readPin+0x126>

			}
			else
				a_pinValue=LOGIC_LOW;
    12ec:	19 82       	std	Y+1, r1	; 0x01
		}


	}

	return a_pinValue;
    12ee:	59 81       	ldd	r21, Y+1	; 0x01
    12f0:	5e 83       	std	Y+6, r21	; 0x06
    12f2:	8e 81       	ldd	r24, Y+6	; 0x06
}
    12f4:	26 96       	adiw	r28, 0x06	; 6
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <GPIO_setupPortDirection>:


/* Setting the whole Port to be either Input or Output Port
 * */
void GPIO_setupPortDirection( uint8 a_portNum,GPIO_PortDirectionType a_direction )
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	00 d0       	rcall	.+0      	; 0x130c <GPIO_setupPortDirection+0x6>
    130c:	00 d0       	rcall	.+0      	; 0x130e <GPIO_setupPortDirection+0x8>
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	6a 83       	std	Y+2, r22	; 0x02
	/* Checking the number given by the user is valid  for Port number and Pin number
	 *
	 *
	 *  Direction of Port must be either PORT_INPUT or PORT_OUTPUT
	 *  */
	if( a_portNum>=GPIO_NUM_OF_PORTS || ((a_direction !=PORT_INPUT ) && (a_direction !=PORT_OUTPUT )) )
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	84 30       	cpi	r24, 0x04	; 4
    131a:	c0 f5       	brcc	.+112    	; 0x138c <GPIO_setupPortDirection+0x86>
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	88 23       	and	r24, r24
    1320:	19 f0       	breq	.+6      	; 0x1328 <GPIO_setupPortDirection+0x22>
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	8f 3f       	cpi	r24, 0xFF	; 255
    1326:	91 f5       	brne	.+100    	; 0x138c <GPIO_setupPortDirection+0x86>

		/*------- If the number is within the range--------*/
	else
	{
		/*------- Selecting the Port you will set the it's Direction --------*/
		switch ( a_portNum )
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	3c 83       	std	Y+4, r19	; 0x04
    1330:	2b 83       	std	Y+3, r18	; 0x03
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	91 05       	cpc	r25, r1
    133a:	d1 f0       	breq	.+52     	; 0x1370 <GPIO_setupPortDirection+0x6a>
    133c:	2b 81       	ldd	r18, Y+3	; 0x03
    133e:	3c 81       	ldd	r19, Y+4	; 0x04
    1340:	22 30       	cpi	r18, 0x02	; 2
    1342:	31 05       	cpc	r19, r1
    1344:	2c f4       	brge	.+10     	; 0x1350 <GPIO_setupPortDirection+0x4a>
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	9c 81       	ldd	r25, Y+4	; 0x04
    134a:	00 97       	sbiw	r24, 0x00	; 0
    134c:	61 f0       	breq	.+24     	; 0x1366 <GPIO_setupPortDirection+0x60>
    134e:	1e c0       	rjmp	.+60     	; 0x138c <GPIO_setupPortDirection+0x86>
    1350:	2b 81       	ldd	r18, Y+3	; 0x03
    1352:	3c 81       	ldd	r19, Y+4	; 0x04
    1354:	22 30       	cpi	r18, 0x02	; 2
    1356:	31 05       	cpc	r19, r1
    1358:	81 f0       	breq	.+32     	; 0x137a <GPIO_setupPortDirection+0x74>
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	9c 81       	ldd	r25, Y+4	; 0x04
    135e:	83 30       	cpi	r24, 0x03	; 3
    1360:	91 05       	cpc	r25, r1
    1362:	81 f0       	breq	.+32     	; 0x1384 <GPIO_setupPortDirection+0x7e>
    1364:	13 c0       	rjmp	.+38     	; 0x138c <GPIO_setupPortDirection+0x86>
		{
				case PORTA_ID :

				DDRA=a_direction;
    1366:	ea e3       	ldi	r30, 0x3A	; 58
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	8a 81       	ldd	r24, Y+2	; 0x02
    136c:	80 83       	st	Z, r24
    136e:	0e c0       	rjmp	.+28     	; 0x138c <GPIO_setupPortDirection+0x86>

					break;

				case PORTB_ID :

				DDRB=a_direction;
    1370:	e7 e3       	ldi	r30, 0x37	; 55
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	8a 81       	ldd	r24, Y+2	; 0x02
    1376:	80 83       	st	Z, r24
    1378:	09 c0       	rjmp	.+18     	; 0x138c <GPIO_setupPortDirection+0x86>

					break;

				case PORTC_ID :

				DDRC=a_direction;
    137a:	e4 e3       	ldi	r30, 0x34	; 52
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	80 83       	st	Z, r24
    1382:	04 c0       	rjmp	.+8      	; 0x138c <GPIO_setupPortDirection+0x86>

					break;

				case PORTD_ID :

				DDRD=a_direction;
    1384:	e1 e3       	ldi	r30, 0x31	; 49
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	80 83       	st	Z, r24





}
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	0f 90       	pop	r0
    1394:	cf 91       	pop	r28
    1396:	df 91       	pop	r29
    1398:	08 95       	ret

0000139a <GPIO_writePort>:



/* Writing any value ranged between (0000 0000 "0x00") to (1111 1111 "0xFF") on a Port */
void GPIO_writePort( uint8 a_portNum,uint8 a_value )
{
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <GPIO_writePort+0x6>
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <GPIO_writePort+0x8>
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	89 83       	std	Y+1, r24	; 0x01
    13a8:	6a 83       	std	Y+2, r22	; 0x02

	/* Checking the number given by the user is valid  for Port number and Pin number
	 *
	 */
	if( a_portNum>=GPIO_NUM_OF_PORTS )
    13aa:	89 81       	ldd	r24, Y+1	; 0x01
    13ac:	84 30       	cpi	r24, 0x04	; 4
    13ae:	90 f5       	brcc	.+100    	; 0x1414 <GPIO_writePort+0x7a>
			/*------- If the number is within the range--------*/
	else
	{

	/*------- Selecting the Port you will write a value on --------*/
	switch (a_portNum)
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	3c 83       	std	Y+4, r19	; 0x04
    13b8:	2b 83       	std	Y+3, r18	; 0x03
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	9c 81       	ldd	r25, Y+4	; 0x04
    13be:	81 30       	cpi	r24, 0x01	; 1
    13c0:	91 05       	cpc	r25, r1
    13c2:	d1 f0       	breq	.+52     	; 0x13f8 <GPIO_writePort+0x5e>
    13c4:	2b 81       	ldd	r18, Y+3	; 0x03
    13c6:	3c 81       	ldd	r19, Y+4	; 0x04
    13c8:	22 30       	cpi	r18, 0x02	; 2
    13ca:	31 05       	cpc	r19, r1
    13cc:	2c f4       	brge	.+10     	; 0x13d8 <GPIO_writePort+0x3e>
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	9c 81       	ldd	r25, Y+4	; 0x04
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	61 f0       	breq	.+24     	; 0x13ee <GPIO_writePort+0x54>
    13d6:	1e c0       	rjmp	.+60     	; 0x1414 <GPIO_writePort+0x7a>
    13d8:	2b 81       	ldd	r18, Y+3	; 0x03
    13da:	3c 81       	ldd	r19, Y+4	; 0x04
    13dc:	22 30       	cpi	r18, 0x02	; 2
    13de:	31 05       	cpc	r19, r1
    13e0:	81 f0       	breq	.+32     	; 0x1402 <GPIO_writePort+0x68>
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	9c 81       	ldd	r25, Y+4	; 0x04
    13e6:	83 30       	cpi	r24, 0x03	; 3
    13e8:	91 05       	cpc	r25, r1
    13ea:	81 f0       	breq	.+32     	; 0x140c <GPIO_writePort+0x72>
    13ec:	13 c0       	rjmp	.+38     	; 0x1414 <GPIO_writePort+0x7a>
			{
			case PORTA_ID :
				PORTA=a_value;
    13ee:	eb e3       	ldi	r30, 0x3B	; 59
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	80 83       	st	Z, r24
    13f6:	0e c0       	rjmp	.+28     	; 0x1414 <GPIO_writePort+0x7a>
				break;

			case PORTB_ID :
				PORTB=a_value;
    13f8:	e8 e3       	ldi	r30, 0x38	; 56
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	8a 81       	ldd	r24, Y+2	; 0x02
    13fe:	80 83       	st	Z, r24
    1400:	09 c0       	rjmp	.+18     	; 0x1414 <GPIO_writePort+0x7a>
						break;

			case PORTC_ID :
				PORTC=a_value;
    1402:	e5 e3       	ldi	r30, 0x35	; 53
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	80 83       	st	Z, r24
    140a:	04 c0       	rjmp	.+8      	; 0x1414 <GPIO_writePort+0x7a>
						break;

			case PORTD_ID :
				PORTD=a_value;
    140c:	e2 e3       	ldi	r30, 0x32	; 50
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	8a 81       	ldd	r24, Y+2	; 0x02
    1412:	80 83       	st	Z, r24
						break;

			}
	}

}
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <GPIO_readPort>:


/* Reading any value ranged between (0000 0000 "0x00") to (1111 1111 "0xFF") on a Port */
uint8 GPIO_readPort(uint8 a_portNum)
{
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	00 d0       	rcall	.+0      	; 0x1428 <GPIO_readPort+0x6>
    1428:	00 d0       	rcall	.+0      	; 0x142a <GPIO_readPort+0x8>
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_portValue = LOGIC_LOW;
    1430:	19 82       	std	Y+1, r1	; 0x01
	/* Checking the number given by the user is valid  for Port number and Pin number */
	if( a_portNum>=GPIO_NUM_OF_PORTS )
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	84 30       	cpi	r24, 0x04	; 4
    1436:	90 f5       	brcc	.+100    	; 0x149c <GPIO_readPort+0x7a>
				/*------- If the number is within the range--------*/
		else
		{

			/*------- Selecting the Port you will read a value from --------*/
		switch (a_portNum)
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	3c 83       	std	Y+4, r19	; 0x04
    1440:	2b 83       	std	Y+3, r18	; 0x03
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	9c 81       	ldd	r25, Y+4	; 0x04
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	91 05       	cpc	r25, r1
    144a:	d1 f0       	breq	.+52     	; 0x1480 <GPIO_readPort+0x5e>
    144c:	2b 81       	ldd	r18, Y+3	; 0x03
    144e:	3c 81       	ldd	r19, Y+4	; 0x04
    1450:	22 30       	cpi	r18, 0x02	; 2
    1452:	31 05       	cpc	r19, r1
    1454:	2c f4       	brge	.+10     	; 0x1460 <GPIO_readPort+0x3e>
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	9c 81       	ldd	r25, Y+4	; 0x04
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	61 f0       	breq	.+24     	; 0x1476 <GPIO_readPort+0x54>
    145e:	1e c0       	rjmp	.+60     	; 0x149c <GPIO_readPort+0x7a>
    1460:	2b 81       	ldd	r18, Y+3	; 0x03
    1462:	3c 81       	ldd	r19, Y+4	; 0x04
    1464:	22 30       	cpi	r18, 0x02	; 2
    1466:	31 05       	cpc	r19, r1
    1468:	81 f0       	breq	.+32     	; 0x148a <GPIO_readPort+0x68>
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	9c 81       	ldd	r25, Y+4	; 0x04
    146e:	83 30       	cpi	r24, 0x03	; 3
    1470:	91 05       	cpc	r25, r1
    1472:	81 f0       	breq	.+32     	; 0x1494 <GPIO_readPort+0x72>
    1474:	13 c0       	rjmp	.+38     	; 0x149c <GPIO_readPort+0x7a>
				{
				case PORTA_ID :

					a_portValue=PINA;
    1476:	e9 e3       	ldi	r30, 0x39	; 57
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	0e c0       	rjmp	.+28     	; 0x149c <GPIO_readPort+0x7a>

					break;

				case PORTB_ID :

					a_portValue=PINB;
    1480:	e6 e3       	ldi	r30, 0x36	; 54
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	89 83       	std	Y+1, r24	; 0x01
    1488:	09 c0       	rjmp	.+18     	; 0x149c <GPIO_readPort+0x7a>

					break;

				case PORTC_ID :

					a_portValue=PINC;
    148a:	e3 e3       	ldi	r30, 0x33	; 51
    148c:	f0 e0       	ldi	r31, 0x00	; 0
    148e:	80 81       	ld	r24, Z
    1490:	89 83       	std	Y+1, r24	; 0x01
    1492:	04 c0       	rjmp	.+8      	; 0x149c <GPIO_readPort+0x7a>

					break;

				case PORTD_ID :

					a_portValue=PIND;
    1494:	e0 e3       	ldi	r30, 0x30	; 48
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	89 83       	std	Y+1, r24	; 0x01
					;
				}

		}

	return a_portValue;
    149c:	89 81       	ldd	r24, Y+1	; 0x01

}
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	cf 91       	pop	r28
    14a8:	df 91       	pop	r29
    14aa:	08 95       	ret

000014ac <ICU_init>:
#include "avr/interrupt.h"

static volatile void (*g_callBackPtr)(void)=NULL;

void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    14ac:	df 93       	push	r29
    14ae:	cf 93       	push	r28
    14b0:	00 d0       	rcall	.+0      	; 0x14b2 <ICU_init+0x6>
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
    14b6:	9a 83       	std	Y+2, r25	; 0x02
    14b8:	89 83       	std	Y+1, r24	; 0x01
	/* Define the ICU PIN AS AN INPUT PIN*/

	GPIO_setupPinDirection(PORTD_ID,PIN6_ID, PIN_INPUT);
    14ba:	83 e0       	ldi	r24, 0x03	; 3
    14bc:	66 e0       	ldi	r22, 0x06	; 6
    14be:	40 e0       	ldi	r20, 0x00	; 0
    14c0:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GPIO_setupPinDirection>


	/* The FOC1A/FOC1B bits are only active when we choose a non-PWM mode.*/
	SET_BIT(TCCR1A,FOC1A);
    14c4:	af e4       	ldi	r26, 0x4F	; 79
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	ef e4       	ldi	r30, 0x4F	; 79
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	88 60       	ori	r24, 0x08	; 8
    14d0:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,FOC1B);
    14d2:	af e4       	ldi	r26, 0x4F	; 79
    14d4:	b0 e0       	ldi	r27, 0x00	; 0
    14d6:	ef e4       	ldi	r30, 0x4F	; 79
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	80 81       	ld	r24, Z
    14dc:	84 60       	ori	r24, 0x04	; 4
    14de:	8c 93       	st	X, r24

	/* OC1A/OC1B disconnected*/
	CLEAR_BIT(TCCR1A, COM1A0);
    14e0:	af e4       	ldi	r26, 0x4F	; 79
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	ef e4       	ldi	r30, 0x4F	; 79
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	8f 7b       	andi	r24, 0xBF	; 191
    14ec:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A, COM1A1);
    14ee:	af e4       	ldi	r26, 0x4F	; 79
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	ef e4       	ldi	r30, 0x4F	; 79
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	8f 77       	andi	r24, 0x7F	; 127
    14fa:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A, COM1B0);
    14fc:	af e4       	ldi	r26, 0x4F	; 79
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	ef e4       	ldi	r30, 0x4F	; 79
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	8f 7e       	andi	r24, 0xEF	; 239
    1508:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A, COM1B1);
    150a:	af e4       	ldi	r26, 0x4F	; 79
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	ef e4       	ldi	r30, 0x4F	; 79
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	8f 7d       	andi	r24, 0xDF	; 223
    1516:	8c 93       	st	X, r24

	/* Choosing the mode of operation to be Normal to have the biggest range of counting 0 to 2^16-1 */
	CLEAR_BIT(TCCR1A, WGM10);
    1518:	af e4       	ldi	r26, 0x4F	; 79
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	ef e4       	ldi	r30, 0x4F	; 79
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	8e 7f       	andi	r24, 0xFE	; 254
    1524:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A, WGM11);
    1526:	af e4       	ldi	r26, 0x4F	; 79
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	ef e4       	ldi	r30, 0x4F	; 79
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	8d 7f       	andi	r24, 0xFD	; 253
    1532:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B, WGM12);
    1534:	ae e4       	ldi	r26, 0x4E	; 78
    1536:	b0 e0       	ldi	r27, 0x00	; 0
    1538:	ee e4       	ldi	r30, 0x4E	; 78
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	80 81       	ld	r24, Z
    153e:	87 7f       	andi	r24, 0xF7	; 247
    1540:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B, WGM13);
    1542:	ae e4       	ldi	r26, 0x4E	; 78
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	ee e4       	ldi	r30, 0x4E	; 78
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	8f 7e       	andi	r24, 0xEF	; 239
    154e:	8c 93       	st	X, r24

	/* Selecting the prescaler */

	   TCCR1B = (TCCR1B &(0xF8)) | ((Config_Ptr->clock) );
    1550:	ae e4       	ldi	r26, 0x4E	; 78
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	ee e4       	ldi	r30, 0x4E	; 78
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	98 2f       	mov	r25, r24
    155c:	98 7f       	andi	r25, 0xF8	; 248
    155e:	e9 81       	ldd	r30, Y+1	; 0x01
    1560:	fa 81       	ldd	r31, Y+2	; 0x02
    1562:	80 81       	ld	r24, Z
    1564:	89 2b       	or	r24, r25
    1566:	8c 93       	st	X, r24

	/* Choosing the Edge Type*/
		TCCR1B = (TCCR1B & 0xBF) | (((Config_Ptr->edge)&0x01)<<6);
    1568:	ae e4       	ldi	r26, 0x4E	; 78
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	ee e4       	ldi	r30, 0x4E	; 78
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	28 2f       	mov	r18, r24
    1574:	2f 7b       	andi	r18, 0xBF	; 191
    1576:	e9 81       	ldd	r30, Y+1	; 0x01
    1578:	fa 81       	ldd	r31, Y+2	; 0x02
    157a:	81 81       	ldd	r24, Z+1	; 0x01
    157c:	88 2f       	mov	r24, r24
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	81 70       	andi	r24, 0x01	; 1
    1582:	90 70       	andi	r25, 0x00	; 0
    1584:	00 24       	eor	r0, r0
    1586:	96 95       	lsr	r25
    1588:	87 95       	ror	r24
    158a:	07 94       	ror	r0
    158c:	96 95       	lsr	r25
    158e:	87 95       	ror	r24
    1590:	07 94       	ror	r0
    1592:	98 2f       	mov	r25, r24
    1594:	80 2d       	mov	r24, r0
    1596:	82 2b       	or	r24, r18
    1598:	8c 93       	st	X, r24
	/* Enabling the ICU Peripheral Enable */

	SET_BIT( TIMSK, TICIE1);
    159a:	a9 e5       	ldi	r26, 0x59	; 89
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e9 e5       	ldi	r30, 0x59	; 89
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	80 62       	ori	r24, 0x20	; 32
    15a6:	8c 93       	st	X, r24

	/* Setting an initial value for Timer1 register*/
	TCNT1=0;
    15a8:	ec e4       	ldi	r30, 0x4C	; 76
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	11 82       	std	Z+1, r1	; 0x01
    15ae:	10 82       	st	Z, r1

	/* Setting an initial value for ICU register*/
	ICR1=0;
    15b0:	e6 e4       	ldi	r30, 0x46	; 70
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	11 82       	std	Z+1, r1	; 0x01
    15b6:	10 82       	st	Z, r1


}
    15b8:	0f 90       	pop	r0
    15ba:	0f 90       	pop	r0
    15bc:	cf 91       	pop	r28
    15be:	df 91       	pop	r29
    15c0:	08 95       	ret

000015c2 <ICU_setCallBack>:

void ICU_setCallBack(void(*a_ptr)(void))
{
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	00 d0       	rcall	.+0      	; 0x15c8 <ICU_setCallBack+0x6>
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
    15cc:	9a 83       	std	Y+2, r25	; 0x02
    15ce:	89 83       	std	Y+1, r24	; 0x01

	g_callBackPtr = a_ptr;
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	9a 81       	ldd	r25, Y+2	; 0x02
    15d4:	90 93 73 01 	sts	0x0173, r25
    15d8:	80 93 72 01 	sts	0x0172, r24

}
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	08 95       	ret

000015e6 <ICU_setEdgeDetectionType>:
void ICU_setEdgeDetectionType(const ICU_EdgeType edgeType)
{
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	0f 92       	push	r0
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	89 83       	std	Y+1, r24	; 0x01
	/* Choosing the Edge Type*/
	TCCR1B = (TCCR1B & 0xBF) | ((edgeType & 0x01)<<6);
    15f2:	ae e4       	ldi	r26, 0x4E	; 78
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	ee e4       	ldi	r30, 0x4E	; 78
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	28 2f       	mov	r18, r24
    15fe:	2f 7b       	andi	r18, 0xBF	; 191
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	88 2f       	mov	r24, r24
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	81 70       	andi	r24, 0x01	; 1
    1608:	90 70       	andi	r25, 0x00	; 0
    160a:	00 24       	eor	r0, r0
    160c:	96 95       	lsr	r25
    160e:	87 95       	ror	r24
    1610:	07 94       	ror	r0
    1612:	96 95       	lsr	r25
    1614:	87 95       	ror	r24
    1616:	07 94       	ror	r0
    1618:	98 2f       	mov	r25, r24
    161a:	80 2d       	mov	r24, r0
    161c:	82 2b       	or	r24, r18
    161e:	8c 93       	st	X, r24

}
    1620:	0f 90       	pop	r0
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <ICU_getInputCaptureValue>:

uint16 ICU_getInputCaptureValue(void)
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1630:	e6 e4       	ldi	r30, 0x46	; 70
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	91 81       	ldd	r25, Z+1	; 0x01
}
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <ICU_clearTimerValue>:

void ICU_clearTimerValue(void)
{
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
	TCNT1=0;
    1646:	ec e4       	ldi	r30, 0x4C	; 76
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	11 82       	std	Z+1, r1	; 0x01
    164c:	10 82       	st	Z, r1
}
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	08 95       	ret

00001654 <ICU_deInit>:
void ICU_deInit(void)
{
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    165c:	ef e4       	ldi	r30, 0x4F	; 79
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	10 82       	st	Z, r1
	TCCR1B=0;
    1662:	ee e4       	ldi	r30, 0x4E	; 78
    1664:	f0 e0       	ldi	r31, 0x00	; 0
    1666:	10 82       	st	Z, r1
	TCNT1=0;
    1668:	ec e4       	ldi	r30, 0x4C	; 76
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	11 82       	std	Z+1, r1	; 0x01
    166e:	10 82       	st	Z, r1
	ICR1=0;
    1670:	e6 e4       	ldi	r30, 0x46	; 70
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	11 82       	std	Z+1, r1	; 0x01
    1676:	10 82       	st	Z, r1
	CLEAR_BIT( TIMSK, TICIE1);
    1678:	a9 e5       	ldi	r26, 0x59	; 89
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e9 e5       	ldi	r30, 0x59	; 89
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	8f 7d       	andi	r24, 0xDF	; 223
    1684:	8c 93       	st	X, r24

	g_callBackPtr = NULL;
    1686:	10 92 73 01 	sts	0x0173, r1
    168a:	10 92 72 01 	sts	0x0172, r1

}
    168e:	cf 91       	pop	r28
    1690:	df 91       	pop	r29
    1692:	08 95       	ret

00001694 <__vector_6>:




ISR(TIMER1_CAPT_vect)
{
    1694:	1f 92       	push	r1
    1696:	0f 92       	push	r0
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	0f 92       	push	r0
    169c:	11 24       	eor	r1, r1
    169e:	2f 93       	push	r18
    16a0:	3f 93       	push	r19
    16a2:	4f 93       	push	r20
    16a4:	5f 93       	push	r21
    16a6:	6f 93       	push	r22
    16a8:	7f 93       	push	r23
    16aa:	8f 93       	push	r24
    16ac:	9f 93       	push	r25
    16ae:	af 93       	push	r26
    16b0:	bf 93       	push	r27
    16b2:	ef 93       	push	r30
    16b4:	ff 93       	push	r31
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL)
    16be:	80 91 72 01 	lds	r24, 0x0172
    16c2:	90 91 73 01 	lds	r25, 0x0173
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	29 f0       	breq	.+10     	; 0x16d4 <__vector_6+0x40>
	{
		(*g_callBackPtr)();
    16ca:	e0 91 72 01 	lds	r30, 0x0172
    16ce:	f0 91 73 01 	lds	r31, 0x0173
    16d2:	09 95       	icall

	}

}
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	ff 91       	pop	r31
    16da:	ef 91       	pop	r30
    16dc:	bf 91       	pop	r27
    16de:	af 91       	pop	r26
    16e0:	9f 91       	pop	r25
    16e2:	8f 91       	pop	r24
    16e4:	7f 91       	pop	r23
    16e6:	6f 91       	pop	r22
    16e8:	5f 91       	pop	r21
    16ea:	4f 91       	pop	r20
    16ec:	3f 91       	pop	r19
    16ee:	2f 91       	pop	r18
    16f0:	0f 90       	pop	r0
    16f2:	0f be       	out	0x3f, r0	; 63
    16f4:	0f 90       	pop	r0
    16f6:	1f 90       	pop	r1
    16f8:	18 95       	reti

000016fa <main>:
#include"icuex2.h"
#include "lcd.h"
#include "avr/io.h"
int main(void)
{
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	00 d0       	rcall	.+0      	; 0x1700 <main+0x6>
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
	SREG |= (1<<7);
    1704:	af e5       	ldi	r26, 0x5F	; 95
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	ef e5       	ldi	r30, 0x5F	; 95
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	80 68       	ori	r24, 0x80	; 128
    1710:	8c 93       	st	X, r24
	ICU_ConfigType a_ICU_attributes ={ICU_F_CPUOVER_1, RISINGEDGE};
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	89 83       	std	Y+1, r24	; 0x01
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	8a 83       	std	Y+2, r24	; 0x02
LCD_init();
    171a:	0e 94 06 0c 	call	0x180c	; 0x180c <LCD_init>
ICU_init(&a_ICU_attributes);
    171e:	ce 01       	movw	r24, r28
    1720:	01 96       	adiw	r24, 0x01	; 1
    1722:	0e 94 56 0a 	call	0x14ac	; 0x14ac <ICU_init>
ICU_setCallBack(ICU_calcDutyCycle);
    1726:	88 e9       	ldi	r24, 0x98	; 152
    1728:	9b e0       	ldi	r25, 0x0B	; 11
    172a:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <ICU_setCallBack>
    172e:	ff cf       	rjmp	.-2      	; 0x172e <main+0x34>

00001730 <ICU_calcDutyCycle>:


}

static void ICU_calcDutyCycle(void)
{
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	cd b7       	in	r28, 0x3d	; 61
    1736:	de b7       	in	r29, 0x3e	; 62
	static sint8 a_tick = -1 ;
	static uint16 a_T1,a_T2,a_T3,a_duty;
	a_tick++;
    1738:	80 91 70 01 	lds	r24, 0x0170
    173c:	8f 5f       	subi	r24, 0xFF	; 255
    173e:	80 93 70 01 	sts	0x0170, r24

	if(a_tick == 0)
    1742:	80 91 70 01 	lds	r24, 0x0170
    1746:	88 23       	and	r24, r24
    1748:	31 f4       	brne	.+12     	; 0x1756 <ICU_calcDutyCycle+0x26>
	{
		ICU_clearTimerValue();
    174a:	0e 94 1f 0b 	call	0x163e	; 0x163e <ICU_clearTimerValue>
		ICU_setEdgeDetectionType(FALLINGEDGE);
    174e:	80 e0       	ldi	r24, 0x00	; 0
    1750:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <ICU_setEdgeDetectionType>
    1754:	58 c0       	rjmp	.+176    	; 0x1806 <ICU_calcDutyCycle+0xd6>
	}
	else if(a_tick == 1)
    1756:	80 91 70 01 	lds	r24, 0x0170
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	51 f4       	brne	.+20     	; 0x1772 <ICU_calcDutyCycle+0x42>
	{
		a_T1=ICU_getInputCaptureValue();
    175e:	0e 94 14 0b 	call	0x1628	; 0x1628 <ICU_getInputCaptureValue>
    1762:	90 93 7b 01 	sts	0x017B, r25
    1766:	80 93 7a 01 	sts	0x017A, r24

		ICU_setEdgeDetectionType(RISINGEDGE);
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <ICU_setEdgeDetectionType>
    1770:	4a c0       	rjmp	.+148    	; 0x1806 <ICU_calcDutyCycle+0xd6>

	}
	else if(a_tick == 2)
    1772:	80 91 70 01 	lds	r24, 0x0170
    1776:	82 30       	cpi	r24, 0x02	; 2
    1778:	51 f4       	brne	.+20     	; 0x178e <ICU_calcDutyCycle+0x5e>
	{
		a_T2=ICU_getInputCaptureValue();
    177a:	0e 94 14 0b 	call	0x1628	; 0x1628 <ICU_getInputCaptureValue>
    177e:	90 93 79 01 	sts	0x0179, r25
    1782:	80 93 78 01 	sts	0x0178, r24
		ICU_setEdgeDetectionType(FALLINGEDGE);
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <ICU_setEdgeDetectionType>
    178c:	3c c0       	rjmp	.+120    	; 0x1806 <ICU_calcDutyCycle+0xd6>
	}
	else if(a_tick == 3)
    178e:	80 91 70 01 	lds	r24, 0x0170
    1792:	83 30       	cpi	r24, 0x03	; 3
    1794:	c1 f5       	brne	.+112    	; 0x1806 <ICU_calcDutyCycle+0xd6>
		{
			a_T3=ICU_getInputCaptureValue();
    1796:	0e 94 14 0b 	call	0x1628	; 0x1628 <ICU_getInputCaptureValue>
    179a:	90 93 77 01 	sts	0x0177, r25
    179e:	80 93 76 01 	sts	0x0176, r24
			ICU_setEdgeDetectionType(RISINGEDGE);
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <ICU_setEdgeDetectionType>


			a_duty= ((a_T3-a_T1));
    17a8:	20 91 76 01 	lds	r18, 0x0176
    17ac:	30 91 77 01 	lds	r19, 0x0177
    17b0:	80 91 7a 01 	lds	r24, 0x017A
    17b4:	90 91 7b 01 	lds	r25, 0x017B
    17b8:	a9 01       	movw	r20, r18
    17ba:	48 1b       	sub	r20, r24
    17bc:	59 0b       	sbc	r21, r25
    17be:	ca 01       	movw	r24, r20
    17c0:	90 93 75 01 	sts	0x0175, r25
    17c4:	80 93 74 01 	sts	0x0174, r24
			LCD_moveCursor(1, 1);
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	61 e0       	ldi	r22, 0x01	; 1
    17cc:	0e 94 a3 10 	call	0x2146	; 0x2146 <LCD_moveCursor>
			LCD_displayString("Duty = ");
    17d0:	80 e6       	ldi	r24, 0x60	; 96
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_displayString>
			LCD_floatToString(a_duty);
    17d8:	80 91 74 01 	lds	r24, 0x0174
    17dc:	90 91 75 01 	lds	r25, 0x0175
    17e0:	cc 01       	movw	r24, r24
    17e2:	a0 e0       	ldi	r26, 0x00	; 0
    17e4:	b0 e0       	ldi	r27, 0x00	; 0
    17e6:	bc 01       	movw	r22, r24
    17e8:	cd 01       	movw	r24, r26
    17ea:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    17ee:	dc 01       	movw	r26, r24
    17f0:	cb 01       	movw	r24, r22
    17f2:	bc 01       	movw	r22, r24
    17f4:	cd 01       	movw	r24, r26
    17f6:	0e 94 cc 11 	call	0x2398	; 0x2398 <LCD_floatToString>
			LCD_displayCharachter('%');
    17fa:	85 e2       	ldi	r24, 0x25	; 37
    17fc:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_displayCharachter>
			a_tick = -1 ;
    1800:	8f ef       	ldi	r24, 0xFF	; 255
    1802:	80 93 70 01 	sts	0x0170, r24
		}


}
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <LCD_init>:
static void LCD_modifyFloat(uint8 * string_Ptr,float32 a_num);
static void LCD_rearrange(uint8 * string_Ptr);
static void LCD_decToString(uint8*string_Ptr ,float32 a_decimalValue );
static void LCD_concatWith(uint8* a_mainStr,uint8 * string_Ptr,uint8 * string_Ptr2,uint8 a_symb);
void LCD_init(void)
{
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	cd b7       	in	r28, 0x3d	; 61
    1812:	de b7       	in	r29, 0x3e	; 62
    1814:	2e 97       	sbiw	r28, 0x0e	; 14
    1816:	0f b6       	in	r0, 0x3f	; 63
    1818:	f8 94       	cli
    181a:	de bf       	out	0x3e, r29	; 62
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORTID, LCD_RS_PINID, PIN_OUTPUT);
    1820:	83 e0       	ldi	r24, 0x03	; 3
    1822:	64 e0       	ldi	r22, 0x04	; 4
    1824:	41 e0       	ldi	r20, 0x01	; 1
    1826:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GPIO_setupPinDirection>
GPIO_setupPinDirection(LCD_EN_PORTID, LCD_EN_PINID, PIN_OUTPUT);
    182a:	83 e0       	ldi	r24, 0x03	; 3
    182c:	65 e0       	ldi	r22, 0x05	; 5
    182e:	41 e0       	ldi	r20, 0x01	; 1
    1830:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <GPIO_setupPinDirection>
#if(LCD_8BITSMODE==1)
GPIO_setupPortDirection(LCD_DATA_PORTID, PORT_OUTPUT);
    1834:	82 e0       	ldi	r24, 0x02	; 2
    1836:	6f ef       	ldi	r22, 0xFF	; 255
    1838:	0e 94 83 09 	call	0x1306	; 0x1306 <GPIO_setupPortDirection>
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	a0 ea       	ldi	r26, 0xA0	; 160
    1842:	b1 e4       	ldi	r27, 0x41	; 65
    1844:	8b 87       	std	Y+11, r24	; 0x0b
    1846:	9c 87       	std	Y+12, r25	; 0x0c
    1848:	ad 87       	std	Y+13, r26	; 0x0d
    184a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    184c:	6b 85       	ldd	r22, Y+11	; 0x0b
    184e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1850:	8d 85       	ldd	r24, Y+13	; 0x0d
    1852:	9e 85       	ldd	r25, Y+14	; 0x0e
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	4a e7       	ldi	r20, 0x7A	; 122
    185a:	53 e4       	ldi	r21, 0x43	; 67
    185c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	8f 83       	std	Y+7, r24	; 0x07
    1866:	98 87       	std	Y+8, r25	; 0x08
    1868:	a9 87       	std	Y+9, r26	; 0x09
    186a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    186c:	6f 81       	ldd	r22, Y+7	; 0x07
    186e:	78 85       	ldd	r23, Y+8	; 0x08
    1870:	89 85       	ldd	r24, Y+9	; 0x09
    1872:	9a 85       	ldd	r25, Y+10	; 0x0a
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	40 e8       	ldi	r20, 0x80	; 128
    187a:	5f e3       	ldi	r21, 0x3F	; 63
    187c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1880:	88 23       	and	r24, r24
    1882:	2c f4       	brge	.+10     	; 0x188e <LCD_init+0x82>
		__ticks = 1;
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	9e 83       	std	Y+6, r25	; 0x06
    188a:	8d 83       	std	Y+5, r24	; 0x05
    188c:	3f c0       	rjmp	.+126    	; 0x190c <LCD_init+0x100>
	else if (__tmp > 65535)
    188e:	6f 81       	ldd	r22, Y+7	; 0x07
    1890:	78 85       	ldd	r23, Y+8	; 0x08
    1892:	89 85       	ldd	r24, Y+9	; 0x09
    1894:	9a 85       	ldd	r25, Y+10	; 0x0a
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	3f ef       	ldi	r19, 0xFF	; 255
    189a:	4f e7       	ldi	r20, 0x7F	; 127
    189c:	57 e4       	ldi	r21, 0x47	; 71
    189e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18a2:	18 16       	cp	r1, r24
    18a4:	4c f5       	brge	.+82     	; 0x18f8 <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	40 e2       	ldi	r20, 0x20	; 32
    18b4:	51 e4       	ldi	r21, 0x41	; 65
    18b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	bc 01       	movw	r22, r24
    18c0:	cd 01       	movw	r24, r26
    18c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18c6:	dc 01       	movw	r26, r24
    18c8:	cb 01       	movw	r24, r22
    18ca:	9e 83       	std	Y+6, r25	; 0x06
    18cc:	8d 83       	std	Y+5, r24	; 0x05
    18ce:	0f c0       	rjmp	.+30     	; 0x18ee <LCD_init+0xe2>
    18d0:	89 e1       	ldi	r24, 0x19	; 25
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	9c 83       	std	Y+4, r25	; 0x04
    18d6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    18d8:	8b 81       	ldd	r24, Y+3	; 0x03
    18da:	9c 81       	ldd	r25, Y+4	; 0x04
    18dc:	01 97       	sbiw	r24, 0x01	; 1
    18de:	f1 f7       	brne	.-4      	; 0x18dc <LCD_init+0xd0>
    18e0:	9c 83       	std	Y+4, r25	; 0x04
    18e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18e4:	8d 81       	ldd	r24, Y+5	; 0x05
    18e6:	9e 81       	ldd	r25, Y+6	; 0x06
    18e8:	01 97       	sbiw	r24, 0x01	; 1
    18ea:	9e 83       	std	Y+6, r25	; 0x06
    18ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18ee:	8d 81       	ldd	r24, Y+5	; 0x05
    18f0:	9e 81       	ldd	r25, Y+6	; 0x06
    18f2:	00 97       	sbiw	r24, 0x00	; 0
    18f4:	69 f7       	brne	.-38     	; 0x18d0 <LCD_init+0xc4>
    18f6:	14 c0       	rjmp	.+40     	; 0x1920 <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18f8:	6f 81       	ldd	r22, Y+7	; 0x07
    18fa:	78 85       	ldd	r23, Y+8	; 0x08
    18fc:	89 85       	ldd	r24, Y+9	; 0x09
    18fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	9e 83       	std	Y+6, r25	; 0x06
    190a:	8d 83       	std	Y+5, r24	; 0x05
    190c:	8d 81       	ldd	r24, Y+5	; 0x05
    190e:	9e 81       	ldd	r25, Y+6	; 0x06
    1910:	9a 83       	std	Y+2, r25	; 0x02
    1912:	89 83       	std	Y+1, r24	; 0x01
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	9a 81       	ldd	r25, Y+2	; 0x02
    1918:	01 97       	sbiw	r24, 0x01	; 1
    191a:	f1 f7       	brne	.-4      	; 0x1918 <LCD_init+0x10c>
    191c:	9a 83       	std	Y+2, r25	; 0x02
    191e:	89 83       	std	Y+1, r24	; 0x01
GPIO_setupPinDirection(LCD_DATA_PORTID, LCD_PIN3ID, PIN_OUTPUT);
#endif
/* as the LCD takes 15 millisecond to start up	*/
	_delay_ms(20);
#if(LCD_8BITSMODE==1)
LCD_sendCommand(LCD_EIGHTBIT_TWOLINE);
    1920:	88 e3       	ldi	r24, 0x38	; 56
    1922:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_sendCommand>
LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1 );
LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2 );
LCD_sendCommand(LCD_FOURBIT_TWOLINE);
#endif

	LCD_sendCommand(LCD_DISPLAYON_CURSOROFF	);
    1926:	8c e0       	ldi	r24, 0x0C	; 12
    1928:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_sendCommand>
}
    1932:	2e 96       	adiw	r28, 0x0e	; 14
    1934:	0f b6       	in	r0, 0x3f	; 63
    1936:	f8 94       	cli
    1938:	de bf       	out	0x3e, r29	; 62
    193a:	0f be       	out	0x3f, r0	; 63
    193c:	cd bf       	out	0x3d, r28	; 61
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <LCD_sendCommand>:

void LCD_sendCommand(uint8 a_LCD_commands)
{
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	cd b7       	in	r28, 0x3d	; 61
    194a:	de b7       	in	r29, 0x3e	; 62
    194c:	e9 97       	sbiw	r28, 0x39	; 57
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	f8 94       	cli
    1952:	de bf       	out	0x3e, r29	; 62
    1954:	0f be       	out	0x3f, r0	; 63
    1956:	cd bf       	out	0x3d, r28	; 61
    1958:	89 af       	std	Y+57, r24	; 0x39
	/* RS bit is responsible for register select for each of data and
	 *  commands to adjust settings*/
	GPIO_writePin(LCD_RS_PORTID,LCD_RS_PINID, LCD_SELECT_COMMAND_REGISTER);
    195a:	83 e0       	ldi	r24, 0x03	; 3
    195c:	64 e0       	ldi	r22, 0x04	; 4
    195e:	40 e0       	ldi	r20, 0x00	; 0
    1960:	0e 94 65 07 	call	0xeca	; 0xeca <GPIO_writePin>
    1964:	80 e0       	ldi	r24, 0x00	; 0
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	a0 e8       	ldi	r26, 0x80	; 128
    196a:	bf e3       	ldi	r27, 0x3F	; 63
    196c:	8d ab       	std	Y+53, r24	; 0x35
    196e:	9e ab       	std	Y+54, r25	; 0x36
    1970:	af ab       	std	Y+55, r26	; 0x37
    1972:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1974:	6d a9       	ldd	r22, Y+53	; 0x35
    1976:	7e a9       	ldd	r23, Y+54	; 0x36
    1978:	8f a9       	ldd	r24, Y+55	; 0x37
    197a:	98 ad       	ldd	r25, Y+56	; 0x38
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	4a e7       	ldi	r20, 0x7A	; 122
    1982:	53 e4       	ldi	r21, 0x43	; 67
    1984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	89 ab       	std	Y+49, r24	; 0x31
    198e:	9a ab       	std	Y+50, r25	; 0x32
    1990:	ab ab       	std	Y+51, r26	; 0x33
    1992:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1994:	69 a9       	ldd	r22, Y+49	; 0x31
    1996:	7a a9       	ldd	r23, Y+50	; 0x32
    1998:	8b a9       	ldd	r24, Y+51	; 0x33
    199a:	9c a9       	ldd	r25, Y+52	; 0x34
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	40 e8       	ldi	r20, 0x80	; 128
    19a2:	5f e3       	ldi	r21, 0x3F	; 63
    19a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19a8:	88 23       	and	r24, r24
    19aa:	2c f4       	brge	.+10     	; 0x19b6 <LCD_sendCommand+0x72>
		__ticks = 1;
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	98 ab       	std	Y+48, r25	; 0x30
    19b2:	8f a7       	std	Y+47, r24	; 0x2f
    19b4:	3f c0       	rjmp	.+126    	; 0x1a34 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    19b6:	69 a9       	ldd	r22, Y+49	; 0x31
    19b8:	7a a9       	ldd	r23, Y+50	; 0x32
    19ba:	8b a9       	ldd	r24, Y+51	; 0x33
    19bc:	9c a9       	ldd	r25, Y+52	; 0x34
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	3f ef       	ldi	r19, 0xFF	; 255
    19c2:	4f e7       	ldi	r20, 0x7F	; 127
    19c4:	57 e4       	ldi	r21, 0x47	; 71
    19c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19ca:	18 16       	cp	r1, r24
    19cc:	4c f5       	brge	.+82     	; 0x1a20 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ce:	6d a9       	ldd	r22, Y+53	; 0x35
    19d0:	7e a9       	ldd	r23, Y+54	; 0x36
    19d2:	8f a9       	ldd	r24, Y+55	; 0x37
    19d4:	98 ad       	ldd	r25, Y+56	; 0x38
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e2       	ldi	r20, 0x20	; 32
    19dc:	51 e4       	ldi	r21, 0x41	; 65
    19de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	bc 01       	movw	r22, r24
    19e8:	cd 01       	movw	r24, r26
    19ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19ee:	dc 01       	movw	r26, r24
    19f0:	cb 01       	movw	r24, r22
    19f2:	98 ab       	std	Y+48, r25	; 0x30
    19f4:	8f a7       	std	Y+47, r24	; 0x2f
    19f6:	0f c0       	rjmp	.+30     	; 0x1a16 <LCD_sendCommand+0xd2>
    19f8:	89 e1       	ldi	r24, 0x19	; 25
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	9e a7       	std	Y+46, r25	; 0x2e
    19fe:	8d a7       	std	Y+45, r24	; 0x2d
    1a00:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a02:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	f1 f7       	brne	.-4      	; 0x1a04 <LCD_sendCommand+0xc0>
    1a08:	9e a7       	std	Y+46, r25	; 0x2e
    1a0a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a0e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a10:	01 97       	sbiw	r24, 0x01	; 1
    1a12:	98 ab       	std	Y+48, r25	; 0x30
    1a14:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a16:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a18:	98 a9       	ldd	r25, Y+48	; 0x30
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	69 f7       	brne	.-38     	; 0x19f8 <LCD_sendCommand+0xb4>
    1a1e:	14 c0       	rjmp	.+40     	; 0x1a48 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a20:	69 a9       	ldd	r22, Y+49	; 0x31
    1a22:	7a a9       	ldd	r23, Y+50	; 0x32
    1a24:	8b a9       	ldd	r24, Y+51	; 0x33
    1a26:	9c a9       	ldd	r25, Y+52	; 0x34
    1a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	98 ab       	std	Y+48, r25	; 0x30
    1a32:	8f a7       	std	Y+47, r24	; 0x2f
    1a34:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a36:	98 a9       	ldd	r25, Y+48	; 0x30
    1a38:	9c a7       	std	Y+44, r25	; 0x2c
    1a3a:	8b a7       	std	Y+43, r24	; 0x2b
    1a3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a3e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	f1 f7       	brne	.-4      	; 0x1a40 <LCD_sendCommand+0xfc>
    1a44:	9c a7       	std	Y+44, r25	; 0x2c
    1a46:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
	/* EN bit is used to turn on the screen*/
	GPIO_writePin(LCD_EN_PORTID,LCD_EN_PINID,LOGIC_HIGH);
    1a48:	83 e0       	ldi	r24, 0x03	; 3
    1a4a:	65 e0       	ldi	r22, 0x05	; 5
    1a4c:	41 e0       	ldi	r20, 0x01	; 1
    1a4e:	0e 94 65 07 	call	0xeca	; 0xeca <GPIO_writePin>
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	a0 e8       	ldi	r26, 0x80	; 128
    1a58:	bf e3       	ldi	r27, 0x3F	; 63
    1a5a:	8f a3       	std	Y+39, r24	; 0x27
    1a5c:	98 a7       	std	Y+40, r25	; 0x28
    1a5e:	a9 a7       	std	Y+41, r26	; 0x29
    1a60:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a62:	6f a1       	ldd	r22, Y+39	; 0x27
    1a64:	78 a5       	ldd	r23, Y+40	; 0x28
    1a66:	89 a5       	ldd	r24, Y+41	; 0x29
    1a68:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a6a:	20 e0       	ldi	r18, 0x00	; 0
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	4a e7       	ldi	r20, 0x7A	; 122
    1a70:	53 e4       	ldi	r21, 0x43	; 67
    1a72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a76:	dc 01       	movw	r26, r24
    1a78:	cb 01       	movw	r24, r22
    1a7a:	8b a3       	std	Y+35, r24	; 0x23
    1a7c:	9c a3       	std	Y+36, r25	; 0x24
    1a7e:	ad a3       	std	Y+37, r26	; 0x25
    1a80:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a82:	6b a1       	ldd	r22, Y+35	; 0x23
    1a84:	7c a1       	ldd	r23, Y+36	; 0x24
    1a86:	8d a1       	ldd	r24, Y+37	; 0x25
    1a88:	9e a1       	ldd	r25, Y+38	; 0x26
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	40 e8       	ldi	r20, 0x80	; 128
    1a90:	5f e3       	ldi	r21, 0x3F	; 63
    1a92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a96:	88 23       	and	r24, r24
    1a98:	2c f4       	brge	.+10     	; 0x1aa4 <LCD_sendCommand+0x160>
		__ticks = 1;
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	9a a3       	std	Y+34, r25	; 0x22
    1aa0:	89 a3       	std	Y+33, r24	; 0x21
    1aa2:	3f c0       	rjmp	.+126    	; 0x1b22 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1aa4:	6b a1       	ldd	r22, Y+35	; 0x23
    1aa6:	7c a1       	ldd	r23, Y+36	; 0x24
    1aa8:	8d a1       	ldd	r24, Y+37	; 0x25
    1aaa:	9e a1       	ldd	r25, Y+38	; 0x26
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	3f ef       	ldi	r19, 0xFF	; 255
    1ab0:	4f e7       	ldi	r20, 0x7F	; 127
    1ab2:	57 e4       	ldi	r21, 0x47	; 71
    1ab4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ab8:	18 16       	cp	r1, r24
    1aba:	4c f5       	brge	.+82     	; 0x1b0e <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1abc:	6f a1       	ldd	r22, Y+39	; 0x27
    1abe:	78 a5       	ldd	r23, Y+40	; 0x28
    1ac0:	89 a5       	ldd	r24, Y+41	; 0x29
    1ac2:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e2       	ldi	r20, 0x20	; 32
    1aca:	51 e4       	ldi	r21, 0x41	; 65
    1acc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	cb 01       	movw	r24, r22
    1ad4:	bc 01       	movw	r22, r24
    1ad6:	cd 01       	movw	r24, r26
    1ad8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	9a a3       	std	Y+34, r25	; 0x22
    1ae2:	89 a3       	std	Y+33, r24	; 0x21
    1ae4:	0f c0       	rjmp	.+30     	; 0x1b04 <LCD_sendCommand+0x1c0>
    1ae6:	89 e1       	ldi	r24, 0x19	; 25
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	98 a3       	std	Y+32, r25	; 0x20
    1aec:	8f 8f       	std	Y+31, r24	; 0x1f
    1aee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1af0:	98 a1       	ldd	r25, Y+32	; 0x20
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <LCD_sendCommand+0x1ae>
    1af6:	98 a3       	std	Y+32, r25	; 0x20
    1af8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1afa:	89 a1       	ldd	r24, Y+33	; 0x21
    1afc:	9a a1       	ldd	r25, Y+34	; 0x22
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	9a a3       	std	Y+34, r25	; 0x22
    1b02:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b04:	89 a1       	ldd	r24, Y+33	; 0x21
    1b06:	9a a1       	ldd	r25, Y+34	; 0x22
    1b08:	00 97       	sbiw	r24, 0x00	; 0
    1b0a:	69 f7       	brne	.-38     	; 0x1ae6 <LCD_sendCommand+0x1a2>
    1b0c:	14 c0       	rjmp	.+40     	; 0x1b36 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0e:	6b a1       	ldd	r22, Y+35	; 0x23
    1b10:	7c a1       	ldd	r23, Y+36	; 0x24
    1b12:	8d a1       	ldd	r24, Y+37	; 0x25
    1b14:	9e a1       	ldd	r25, Y+38	; 0x26
    1b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	9a a3       	std	Y+34, r25	; 0x22
    1b20:	89 a3       	std	Y+33, r24	; 0x21
    1b22:	89 a1       	ldd	r24, Y+33	; 0x21
    1b24:	9a a1       	ldd	r25, Y+34	; 0x22
    1b26:	9e 8f       	std	Y+30, r25	; 0x1e
    1b28:	8d 8f       	std	Y+29, r24	; 0x1d
    1b2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b2e:	01 97       	sbiw	r24, 0x01	; 1
    1b30:	f1 f7       	brne	.-4      	; 0x1b2e <LCD_sendCommand+0x1ea>
    1b32:	9e 8f       	std	Y+30, r25	; 0x1e
    1b34:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
#if(LCD_8BITSMODE==1)
		GPIO_writePort(LCD_DATA_PORTID,a_LCD_commands);
    1b36:	82 e0       	ldi	r24, 0x02	; 2
    1b38:	69 ad       	ldd	r22, Y+57	; 0x39
    1b3a:	0e 94 cd 09 	call	0x139a	; 0x139a <GPIO_writePort>
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	a0 e8       	ldi	r26, 0x80	; 128
    1b44:	bf e3       	ldi	r27, 0x3F	; 63
    1b46:	89 8f       	std	Y+25, r24	; 0x19
    1b48:	9a 8f       	std	Y+26, r25	; 0x1a
    1b4a:	ab 8f       	std	Y+27, r26	; 0x1b
    1b4c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4e:	69 8d       	ldd	r22, Y+25	; 0x19
    1b50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	4a e7       	ldi	r20, 0x7A	; 122
    1b5c:	53 e4       	ldi	r21, 0x43	; 67
    1b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	8d 8b       	std	Y+21, r24	; 0x15
    1b68:	9e 8b       	std	Y+22, r25	; 0x16
    1b6a:	af 8b       	std	Y+23, r26	; 0x17
    1b6c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b70:	7e 89       	ldd	r23, Y+22	; 0x16
    1b72:	8f 89       	ldd	r24, Y+23	; 0x17
    1b74:	98 8d       	ldd	r25, Y+24	; 0x18
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e8       	ldi	r20, 0x80	; 128
    1b7c:	5f e3       	ldi	r21, 0x3F	; 63
    1b7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b82:	88 23       	and	r24, r24
    1b84:	2c f4       	brge	.+10     	; 0x1b90 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	9c 8b       	std	Y+20, r25	; 0x14
    1b8c:	8b 8b       	std	Y+19, r24	; 0x13
    1b8e:	3f c0       	rjmp	.+126    	; 0x1c0e <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1b90:	6d 89       	ldd	r22, Y+21	; 0x15
    1b92:	7e 89       	ldd	r23, Y+22	; 0x16
    1b94:	8f 89       	ldd	r24, Y+23	; 0x17
    1b96:	98 8d       	ldd	r25, Y+24	; 0x18
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	3f ef       	ldi	r19, 0xFF	; 255
    1b9c:	4f e7       	ldi	r20, 0x7F	; 127
    1b9e:	57 e4       	ldi	r21, 0x47	; 71
    1ba0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ba4:	18 16       	cp	r1, r24
    1ba6:	4c f5       	brge	.+82     	; 0x1bfa <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba8:	69 8d       	ldd	r22, Y+25	; 0x19
    1baa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e2       	ldi	r20, 0x20	; 32
    1bb6:	51 e4       	ldi	r21, 0x41	; 65
    1bb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	bc 01       	movw	r22, r24
    1bc2:	cd 01       	movw	r24, r26
    1bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	9c 8b       	std	Y+20, r25	; 0x14
    1bce:	8b 8b       	std	Y+19, r24	; 0x13
    1bd0:	0f c0       	rjmp	.+30     	; 0x1bf0 <LCD_sendCommand+0x2ac>
    1bd2:	89 e1       	ldi	r24, 0x19	; 25
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	9a 8b       	std	Y+18, r25	; 0x12
    1bd8:	89 8b       	std	Y+17, r24	; 0x11
    1bda:	89 89       	ldd	r24, Y+17	; 0x11
    1bdc:	9a 89       	ldd	r25, Y+18	; 0x12
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <LCD_sendCommand+0x29a>
    1be2:	9a 8b       	std	Y+18, r25	; 0x12
    1be4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be6:	8b 89       	ldd	r24, Y+19	; 0x13
    1be8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	9c 8b       	std	Y+20, r25	; 0x14
    1bee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bf4:	00 97       	sbiw	r24, 0x00	; 0
    1bf6:	69 f7       	brne	.-38     	; 0x1bd2 <LCD_sendCommand+0x28e>
    1bf8:	14 c0       	rjmp	.+40     	; 0x1c22 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfa:	6d 89       	ldd	r22, Y+21	; 0x15
    1bfc:	7e 89       	ldd	r23, Y+22	; 0x16
    1bfe:	8f 89       	ldd	r24, Y+23	; 0x17
    1c00:	98 8d       	ldd	r25, Y+24	; 0x18
    1c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	9c 8b       	std	Y+20, r25	; 0x14
    1c0c:	8b 8b       	std	Y+19, r24	; 0x13
    1c0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c10:	9c 89       	ldd	r25, Y+20	; 0x14
    1c12:	98 8b       	std	Y+16, r25	; 0x10
    1c14:	8f 87       	std	Y+15, r24	; 0x0f
    1c16:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c18:	98 89       	ldd	r25, Y+16	; 0x10
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <LCD_sendCommand+0x2d6>
    1c1e:	98 8b       	std	Y+16, r25	; 0x10
    1c20:	8f 87       	std	Y+15, r24	; 0x0f
		GPIO_writePin(LCD_DATA_PORTID,LCD_PIN1ID,GET_BIT(a_LCD_commands,1));
		GPIO_writePin(LCD_DATA_PORTID,LCD_PIN2ID,GET_BIT(a_LCD_commands,2));
		GPIO_writePin(LCD_DATA_PORTID,LCD_PIN3ID,GET_BIT(a_LCD_commands,3));
#endif
		_delay_ms(1);
		GPIO_writePin(LCD_EN_PORTID,LCD_EN_PINID,LOGIC_LOW);
    1c22:	83 e0       	ldi	r24, 0x03	; 3
    1c24:	65 e0       	ldi	r22, 0x05	; 5
    1c26:	40 e0       	ldi	r20, 0x00	; 0
    1c28:	0e 94 65 07 	call	0xeca	; 0xeca <GPIO_writePin>
    1c2c:	80 e0       	ldi	r24, 0x00	; 0
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	a0 e8       	ldi	r26, 0x80	; 128
    1c32:	bf e3       	ldi	r27, 0x3F	; 63
    1c34:	8b 87       	std	Y+11, r24	; 0x0b
    1c36:	9c 87       	std	Y+12, r25	; 0x0c
    1c38:	ad 87       	std	Y+13, r26	; 0x0d
    1c3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c44:	20 e0       	ldi	r18, 0x00	; 0
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	4a e7       	ldi	r20, 0x7A	; 122
    1c4a:	53 e4       	ldi	r21, 0x43	; 67
    1c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c50:	dc 01       	movw	r26, r24
    1c52:	cb 01       	movw	r24, r22
    1c54:	8f 83       	std	Y+7, r24	; 0x07
    1c56:	98 87       	std	Y+8, r25	; 0x08
    1c58:	a9 87       	std	Y+9, r26	; 0x09
    1c5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5e:	78 85       	ldd	r23, Y+8	; 0x08
    1c60:	89 85       	ldd	r24, Y+9	; 0x09
    1c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	40 e8       	ldi	r20, 0x80	; 128
    1c6a:	5f e3       	ldi	r21, 0x3F	; 63
    1c6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c70:	88 23       	and	r24, r24
    1c72:	2c f4       	brge	.+10     	; 0x1c7e <LCD_sendCommand+0x33a>
		__ticks = 1;
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	9e 83       	std	Y+6, r25	; 0x06
    1c7a:	8d 83       	std	Y+5, r24	; 0x05
    1c7c:	3f c0       	rjmp	.+126    	; 0x1cfc <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1c7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c80:	78 85       	ldd	r23, Y+8	; 0x08
    1c82:	89 85       	ldd	r24, Y+9	; 0x09
    1c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	3f ef       	ldi	r19, 0xFF	; 255
    1c8a:	4f e7       	ldi	r20, 0x7F	; 127
    1c8c:	57 e4       	ldi	r21, 0x47	; 71
    1c8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c92:	18 16       	cp	r1, r24
    1c94:	4c f5       	brge	.+82     	; 0x1ce8 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9e:	20 e0       	ldi	r18, 0x00	; 0
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	40 e2       	ldi	r20, 0x20	; 32
    1ca4:	51 e4       	ldi	r21, 0x41	; 65
    1ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1caa:	dc 01       	movw	r26, r24
    1cac:	cb 01       	movw	r24, r22
    1cae:	bc 01       	movw	r22, r24
    1cb0:	cd 01       	movw	r24, r26
    1cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	cb 01       	movw	r24, r22
    1cba:	9e 83       	std	Y+6, r25	; 0x06
    1cbc:	8d 83       	std	Y+5, r24	; 0x05
    1cbe:	0f c0       	rjmp	.+30     	; 0x1cde <LCD_sendCommand+0x39a>
    1cc0:	89 e1       	ldi	r24, 0x19	; 25
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	9c 83       	std	Y+4, r25	; 0x04
    1cc6:	8b 83       	std	Y+3, r24	; 0x03
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	9c 81       	ldd	r25, Y+4	; 0x04
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <LCD_sendCommand+0x388>
    1cd0:	9c 83       	std	Y+4, r25	; 0x04
    1cd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	9e 83       	std	Y+6, r25	; 0x06
    1cdc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cde:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce2:	00 97       	sbiw	r24, 0x00	; 0
    1ce4:	69 f7       	brne	.-38     	; 0x1cc0 <LCD_sendCommand+0x37c>
    1ce6:	14 c0       	rjmp	.+40     	; 0x1d10 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cea:	78 85       	ldd	r23, Y+8	; 0x08
    1cec:	89 85       	ldd	r24, Y+9	; 0x09
    1cee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	9e 83       	std	Y+6, r25	; 0x06
    1cfa:	8d 83       	std	Y+5, r24	; 0x05
    1cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1d00:	9a 83       	std	Y+2, r25	; 0x02
    1d02:	89 83       	std	Y+1, r24	; 0x01
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	9a 81       	ldd	r25, Y+2	; 0x02
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	f1 f7       	brne	.-4      	; 0x1d08 <LCD_sendCommand+0x3c4>
    1d0c:	9a 83       	std	Y+2, r25	; 0x02
    1d0e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
}
    1d10:	e9 96       	adiw	r28, 0x39	; 57
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <LCD_displayCharachter>:

void LCD_displayCharachter(uint8 a_char)
{
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	e9 97       	sbiw	r28, 0x39	; 57
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	de bf       	out	0x3e, r29	; 62
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	cd bf       	out	0x3d, r28	; 61
    1d36:	89 af       	std	Y+57, r24	; 0x39
	/* RS bit is responsible for register select for each of data and
		 *  commands to adjust settings*/
		GPIO_writePin(LCD_RS_PORTID,LCD_RS_PINID,LCD_SELECT_DATA_REGISTER);
    1d38:	83 e0       	ldi	r24, 0x03	; 3
    1d3a:	64 e0       	ldi	r22, 0x04	; 4
    1d3c:	41 e0       	ldi	r20, 0x01	; 1
    1d3e:	0e 94 65 07 	call	0xeca	; 0xeca <GPIO_writePin>
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	a0 e8       	ldi	r26, 0x80	; 128
    1d48:	bf e3       	ldi	r27, 0x3F	; 63
    1d4a:	8d ab       	std	Y+53, r24	; 0x35
    1d4c:	9e ab       	std	Y+54, r25	; 0x36
    1d4e:	af ab       	std	Y+55, r26	; 0x37
    1d50:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d52:	6d a9       	ldd	r22, Y+53	; 0x35
    1d54:	7e a9       	ldd	r23, Y+54	; 0x36
    1d56:	8f a9       	ldd	r24, Y+55	; 0x37
    1d58:	98 ad       	ldd	r25, Y+56	; 0x38
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	4a e7       	ldi	r20, 0x7A	; 122
    1d60:	53 e4       	ldi	r21, 0x43	; 67
    1d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	89 ab       	std	Y+49, r24	; 0x31
    1d6c:	9a ab       	std	Y+50, r25	; 0x32
    1d6e:	ab ab       	std	Y+51, r26	; 0x33
    1d70:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d72:	69 a9       	ldd	r22, Y+49	; 0x31
    1d74:	7a a9       	ldd	r23, Y+50	; 0x32
    1d76:	8b a9       	ldd	r24, Y+51	; 0x33
    1d78:	9c a9       	ldd	r25, Y+52	; 0x34
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e8       	ldi	r20, 0x80	; 128
    1d80:	5f e3       	ldi	r21, 0x3F	; 63
    1d82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d86:	88 23       	and	r24, r24
    1d88:	2c f4       	brge	.+10     	; 0x1d94 <LCD_displayCharachter+0x72>
		__ticks = 1;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	98 ab       	std	Y+48, r25	; 0x30
    1d90:	8f a7       	std	Y+47, r24	; 0x2f
    1d92:	3f c0       	rjmp	.+126    	; 0x1e12 <LCD_displayCharachter+0xf0>
	else if (__tmp > 65535)
    1d94:	69 a9       	ldd	r22, Y+49	; 0x31
    1d96:	7a a9       	ldd	r23, Y+50	; 0x32
    1d98:	8b a9       	ldd	r24, Y+51	; 0x33
    1d9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	3f ef       	ldi	r19, 0xFF	; 255
    1da0:	4f e7       	ldi	r20, 0x7F	; 127
    1da2:	57 e4       	ldi	r21, 0x47	; 71
    1da4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1da8:	18 16       	cp	r1, r24
    1daa:	4c f5       	brge	.+82     	; 0x1dfe <LCD_displayCharachter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dac:	6d a9       	ldd	r22, Y+53	; 0x35
    1dae:	7e a9       	ldd	r23, Y+54	; 0x36
    1db0:	8f a9       	ldd	r24, Y+55	; 0x37
    1db2:	98 ad       	ldd	r25, Y+56	; 0x38
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e2       	ldi	r20, 0x20	; 32
    1dba:	51 e4       	ldi	r21, 0x41	; 65
    1dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	bc 01       	movw	r22, r24
    1dc6:	cd 01       	movw	r24, r26
    1dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	98 ab       	std	Y+48, r25	; 0x30
    1dd2:	8f a7       	std	Y+47, r24	; 0x2f
    1dd4:	0f c0       	rjmp	.+30     	; 0x1df4 <LCD_displayCharachter+0xd2>
    1dd6:	89 e1       	ldi	r24, 0x19	; 25
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9e a7       	std	Y+46, r25	; 0x2e
    1ddc:	8d a7       	std	Y+45, r24	; 0x2d
    1dde:	8d a5       	ldd	r24, Y+45	; 0x2d
    1de0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <LCD_displayCharachter+0xc0>
    1de6:	9e a7       	std	Y+46, r25	; 0x2e
    1de8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dea:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dec:	98 a9       	ldd	r25, Y+48	; 0x30
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	98 ab       	std	Y+48, r25	; 0x30
    1df2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1df6:	98 a9       	ldd	r25, Y+48	; 0x30
    1df8:	00 97       	sbiw	r24, 0x00	; 0
    1dfa:	69 f7       	brne	.-38     	; 0x1dd6 <LCD_displayCharachter+0xb4>
    1dfc:	14 c0       	rjmp	.+40     	; 0x1e26 <LCD_displayCharachter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfe:	69 a9       	ldd	r22, Y+49	; 0x31
    1e00:	7a a9       	ldd	r23, Y+50	; 0x32
    1e02:	8b a9       	ldd	r24, Y+51	; 0x33
    1e04:	9c a9       	ldd	r25, Y+52	; 0x34
    1e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	98 ab       	std	Y+48, r25	; 0x30
    1e10:	8f a7       	std	Y+47, r24	; 0x2f
    1e12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e14:	98 a9       	ldd	r25, Y+48	; 0x30
    1e16:	9c a7       	std	Y+44, r25	; 0x2c
    1e18:	8b a7       	std	Y+43, r24	; 0x2b
    1e1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <LCD_displayCharachter+0xfc>
    1e22:	9c a7       	std	Y+44, r25	; 0x2c
    1e24:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(1);
		/* EN bit is used to turn on the screen*/

		GPIO_writePin(LCD_EN_PORTID,LCD_EN_PINID,LOGIC_HIGH);
    1e26:	83 e0       	ldi	r24, 0x03	; 3
    1e28:	65 e0       	ldi	r22, 0x05	; 5
    1e2a:	41 e0       	ldi	r20, 0x01	; 1
    1e2c:	0e 94 65 07 	call	0xeca	; 0xeca <GPIO_writePin>
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	a0 e8       	ldi	r26, 0x80	; 128
    1e36:	bf e3       	ldi	r27, 0x3F	; 63
    1e38:	8f a3       	std	Y+39, r24	; 0x27
    1e3a:	98 a7       	std	Y+40, r25	; 0x28
    1e3c:	a9 a7       	std	Y+41, r26	; 0x29
    1e3e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e40:	6f a1       	ldd	r22, Y+39	; 0x27
    1e42:	78 a5       	ldd	r23, Y+40	; 0x28
    1e44:	89 a5       	ldd	r24, Y+41	; 0x29
    1e46:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	4a e7       	ldi	r20, 0x7A	; 122
    1e4e:	53 e4       	ldi	r21, 0x43	; 67
    1e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	8b a3       	std	Y+35, r24	; 0x23
    1e5a:	9c a3       	std	Y+36, r25	; 0x24
    1e5c:	ad a3       	std	Y+37, r26	; 0x25
    1e5e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e60:	6b a1       	ldd	r22, Y+35	; 0x23
    1e62:	7c a1       	ldd	r23, Y+36	; 0x24
    1e64:	8d a1       	ldd	r24, Y+37	; 0x25
    1e66:	9e a1       	ldd	r25, Y+38	; 0x26
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	40 e8       	ldi	r20, 0x80	; 128
    1e6e:	5f e3       	ldi	r21, 0x3F	; 63
    1e70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e74:	88 23       	and	r24, r24
    1e76:	2c f4       	brge	.+10     	; 0x1e82 <LCD_displayCharachter+0x160>
		__ticks = 1;
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	9a a3       	std	Y+34, r25	; 0x22
    1e7e:	89 a3       	std	Y+33, r24	; 0x21
    1e80:	3f c0       	rjmp	.+126    	; 0x1f00 <LCD_displayCharachter+0x1de>
	else if (__tmp > 65535)
    1e82:	6b a1       	ldd	r22, Y+35	; 0x23
    1e84:	7c a1       	ldd	r23, Y+36	; 0x24
    1e86:	8d a1       	ldd	r24, Y+37	; 0x25
    1e88:	9e a1       	ldd	r25, Y+38	; 0x26
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	3f ef       	ldi	r19, 0xFF	; 255
    1e8e:	4f e7       	ldi	r20, 0x7F	; 127
    1e90:	57 e4       	ldi	r21, 0x47	; 71
    1e92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e96:	18 16       	cp	r1, r24
    1e98:	4c f5       	brge	.+82     	; 0x1eec <LCD_displayCharachter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e9a:	6f a1       	ldd	r22, Y+39	; 0x27
    1e9c:	78 a5       	ldd	r23, Y+40	; 0x28
    1e9e:	89 a5       	ldd	r24, Y+41	; 0x29
    1ea0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	40 e2       	ldi	r20, 0x20	; 32
    1ea8:	51 e4       	ldi	r21, 0x41	; 65
    1eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	bc 01       	movw	r22, r24
    1eb4:	cd 01       	movw	r24, r26
    1eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	9a a3       	std	Y+34, r25	; 0x22
    1ec0:	89 a3       	std	Y+33, r24	; 0x21
    1ec2:	0f c0       	rjmp	.+30     	; 0x1ee2 <LCD_displayCharachter+0x1c0>
    1ec4:	89 e1       	ldi	r24, 0x19	; 25
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	98 a3       	std	Y+32, r25	; 0x20
    1eca:	8f 8f       	std	Y+31, r24	; 0x1f
    1ecc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ece:	98 a1       	ldd	r25, Y+32	; 0x20
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	f1 f7       	brne	.-4      	; 0x1ed0 <LCD_displayCharachter+0x1ae>
    1ed4:	98 a3       	std	Y+32, r25	; 0x20
    1ed6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed8:	89 a1       	ldd	r24, Y+33	; 0x21
    1eda:	9a a1       	ldd	r25, Y+34	; 0x22
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	9a a3       	std	Y+34, r25	; 0x22
    1ee0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ee4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ee6:	00 97       	sbiw	r24, 0x00	; 0
    1ee8:	69 f7       	brne	.-38     	; 0x1ec4 <LCD_displayCharachter+0x1a2>
    1eea:	14 c0       	rjmp	.+40     	; 0x1f14 <LCD_displayCharachter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eec:	6b a1       	ldd	r22, Y+35	; 0x23
    1eee:	7c a1       	ldd	r23, Y+36	; 0x24
    1ef0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ef2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	9a a3       	std	Y+34, r25	; 0x22
    1efe:	89 a3       	std	Y+33, r24	; 0x21
    1f00:	89 a1       	ldd	r24, Y+33	; 0x21
    1f02:	9a a1       	ldd	r25, Y+34	; 0x22
    1f04:	9e 8f       	std	Y+30, r25	; 0x1e
    1f06:	8d 8f       	std	Y+29, r24	; 0x1d
    1f08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	f1 f7       	brne	.-4      	; 0x1f0c <LCD_displayCharachter+0x1ea>
    1f10:	9e 8f       	std	Y+30, r25	; 0x1e
    1f12:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1);
#if(LCD_8BITSMODE==1)
		GPIO_writePort(LCD_DATA_PORTID,a_char);
    1f14:	82 e0       	ldi	r24, 0x02	; 2
    1f16:	69 ad       	ldd	r22, Y+57	; 0x39
    1f18:	0e 94 cd 09 	call	0x139a	; 0x139a <GPIO_writePort>
    1f1c:	80 e0       	ldi	r24, 0x00	; 0
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	a0 e8       	ldi	r26, 0x80	; 128
    1f22:	bf e3       	ldi	r27, 0x3F	; 63
    1f24:	89 8f       	std	Y+25, r24	; 0x19
    1f26:	9a 8f       	std	Y+26, r25	; 0x1a
    1f28:	ab 8f       	std	Y+27, r26	; 0x1b
    1f2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2c:	69 8d       	ldd	r22, Y+25	; 0x19
    1f2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	4a e7       	ldi	r20, 0x7A	; 122
    1f3a:	53 e4       	ldi	r21, 0x43	; 67
    1f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	8d 8b       	std	Y+21, r24	; 0x15
    1f46:	9e 8b       	std	Y+22, r25	; 0x16
    1f48:	af 8b       	std	Y+23, r26	; 0x17
    1f4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f50:	8f 89       	ldd	r24, Y+23	; 0x17
    1f52:	98 8d       	ldd	r25, Y+24	; 0x18
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	40 e8       	ldi	r20, 0x80	; 128
    1f5a:	5f e3       	ldi	r21, 0x3F	; 63
    1f5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f60:	88 23       	and	r24, r24
    1f62:	2c f4       	brge	.+10     	; 0x1f6e <LCD_displayCharachter+0x24c>
		__ticks = 1;
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	90 e0       	ldi	r25, 0x00	; 0
    1f68:	9c 8b       	std	Y+20, r25	; 0x14
    1f6a:	8b 8b       	std	Y+19, r24	; 0x13
    1f6c:	3f c0       	rjmp	.+126    	; 0x1fec <LCD_displayCharachter+0x2ca>
	else if (__tmp > 65535)
    1f6e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f70:	7e 89       	ldd	r23, Y+22	; 0x16
    1f72:	8f 89       	ldd	r24, Y+23	; 0x17
    1f74:	98 8d       	ldd	r25, Y+24	; 0x18
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	3f ef       	ldi	r19, 0xFF	; 255
    1f7a:	4f e7       	ldi	r20, 0x7F	; 127
    1f7c:	57 e4       	ldi	r21, 0x47	; 71
    1f7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f82:	18 16       	cp	r1, r24
    1f84:	4c f5       	brge	.+82     	; 0x1fd8 <LCD_displayCharachter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f86:	69 8d       	ldd	r22, Y+25	; 0x19
    1f88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	40 e2       	ldi	r20, 0x20	; 32
    1f94:	51 e4       	ldi	r21, 0x41	; 65
    1f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9a:	dc 01       	movw	r26, r24
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	bc 01       	movw	r22, r24
    1fa0:	cd 01       	movw	r24, r26
    1fa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	cb 01       	movw	r24, r22
    1faa:	9c 8b       	std	Y+20, r25	; 0x14
    1fac:	8b 8b       	std	Y+19, r24	; 0x13
    1fae:	0f c0       	rjmp	.+30     	; 0x1fce <LCD_displayCharachter+0x2ac>
    1fb0:	89 e1       	ldi	r24, 0x19	; 25
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	9a 8b       	std	Y+18, r25	; 0x12
    1fb6:	89 8b       	std	Y+17, r24	; 0x11
    1fb8:	89 89       	ldd	r24, Y+17	; 0x11
    1fba:	9a 89       	ldd	r25, Y+18	; 0x12
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <LCD_displayCharachter+0x29a>
    1fc0:	9a 8b       	std	Y+18, r25	; 0x12
    1fc2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc8:	01 97       	sbiw	r24, 0x01	; 1
    1fca:	9c 8b       	std	Y+20, r25	; 0x14
    1fcc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fce:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd2:	00 97       	sbiw	r24, 0x00	; 0
    1fd4:	69 f7       	brne	.-38     	; 0x1fb0 <LCD_displayCharachter+0x28e>
    1fd6:	14 c0       	rjmp	.+40     	; 0x2000 <LCD_displayCharachter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd8:	6d 89       	ldd	r22, Y+21	; 0x15
    1fda:	7e 89       	ldd	r23, Y+22	; 0x16
    1fdc:	8f 89       	ldd	r24, Y+23	; 0x17
    1fde:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	9c 8b       	std	Y+20, r25	; 0x14
    1fea:	8b 8b       	std	Y+19, r24	; 0x13
    1fec:	8b 89       	ldd	r24, Y+19	; 0x13
    1fee:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff0:	98 8b       	std	Y+16, r25	; 0x10
    1ff2:	8f 87       	std	Y+15, r24	; 0x0f
    1ff4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ff6:	98 89       	ldd	r25, Y+16	; 0x10
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <LCD_displayCharachter+0x2d6>
    1ffc:	98 8b       	std	Y+16, r25	; 0x10
    1ffe:	8f 87       	std	Y+15, r24	; 0x0f
		GPIO_writePin(LCD_DATA_PORTID,LCD_PIN1ID,GET_BIT(a_char,1));
		GPIO_writePin(LCD_DATA_PORTID,LCD_PIN2ID,GET_BIT(a_char,2));
		GPIO_writePin(LCD_DATA_PORTID,LCD_PIN3ID,GET_BIT(a_char,3));
#endif
			_delay_ms(1);
			GPIO_writePin(LCD_EN_PORTID,LCD_EN_PINID,LOGIC_LOW);
    2000:	83 e0       	ldi	r24, 0x03	; 3
    2002:	65 e0       	ldi	r22, 0x05	; 5
    2004:	40 e0       	ldi	r20, 0x00	; 0
    2006:	0e 94 65 07 	call	0xeca	; 0xeca <GPIO_writePin>
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	a0 e8       	ldi	r26, 0x80	; 128
    2010:	bf e3       	ldi	r27, 0x3F	; 63
    2012:	8b 87       	std	Y+11, r24	; 0x0b
    2014:	9c 87       	std	Y+12, r25	; 0x0c
    2016:	ad 87       	std	Y+13, r26	; 0x0d
    2018:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    201a:	6b 85       	ldd	r22, Y+11	; 0x0b
    201c:	7c 85       	ldd	r23, Y+12	; 0x0c
    201e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2020:	9e 85       	ldd	r25, Y+14	; 0x0e
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	4a e7       	ldi	r20, 0x7A	; 122
    2028:	53 e4       	ldi	r21, 0x43	; 67
    202a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	8f 83       	std	Y+7, r24	; 0x07
    2034:	98 87       	std	Y+8, r25	; 0x08
    2036:	a9 87       	std	Y+9, r26	; 0x09
    2038:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    203a:	6f 81       	ldd	r22, Y+7	; 0x07
    203c:	78 85       	ldd	r23, Y+8	; 0x08
    203e:	89 85       	ldd	r24, Y+9	; 0x09
    2040:	9a 85       	ldd	r25, Y+10	; 0x0a
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	40 e8       	ldi	r20, 0x80	; 128
    2048:	5f e3       	ldi	r21, 0x3F	; 63
    204a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    204e:	88 23       	and	r24, r24
    2050:	2c f4       	brge	.+10     	; 0x205c <LCD_displayCharachter+0x33a>
		__ticks = 1;
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	90 e0       	ldi	r25, 0x00	; 0
    2056:	9e 83       	std	Y+6, r25	; 0x06
    2058:	8d 83       	std	Y+5, r24	; 0x05
    205a:	3f c0       	rjmp	.+126    	; 0x20da <LCD_displayCharachter+0x3b8>
	else if (__tmp > 65535)
    205c:	6f 81       	ldd	r22, Y+7	; 0x07
    205e:	78 85       	ldd	r23, Y+8	; 0x08
    2060:	89 85       	ldd	r24, Y+9	; 0x09
    2062:	9a 85       	ldd	r25, Y+10	; 0x0a
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	3f ef       	ldi	r19, 0xFF	; 255
    2068:	4f e7       	ldi	r20, 0x7F	; 127
    206a:	57 e4       	ldi	r21, 0x47	; 71
    206c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2070:	18 16       	cp	r1, r24
    2072:	4c f5       	brge	.+82     	; 0x20c6 <LCD_displayCharachter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2074:	6b 85       	ldd	r22, Y+11	; 0x0b
    2076:	7c 85       	ldd	r23, Y+12	; 0x0c
    2078:	8d 85       	ldd	r24, Y+13	; 0x0d
    207a:	9e 85       	ldd	r25, Y+14	; 0x0e
    207c:	20 e0       	ldi	r18, 0x00	; 0
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	40 e2       	ldi	r20, 0x20	; 32
    2082:	51 e4       	ldi	r21, 0x41	; 65
    2084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	bc 01       	movw	r22, r24
    208e:	cd 01       	movw	r24, r26
    2090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	9e 83       	std	Y+6, r25	; 0x06
    209a:	8d 83       	std	Y+5, r24	; 0x05
    209c:	0f c0       	rjmp	.+30     	; 0x20bc <LCD_displayCharachter+0x39a>
    209e:	89 e1       	ldi	r24, 0x19	; 25
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	9c 83       	std	Y+4, r25	; 0x04
    20a4:	8b 83       	std	Y+3, r24	; 0x03
    20a6:	8b 81       	ldd	r24, Y+3	; 0x03
    20a8:	9c 81       	ldd	r25, Y+4	; 0x04
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	f1 f7       	brne	.-4      	; 0x20aa <LCD_displayCharachter+0x388>
    20ae:	9c 83       	std	Y+4, r25	; 0x04
    20b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b2:	8d 81       	ldd	r24, Y+5	; 0x05
    20b4:	9e 81       	ldd	r25, Y+6	; 0x06
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	9e 83       	std	Y+6, r25	; 0x06
    20ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20bc:	8d 81       	ldd	r24, Y+5	; 0x05
    20be:	9e 81       	ldd	r25, Y+6	; 0x06
    20c0:	00 97       	sbiw	r24, 0x00	; 0
    20c2:	69 f7       	brne	.-38     	; 0x209e <LCD_displayCharachter+0x37c>
    20c4:	14 c0       	rjmp	.+40     	; 0x20ee <LCD_displayCharachter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c6:	6f 81       	ldd	r22, Y+7	; 0x07
    20c8:	78 85       	ldd	r23, Y+8	; 0x08
    20ca:	89 85       	ldd	r24, Y+9	; 0x09
    20cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	9e 83       	std	Y+6, r25	; 0x06
    20d8:	8d 83       	std	Y+5, r24	; 0x05
    20da:	8d 81       	ldd	r24, Y+5	; 0x05
    20dc:	9e 81       	ldd	r25, Y+6	; 0x06
    20de:	9a 83       	std	Y+2, r25	; 0x02
    20e0:	89 83       	std	Y+1, r24	; 0x01
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	9a 81       	ldd	r25, Y+2	; 0x02
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <LCD_displayCharachter+0x3c4>
    20ea:	9a 83       	std	Y+2, r25	; 0x02
    20ec:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1);
}
    20ee:	e9 96       	adiw	r28, 0x39	; 57
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	f8 94       	cli
    20f4:	de bf       	out	0x3e, r29	; 62
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	cd bf       	out	0x3d, r28	; 61
    20fa:	cf 91       	pop	r28
    20fc:	df 91       	pop	r29
    20fe:	08 95       	ret

00002100 <LCD_displayString>:

void LCD_displayString(uint8 * a_char)
{
    2100:	df 93       	push	r29
    2102:	cf 93       	push	r28
    2104:	00 d0       	rcall	.+0      	; 0x2106 <LCD_displayString+0x6>
    2106:	00 d0       	rcall	.+0      	; 0x2108 <LCD_displayString+0x8>
    2108:	cd b7       	in	r28, 0x3d	; 61
    210a:	de b7       	in	r29, 0x3e	; 62
    210c:	9c 83       	std	Y+4, r25	; 0x04
    210e:	8b 83       	std	Y+3, r24	; 0x03
	uint8*a_charPTR=a_char;
    2110:	8b 81       	ldd	r24, Y+3	; 0x03
    2112:	9c 81       	ldd	r25, Y+4	; 0x04
    2114:	9a 83       	std	Y+2, r25	; 0x02
    2116:	89 83       	std	Y+1, r24	; 0x01
    2118:	0a c0       	rjmp	.+20     	; 0x212e <LCD_displayString+0x2e>

		while( *(a_charPTR)!= '\0')
		{

			LCD_displayCharachter(*a_charPTR);
    211a:	e9 81       	ldd	r30, Y+1	; 0x01
    211c:	fa 81       	ldd	r31, Y+2	; 0x02
    211e:	80 81       	ld	r24, Z
    2120:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <LCD_displayCharachter>
			a_charPTR++;
    2124:	89 81       	ldd	r24, Y+1	; 0x01
    2126:	9a 81       	ldd	r25, Y+2	; 0x02
    2128:	01 96       	adiw	r24, 0x01	; 1
    212a:	9a 83       	std	Y+2, r25	; 0x02
    212c:	89 83       	std	Y+1, r24	; 0x01

void LCD_displayString(uint8 * a_char)
{
	uint8*a_charPTR=a_char;

		while( *(a_charPTR)!= '\0')
    212e:	e9 81       	ldd	r30, Y+1	; 0x01
    2130:	fa 81       	ldd	r31, Y+2	; 0x02
    2132:	80 81       	ld	r24, Z
    2134:	88 23       	and	r24, r24
    2136:	89 f7       	brne	.-30     	; 0x211a <LCD_displayString+0x1a>
		{

			LCD_displayCharachter(*a_charPTR);
			a_charPTR++;
		}
}
    2138:	0f 90       	pop	r0
    213a:	0f 90       	pop	r0
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	cf 91       	pop	r28
    2142:	df 91       	pop	r29
    2144:	08 95       	ret

00002146 <LCD_moveCursor>:

void LCD_moveCursor(uint8 a_row,uint8 a_col)
{
    2146:	df 93       	push	r29
    2148:	cf 93       	push	r28
    214a:	cd b7       	in	r28, 0x3d	; 61
    214c:	de b7       	in	r29, 0x3e	; 62
    214e:	2f 97       	sbiw	r28, 0x0f	; 15
    2150:	0f b6       	in	r0, 0x3f	; 63
    2152:	f8 94       	cli
    2154:	de bf       	out	0x3e, r29	; 62
    2156:	0f be       	out	0x3f, r0	; 63
    2158:	cd bf       	out	0x3d, r28	; 61
    215a:	8a 83       	std	Y+2, r24	; 0x02
    215c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_command=0;
    215e:	19 82       	std	Y+1, r1	; 0x01
if((a_row>MAXROWPOS)|(a_row<MINROWPOS) | (a_col>MAXCOLPOS)|(a_col<MINCOLPOS) )
    2160:	1f 86       	std	Y+15, r1	; 0x0f
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	83 30       	cpi	r24, 0x03	; 3
    2166:	10 f0       	brcs	.+4      	; 0x216c <LCD_moveCursor+0x26>
    2168:	21 e0       	ldi	r18, 0x01	; 1
    216a:	2f 87       	std	Y+15, r18	; 0x0f
    216c:	1e 86       	std	Y+14, r1	; 0x0e
    216e:	8a 81       	ldd	r24, Y+2	; 0x02
    2170:	88 23       	and	r24, r24
    2172:	11 f4       	brne	.+4      	; 0x2178 <LCD_moveCursor+0x32>
    2174:	31 e0       	ldi	r19, 0x01	; 1
    2176:	3e 87       	std	Y+14, r19	; 0x0e
    2178:	8f 85       	ldd	r24, Y+15	; 0x0f
    217a:	9e 85       	ldd	r25, Y+14	; 0x0e
    217c:	89 2b       	or	r24, r25
    217e:	28 2f       	mov	r18, r24
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	3d 87       	std	Y+13, r19	; 0x0d
    2184:	2c 87       	std	Y+12, r18	; 0x0c
    2186:	1b 86       	std	Y+11, r1	; 0x0b
    2188:	1a 86       	std	Y+10, r1	; 0x0a
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	81 31       	cpi	r24, 0x11	; 17
    218e:	20 f0       	brcs	.+8      	; 0x2198 <LCD_moveCursor+0x52>
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	9b 87       	std	Y+11, r25	; 0x0b
    2196:	8a 87       	std	Y+10, r24	; 0x0a
    2198:	2c 85       	ldd	r18, Y+12	; 0x0c
    219a:	3d 85       	ldd	r19, Y+13	; 0x0d
    219c:	8a 85       	ldd	r24, Y+10	; 0x0a
    219e:	9b 85       	ldd	r25, Y+11	; 0x0b
    21a0:	28 2b       	or	r18, r24
    21a2:	39 2b       	or	r19, r25
    21a4:	39 87       	std	Y+9, r19	; 0x09
    21a6:	28 87       	std	Y+8, r18	; 0x08
    21a8:	1f 82       	std	Y+7, r1	; 0x07
    21aa:	1e 82       	std	Y+6, r1	; 0x06
    21ac:	8b 81       	ldd	r24, Y+3	; 0x03
    21ae:	88 23       	and	r24, r24
    21b0:	21 f4       	brne	.+8      	; 0x21ba <LCD_moveCursor+0x74>
    21b2:	21 e0       	ldi	r18, 0x01	; 1
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	3f 83       	std	Y+7, r19	; 0x07
    21b8:	2e 83       	std	Y+6, r18	; 0x06
    21ba:	88 85       	ldd	r24, Y+8	; 0x08
    21bc:	99 85       	ldd	r25, Y+9	; 0x09
    21be:	2e 81       	ldd	r18, Y+6	; 0x06
    21c0:	3f 81       	ldd	r19, Y+7	; 0x07
    21c2:	82 2b       	or	r24, r18
    21c4:	93 2b       	or	r25, r19
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	e1 f4       	brne	.+56     	; 0x2202 <LCD_moveCursor+0xbc>
{
	/* Do nothing*/
}
else
{
		switch (a_row)
    21ca:	8a 81       	ldd	r24, Y+2	; 0x02
    21cc:	28 2f       	mov	r18, r24
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	3d 83       	std	Y+5, r19	; 0x05
    21d2:	2c 83       	std	Y+4, r18	; 0x04
    21d4:	8c 81       	ldd	r24, Y+4	; 0x04
    21d6:	9d 81       	ldd	r25, Y+5	; 0x05
    21d8:	81 30       	cpi	r24, 0x01	; 1
    21da:	91 05       	cpc	r25, r1
    21dc:	31 f0       	breq	.+12     	; 0x21ea <LCD_moveCursor+0xa4>
    21de:	2c 81       	ldd	r18, Y+4	; 0x04
    21e0:	3d 81       	ldd	r19, Y+5	; 0x05
    21e2:	22 30       	cpi	r18, 0x02	; 2
    21e4:	31 05       	cpc	r19, r1
    21e6:	19 f0       	breq	.+6      	; 0x21ee <LCD_moveCursor+0xa8>
    21e8:	04 c0       	rjmp	.+8      	; 0x21f2 <LCD_moveCursor+0xac>
		{
		case 1 :
			a_command=FIRSTROWADD;
    21ea:	19 82       	std	Y+1, r1	; 0x01
    21ec:	02 c0       	rjmp	.+4      	; 0x21f2 <LCD_moveCursor+0xac>
			break;
		case 2 :
			a_command=SECROWADD;
    21ee:	80 e4       	ldi	r24, 0x40	; 64
    21f0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

LCD_sendCommand((a_command | (a_col-1)|(LCD_SET_CURSOR_LOCATION)));
    21f2:	8b 81       	ldd	r24, Y+3	; 0x03
    21f4:	81 50       	subi	r24, 0x01	; 1
    21f6:	98 2f       	mov	r25, r24
    21f8:	89 81       	ldd	r24, Y+1	; 0x01
    21fa:	89 2b       	or	r24, r25
    21fc:	80 68       	ori	r24, 0x80	; 128
    21fe:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_sendCommand>

}
}
    2202:	2f 96       	adiw	r28, 0x0f	; 15
    2204:	0f b6       	in	r0, 0x3f	; 63
    2206:	f8 94       	cli
    2208:	de bf       	out	0x3e, r29	; 62
    220a:	0f be       	out	0x3f, r0	; 63
    220c:	cd bf       	out	0x3d, r28	; 61
    220e:	cf 91       	pop	r28
    2210:	df 91       	pop	r29
    2212:	08 95       	ret

00002214 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 a_row,uint8 a_column,uint8  * a_char)
{
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	00 d0       	rcall	.+0      	; 0x221a <LCD_displayStringRowColumn+0x6>
    221a:	00 d0       	rcall	.+0      	; 0x221c <LCD_displayStringRowColumn+0x8>
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
    2220:	89 83       	std	Y+1, r24	; 0x01
    2222:	6a 83       	std	Y+2, r22	; 0x02
    2224:	5c 83       	std	Y+4, r21	; 0x04
    2226:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(a_row,a_column);
    2228:	89 81       	ldd	r24, Y+1	; 0x01
    222a:	6a 81       	ldd	r22, Y+2	; 0x02
    222c:	0e 94 a3 10 	call	0x2146	; 0x2146 <LCD_moveCursor>
	LCD_displayString(a_char);
    2230:	8b 81       	ldd	r24, Y+3	; 0x03
    2232:	9c 81       	ldd	r25, Y+4	; 0x04
    2234:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_displayString>
}
    2238:	0f 90       	pop	r0
    223a:	0f 90       	pop	r0
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	cf 91       	pop	r28
    2242:	df 91       	pop	r29
    2244:	08 95       	ret

00002246 <LCD_clearScreen>:
void LCD_clearScreen()
{
    2246:	df 93       	push	r29
    2248:	cf 93       	push	r28
    224a:	cd b7       	in	r28, 0x3d	; 61
    224c:	de b7       	in	r29, 0x3e	; 62

	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_sendCommand>

}
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	08 95       	ret

0000225a <LCD_intgerToString>:

void LCD_intgerToString(uint32 a_num)
{
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
    2262:	64 97       	sbiw	r28, 0x14	; 20
    2264:	0f b6       	in	r0, 0x3f	; 63
    2266:	f8 94       	cli
    2268:	de bf       	out	0x3e, r29	; 62
    226a:	0f be       	out	0x3f, r0	; 63
    226c:	cd bf       	out	0x3d, r28	; 61
    226e:	69 8b       	std	Y+17, r22	; 0x11
    2270:	7a 8b       	std	Y+18, r23	; 0x12
    2272:	8b 8b       	std	Y+19, r24	; 0x13
    2274:	9c 8b       	std	Y+20, r25	; 0x14
	uint8 buff[16];
	LCD_modifyString(buff,a_num,MAXDIGITS);
    2276:	29 89       	ldd	r18, Y+17	; 0x11
    2278:	3a 89       	ldd	r19, Y+18	; 0x12
    227a:	4b 89       	ldd	r20, Y+19	; 0x13
    227c:	5c 89       	ldd	r21, Y+20	; 0x14
    227e:	ce 01       	movw	r24, r28
    2280:	01 96       	adiw	r24, 0x01	; 1
    2282:	ba 01       	movw	r22, r20
    2284:	a9 01       	movw	r20, r18
    2286:	2f e0       	ldi	r18, 0x0F	; 15
    2288:	0e 94 53 11 	call	0x22a6	; 0x22a6 <LCD_modifyString>
	LCD_displayString(buff);
    228c:	ce 01       	movw	r24, r28
    228e:	01 96       	adiw	r24, 0x01	; 1
    2290:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_displayString>

}
    2294:	64 96       	adiw	r28, 0x14	; 20
    2296:	0f b6       	in	r0, 0x3f	; 63
    2298:	f8 94       	cli
    229a:	de bf       	out	0x3e, r29	; 62
    229c:	0f be       	out	0x3f, r0	; 63
    229e:	cd bf       	out	0x3d, r28	; 61
    22a0:	cf 91       	pop	r28
    22a2:	df 91       	pop	r29
    22a4:	08 95       	ret

000022a6 <LCD_modifyString>:

static void LCD_modifyString(uint8 * string_Ptr,uint32 a_num,uint8 a_numOfdigits)
{ uint8 i=0;
    22a6:	0f 93       	push	r16
    22a8:	1f 93       	push	r17
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
    22b2:	28 97       	sbiw	r28, 0x08	; 8
    22b4:	0f b6       	in	r0, 0x3f	; 63
    22b6:	f8 94       	cli
    22b8:	de bf       	out	0x3e, r29	; 62
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	cd bf       	out	0x3d, r28	; 61
    22be:	9b 83       	std	Y+3, r25	; 0x03
    22c0:	8a 83       	std	Y+2, r24	; 0x02
    22c2:	4c 83       	std	Y+4, r20	; 0x04
    22c4:	5d 83       	std	Y+5, r21	; 0x05
    22c6:	6e 83       	std	Y+6, r22	; 0x06
    22c8:	7f 83       	std	Y+7, r23	; 0x07
    22ca:	28 87       	std	Y+8, r18	; 0x08
    22cc:	19 82       	std	Y+1, r1	; 0x01

if(a_num==0)
    22ce:	8c 81       	ldd	r24, Y+4	; 0x04
    22d0:	9d 81       	ldd	r25, Y+5	; 0x05
    22d2:	ae 81       	ldd	r26, Y+6	; 0x06
    22d4:	bf 81       	ldd	r27, Y+7	; 0x07
    22d6:	00 97       	sbiw	r24, 0x00	; 0
    22d8:	a1 05       	cpc	r26, r1
    22da:	b1 05       	cpc	r27, r1
    22dc:	c9 f5       	brne	.+114    	; 0x2350 <LCD_modifyString+0xaa>
{
	*(string_Ptr)= ZEROASCII;
    22de:	ea 81       	ldd	r30, Y+2	; 0x02
    22e0:	fb 81       	ldd	r31, Y+3	; 0x03
    22e2:	80 e3       	ldi	r24, 0x30	; 48
    22e4:	80 83       	st	Z, r24
	*(string_Ptr+1)= '\0';
    22e6:	8a 81       	ldd	r24, Y+2	; 0x02
    22e8:	9b 81       	ldd	r25, Y+3	; 0x03
    22ea:	fc 01       	movw	r30, r24
    22ec:	31 96       	adiw	r30, 0x01	; 1
    22ee:	10 82       	st	Z, r1
    22f0:	44 c0       	rjmp	.+136    	; 0x237a <LCD_modifyString+0xd4>
}
else
{
	while(a_num !=0 && i<a_numOfdigits)
	{
		*(string_Ptr +i)=  (((0x0F) & (a_num%10)) | ZEROASCII);
    22f2:	89 81       	ldd	r24, Y+1	; 0x01
    22f4:	28 2f       	mov	r18, r24
    22f6:	30 e0       	ldi	r19, 0x00	; 0
    22f8:	8a 81       	ldd	r24, Y+2	; 0x02
    22fa:	9b 81       	ldd	r25, Y+3	; 0x03
    22fc:	8c 01       	movw	r16, r24
    22fe:	02 0f       	add	r16, r18
    2300:	13 1f       	adc	r17, r19
    2302:	8c 81       	ldd	r24, Y+4	; 0x04
    2304:	9d 81       	ldd	r25, Y+5	; 0x05
    2306:	ae 81       	ldd	r26, Y+6	; 0x06
    2308:	bf 81       	ldd	r27, Y+7	; 0x07
    230a:	2a e0       	ldi	r18, 0x0A	; 10
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e0       	ldi	r20, 0x00	; 0
    2310:	50 e0       	ldi	r21, 0x00	; 0
    2312:	bc 01       	movw	r22, r24
    2314:	cd 01       	movw	r24, r26
    2316:	0e 94 44 13 	call	0x2688	; 0x2688 <__udivmodsi4>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	8f 70       	andi	r24, 0x0F	; 15
    2320:	80 63       	ori	r24, 0x30	; 48
    2322:	f8 01       	movw	r30, r16
    2324:	80 83       	st	Z, r24

		a_num/=10;
    2326:	8c 81       	ldd	r24, Y+4	; 0x04
    2328:	9d 81       	ldd	r25, Y+5	; 0x05
    232a:	ae 81       	ldd	r26, Y+6	; 0x06
    232c:	bf 81       	ldd	r27, Y+7	; 0x07
    232e:	2a e0       	ldi	r18, 0x0A	; 10
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e0       	ldi	r20, 0x00	; 0
    2334:	50 e0       	ldi	r21, 0x00	; 0
    2336:	bc 01       	movw	r22, r24
    2338:	cd 01       	movw	r24, r26
    233a:	0e 94 44 13 	call	0x2688	; 0x2688 <__udivmodsi4>
    233e:	da 01       	movw	r26, r20
    2340:	c9 01       	movw	r24, r18
    2342:	8c 83       	std	Y+4, r24	; 0x04
    2344:	9d 83       	std	Y+5, r25	; 0x05
    2346:	ae 83       	std	Y+6, r26	; 0x06
    2348:	bf 83       	std	Y+7, r27	; 0x07
		i++;
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	8f 5f       	subi	r24, 0xFF	; 255
    234e:	89 83       	std	Y+1, r24	; 0x01
	*(string_Ptr)= ZEROASCII;
	*(string_Ptr+1)= '\0';
}
else
{
	while(a_num !=0 && i<a_numOfdigits)
    2350:	8c 81       	ldd	r24, Y+4	; 0x04
    2352:	9d 81       	ldd	r25, Y+5	; 0x05
    2354:	ae 81       	ldd	r26, Y+6	; 0x06
    2356:	bf 81       	ldd	r27, Y+7	; 0x07
    2358:	00 97       	sbiw	r24, 0x00	; 0
    235a:	a1 05       	cpc	r26, r1
    235c:	b1 05       	cpc	r27, r1
    235e:	21 f0       	breq	.+8      	; 0x2368 <LCD_modifyString+0xc2>
    2360:	99 81       	ldd	r25, Y+1	; 0x01
    2362:	88 85       	ldd	r24, Y+8	; 0x08
    2364:	98 17       	cp	r25, r24
    2366:	28 f2       	brcs	.-118    	; 0x22f2 <LCD_modifyString+0x4c>
		*(string_Ptr +i)=  (((0x0F) & (a_num%10)) | ZEROASCII);

		a_num/=10;
		i++;
	}
	*(string_Ptr +i)='\0';
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	28 2f       	mov	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	8a 81       	ldd	r24, Y+2	; 0x02
    2370:	9b 81       	ldd	r25, Y+3	; 0x03
    2372:	fc 01       	movw	r30, r24
    2374:	e2 0f       	add	r30, r18
    2376:	f3 1f       	adc	r31, r19
    2378:	10 82       	st	Z, r1
}
	LCD_rearrange(string_Ptr);
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	9b 81       	ldd	r25, Y+3	; 0x03
    237e:	0e 94 51 12 	call	0x24a2	; 0x24a2 <LCD_rearrange>



}
    2382:	28 96       	adiw	r28, 0x08	; 8
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	f8 94       	cli
    2388:	de bf       	out	0x3e, r29	; 62
    238a:	0f be       	out	0x3f, r0	; 63
    238c:	cd bf       	out	0x3d, r28	; 61
    238e:	cf 91       	pop	r28
    2390:	df 91       	pop	r29
    2392:	1f 91       	pop	r17
    2394:	0f 91       	pop	r16
    2396:	08 95       	ret

00002398 <LCD_floatToString>:

void LCD_floatToString (float32 a_num)
{
    2398:	df 93       	push	r29
    239a:	cf 93       	push	r28
    239c:	cd b7       	in	r28, 0x3d	; 61
    239e:	de b7       	in	r29, 0x3e	; 62
    23a0:	64 97       	sbiw	r28, 0x14	; 20
    23a2:	0f b6       	in	r0, 0x3f	; 63
    23a4:	f8 94       	cli
    23a6:	de bf       	out	0x3e, r29	; 62
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	cd bf       	out	0x3d, r28	; 61
    23ac:	69 8b       	std	Y+17, r22	; 0x11
    23ae:	7a 8b       	std	Y+18, r23	; 0x12
    23b0:	8b 8b       	std	Y+19, r24	; 0x13
    23b2:	9c 8b       	std	Y+20, r25	; 0x14
	uint8 buff[16];
	LCD_modifyFloat(buff,a_num);
    23b4:	29 89       	ldd	r18, Y+17	; 0x11
    23b6:	3a 89       	ldd	r19, Y+18	; 0x12
    23b8:	4b 89       	ldd	r20, Y+19	; 0x13
    23ba:	5c 89       	ldd	r21, Y+20	; 0x14
    23bc:	ce 01       	movw	r24, r28
    23be:	01 96       	adiw	r24, 0x01	; 1
    23c0:	ba 01       	movw	r22, r20
    23c2:	a9 01       	movw	r20, r18
    23c4:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <LCD_modifyFloat>
	LCD_displayString(buff);
    23c8:	ce 01       	movw	r24, r28
    23ca:	01 96       	adiw	r24, 0x01	; 1
    23cc:	0e 94 80 10 	call	0x2100	; 0x2100 <LCD_displayString>
}
    23d0:	64 96       	adiw	r28, 0x14	; 20
    23d2:	0f b6       	in	r0, 0x3f	; 63
    23d4:	f8 94       	cli
    23d6:	de bf       	out	0x3e, r29	; 62
    23d8:	0f be       	out	0x3f, r0	; 63
    23da:	cd bf       	out	0x3d, r28	; 61
    23dc:	cf 91       	pop	r28
    23de:	df 91       	pop	r29
    23e0:	08 95       	ret

000023e2 <LCD_modifyFloat>:




static void LCD_modifyFloat(uint8 * string_Ptr,float32 a_num)
{
    23e2:	df 93       	push	r29
    23e4:	cf 93       	push	r28
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	6e 97       	sbiw	r28, 0x1e	; 30
    23ec:	0f b6       	in	r0, 0x3f	; 63
    23ee:	f8 94       	cli
    23f0:	de bf       	out	0x3e, r29	; 62
    23f2:	0f be       	out	0x3f, r0	; 63
    23f4:	cd bf       	out	0x3d, r28	; 61
    23f6:	9a 8f       	std	Y+26, r25	; 0x1a
    23f8:	89 8f       	std	Y+25, r24	; 0x19
    23fa:	4b 8f       	std	Y+27, r20	; 0x1b
    23fc:	5c 8f       	std	Y+28, r21	; 0x1c
    23fe:	6d 8f       	std	Y+29, r22	; 0x1d
    2400:	7e 8f       	std	Y+30, r23	; 0x1e
	uint8 LCD_intToStr[MAXFLOATDIG+1];
	float32 a_decimalValue;

	uint32 a_numWithoutDec;

	a_decimalValue = a_num -FLOOR(a_num);
    2402:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2404:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2406:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2408:	9e 8d       	ldd	r25, Y+30	; 0x1e
    240a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	bc 01       	movw	r22, r24
    2414:	cd 01       	movw	r24, r26
    2416:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    241a:	9b 01       	movw	r18, r22
    241c:	ac 01       	movw	r20, r24
    241e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2420:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2422:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2424:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2426:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	8d 83       	std	Y+5, r24	; 0x05
    2430:	9e 83       	std	Y+6, r25	; 0x06
    2432:	af 83       	std	Y+7, r26	; 0x07
    2434:	b8 87       	std	Y+8, r27	; 0x08

	a_numWithoutDec =FLOOR(a_num) ;
    2436:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2438:	7c 8d       	ldd	r23, Y+28	; 0x1c
    243a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    243c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    243e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	89 83       	std	Y+1, r24	; 0x01
    2448:	9a 83       	std	Y+2, r25	; 0x02
    244a:	ab 83       	std	Y+3, r26	; 0x03
    244c:	bc 83       	std	Y+4, r27	; 0x04


	LCD_decToString(LCD_dectoInt,a_decimalValue );
    244e:	ce 01       	movw	r24, r28
    2450:	09 96       	adiw	r24, 0x09	; 9
    2452:	2d 81       	ldd	r18, Y+5	; 0x05
    2454:	3e 81       	ldd	r19, Y+6	; 0x06
    2456:	4f 81       	ldd	r20, Y+7	; 0x07
    2458:	58 85       	ldd	r21, Y+8	; 0x08
    245a:	ba 01       	movw	r22, r20
    245c:	a9 01       	movw	r20, r18
    245e:	0e 94 98 12 	call	0x2530	; 0x2530 <LCD_decToString>
	LCD_modifyString(LCD_intToStr, a_numWithoutDec, MAXFLOATDIG);
    2462:	ce 01       	movw	r24, r28
    2464:	0e 96       	adiw	r24, 0x0e	; 14
    2466:	29 81       	ldd	r18, Y+1	; 0x01
    2468:	3a 81       	ldd	r19, Y+2	; 0x02
    246a:	4b 81       	ldd	r20, Y+3	; 0x03
    246c:	5c 81       	ldd	r21, Y+4	; 0x04
    246e:	ba 01       	movw	r22, r20
    2470:	a9 01       	movw	r20, r18
    2472:	2a e0       	ldi	r18, 0x0A	; 10
    2474:	0e 94 53 11 	call	0x22a6	; 0x22a6 <LCD_modifyString>
	LCD_concatWith(string_Ptr, LCD_intToStr, LCD_dectoInt,DOT);
    2478:	89 8d       	ldd	r24, Y+25	; 0x19
    247a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    247c:	9e 01       	movw	r18, r28
    247e:	22 5f       	subi	r18, 0xF2	; 242
    2480:	3f 4f       	sbci	r19, 0xFF	; 255
    2482:	ae 01       	movw	r20, r28
    2484:	47 5f       	subi	r20, 0xF7	; 247
    2486:	5f 4f       	sbci	r21, 0xFF	; 255
    2488:	b9 01       	movw	r22, r18
    248a:	2e e2       	ldi	r18, 0x2E	; 46
    248c:	0e 94 df 12 	call	0x25be	; 0x25be <LCD_concatWith>

}
    2490:	6e 96       	adiw	r28, 0x1e	; 30
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	de bf       	out	0x3e, r29	; 62
    2498:	0f be       	out	0x3f, r0	; 63
    249a:	cd bf       	out	0x3d, r28	; 61
    249c:	cf 91       	pop	r28
    249e:	df 91       	pop	r29
    24a0:	08 95       	ret

000024a2 <LCD_rearrange>:
static void LCD_rearrange(uint8 * string_Ptr)
{
    24a2:	df 93       	push	r29
    24a4:	cf 93       	push	r28
    24a6:	00 d0       	rcall	.+0      	; 0x24a8 <LCD_rearrange+0x6>
    24a8:	00 d0       	rcall	.+0      	; 0x24aa <LCD_rearrange+0x8>
    24aa:	0f 92       	push	r0
    24ac:	cd b7       	in	r28, 0x3d	; 61
    24ae:	de b7       	in	r29, 0x3e	; 62
    24b0:	9d 83       	std	Y+5, r25	; 0x05
    24b2:	8c 83       	std	Y+4, r24	; 0x04
	uint8 temp;
	uint8*Ptr_endString =string_Ptr ;
    24b4:	8c 81       	ldd	r24, Y+4	; 0x04
    24b6:	9d 81       	ldd	r25, Y+5	; 0x05
    24b8:	9a 83       	std	Y+2, r25	; 0x02
    24ba:	89 83       	std	Y+1, r24	; 0x01
    24bc:	05 c0       	rjmp	.+10     	; 0x24c8 <LCD_rearrange+0x26>

	while(*(Ptr_endString) != '\0')
	{
		Ptr_endString++;
    24be:	89 81       	ldd	r24, Y+1	; 0x01
    24c0:	9a 81       	ldd	r25, Y+2	; 0x02
    24c2:	01 96       	adiw	r24, 0x01	; 1
    24c4:	9a 83       	std	Y+2, r25	; 0x02
    24c6:	89 83       	std	Y+1, r24	; 0x01
static void LCD_rearrange(uint8 * string_Ptr)
{
	uint8 temp;
	uint8*Ptr_endString =string_Ptr ;

	while(*(Ptr_endString) != '\0')
    24c8:	e9 81       	ldd	r30, Y+1	; 0x01
    24ca:	fa 81       	ldd	r31, Y+2	; 0x02
    24cc:	80 81       	ld	r24, Z
    24ce:	88 23       	and	r24, r24
    24d0:	b1 f7       	brne	.-20     	; 0x24be <LCD_rearrange+0x1c>
	{
		Ptr_endString++;
	}

	Ptr_endString--;
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	9a 81       	ldd	r25, Y+2	; 0x02
    24d6:	01 97       	sbiw	r24, 0x01	; 1
    24d8:	9a 83       	std	Y+2, r25	; 0x02
    24da:	89 83       	std	Y+1, r24	; 0x01
    24dc:	18 c0       	rjmp	.+48     	; 0x250e <LCD_rearrange+0x6c>

	while(Ptr_endString - string_Ptr > 0)
	{
		temp= *Ptr_endString ;
    24de:	e9 81       	ldd	r30, Y+1	; 0x01
    24e0:	fa 81       	ldd	r31, Y+2	; 0x02
    24e2:	80 81       	ld	r24, Z
    24e4:	8b 83       	std	Y+3, r24	; 0x03
		*Ptr_endString =*(string_Ptr);
    24e6:	ec 81       	ldd	r30, Y+4	; 0x04
    24e8:	fd 81       	ldd	r31, Y+5	; 0x05
    24ea:	80 81       	ld	r24, Z
    24ec:	e9 81       	ldd	r30, Y+1	; 0x01
    24ee:	fa 81       	ldd	r31, Y+2	; 0x02
    24f0:	80 83       	st	Z, r24
		*(string_Ptr)=temp;
    24f2:	ec 81       	ldd	r30, Y+4	; 0x04
    24f4:	fd 81       	ldd	r31, Y+5	; 0x05
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	80 83       	st	Z, r24
		Ptr_endString --;
    24fa:	89 81       	ldd	r24, Y+1	; 0x01
    24fc:	9a 81       	ldd	r25, Y+2	; 0x02
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	9a 83       	std	Y+2, r25	; 0x02
    2502:	89 83       	std	Y+1, r24	; 0x01
		  string_Ptr++;
    2504:	8c 81       	ldd	r24, Y+4	; 0x04
    2506:	9d 81       	ldd	r25, Y+5	; 0x05
    2508:	01 96       	adiw	r24, 0x01	; 1
    250a:	9d 83       	std	Y+5, r25	; 0x05
    250c:	8c 83       	std	Y+4, r24	; 0x04
		Ptr_endString++;
	}

	Ptr_endString--;

	while(Ptr_endString - string_Ptr > 0)
    250e:	89 81       	ldd	r24, Y+1	; 0x01
    2510:	9a 81       	ldd	r25, Y+2	; 0x02
    2512:	2c 81       	ldd	r18, Y+4	; 0x04
    2514:	3d 81       	ldd	r19, Y+5	; 0x05
    2516:	82 1b       	sub	r24, r18
    2518:	93 0b       	sbc	r25, r19
    251a:	18 16       	cp	r1, r24
    251c:	19 06       	cpc	r1, r25
    251e:	fc f2       	brlt	.-66     	; 0x24de <LCD_rearrange+0x3c>
		*(string_Ptr)=temp;
		Ptr_endString --;
		  string_Ptr++;
	}

}
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	0f 90       	pop	r0
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	08 95       	ret

00002530 <LCD_decToString>:
static void LCD_decToString(uint8*string_Ptr ,float32 a_decimalValue )
{ uint8 a_numOfDigits=0;
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
    2538:	29 97       	sbiw	r28, 0x09	; 9
    253a:	0f b6       	in	r0, 0x3f	; 63
    253c:	f8 94       	cli
    253e:	de bf       	out	0x3e, r29	; 62
    2540:	0f be       	out	0x3f, r0	; 63
    2542:	cd bf       	out	0x3d, r28	; 61
    2544:	9d 83       	std	Y+5, r25	; 0x05
    2546:	8c 83       	std	Y+4, r24	; 0x04
    2548:	4e 83       	std	Y+6, r20	; 0x06
    254a:	5f 83       	std	Y+7, r21	; 0x07
    254c:	68 87       	std	Y+8, r22	; 0x08
    254e:	79 87       	std	Y+9, r23	; 0x09
    2550:	1b 82       	std	Y+3, r1	; 0x03
    2552:	13 c0       	rjmp	.+38     	; 0x257a <LCD_decToString+0x4a>
	uint16 a_decimalTointeger ;

	 while( (a_numOfDigits<ACCURACY)  )
		 {
			 a_decimalValue*=10;
    2554:	6e 81       	ldd	r22, Y+6	; 0x06
    2556:	7f 81       	ldd	r23, Y+7	; 0x07
    2558:	88 85       	ldd	r24, Y+8	; 0x08
    255a:	99 85       	ldd	r25, Y+9	; 0x09
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e2       	ldi	r20, 0x20	; 32
    2562:	51 e4       	ldi	r21, 0x41	; 65
    2564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	8e 83       	std	Y+6, r24	; 0x06
    256e:	9f 83       	std	Y+7, r25	; 0x07
    2570:	a8 87       	std	Y+8, r26	; 0x08
    2572:	b9 87       	std	Y+9, r27	; 0x09
			 a_numOfDigits++;
    2574:	8b 81       	ldd	r24, Y+3	; 0x03
    2576:	8f 5f       	subi	r24, 0xFF	; 255
    2578:	8b 83       	std	Y+3, r24	; 0x03
}
static void LCD_decToString(uint8*string_Ptr ,float32 a_decimalValue )
{ uint8 a_numOfDigits=0;
	uint16 a_decimalTointeger ;

	 while( (a_numOfDigits<ACCURACY)  )
    257a:	8b 81       	ldd	r24, Y+3	; 0x03
    257c:	84 30       	cpi	r24, 0x04	; 4
    257e:	50 f3       	brcs	.-44     	; 0x2554 <LCD_decToString+0x24>
			 a_decimalValue*=10;
			 a_numOfDigits++;

		 }

	 a_decimalTointeger =a_decimalValue;
    2580:	6e 81       	ldd	r22, Y+6	; 0x06
    2582:	7f 81       	ldd	r23, Y+7	; 0x07
    2584:	88 85       	ldd	r24, Y+8	; 0x08
    2586:	99 85       	ldd	r25, Y+9	; 0x09
    2588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	9a 83       	std	Y+2, r25	; 0x02
    2592:	89 83       	std	Y+1, r24	; 0x01

	 LCD_modifyString( string_Ptr, a_decimalTointeger , a_numOfDigits);
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	9a 81       	ldd	r25, Y+2	; 0x02
    2598:	9c 01       	movw	r18, r24
    259a:	40 e0       	ldi	r20, 0x00	; 0
    259c:	50 e0       	ldi	r21, 0x00	; 0
    259e:	8c 81       	ldd	r24, Y+4	; 0x04
    25a0:	9d 81       	ldd	r25, Y+5	; 0x05
    25a2:	ba 01       	movw	r22, r20
    25a4:	a9 01       	movw	r20, r18
    25a6:	2b 81       	ldd	r18, Y+3	; 0x03
    25a8:	0e 94 53 11 	call	0x22a6	; 0x22a6 <LCD_modifyString>

}
    25ac:	29 96       	adiw	r28, 0x09	; 9
    25ae:	0f b6       	in	r0, 0x3f	; 63
    25b0:	f8 94       	cli
    25b2:	de bf       	out	0x3e, r29	; 62
    25b4:	0f be       	out	0x3f, r0	; 63
    25b6:	cd bf       	out	0x3d, r28	; 61
    25b8:	cf 91       	pop	r28
    25ba:	df 91       	pop	r29
    25bc:	08 95       	ret

000025be <LCD_concatWith>:
static void LCD_concatWith(uint8* a_mainStr,uint8 * string_Ptr,uint8 * string_Ptr2,uint8 a_symb)
{
    25be:	df 93       	push	r29
    25c0:	cf 93       	push	r28
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
    25c6:	28 97       	sbiw	r28, 0x08	; 8
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	f8 94       	cli
    25cc:	de bf       	out	0x3e, r29	; 62
    25ce:	0f be       	out	0x3f, r0	; 63
    25d0:	cd bf       	out	0x3d, r28	; 61
    25d2:	9b 83       	std	Y+3, r25	; 0x03
    25d4:	8a 83       	std	Y+2, r24	; 0x02
    25d6:	7d 83       	std	Y+5, r23	; 0x05
    25d8:	6c 83       	std	Y+4, r22	; 0x04
    25da:	5f 83       	std	Y+7, r21	; 0x07
    25dc:	4e 83       	std	Y+6, r20	; 0x06
    25de:	28 87       	std	Y+8, r18	; 0x08
	uint8 i=0;
    25e0:	19 82       	std	Y+1, r1	; 0x01
    25e2:	14 c0       	rjmp	.+40     	; 0x260c <LCD_concatWith+0x4e>
	while(*string_Ptr !='\0')
	{
		*(a_mainStr+i) = *(string_Ptr);
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	28 2f       	mov	r18, r24
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	9b 81       	ldd	r25, Y+3	; 0x03
    25ee:	dc 01       	movw	r26, r24
    25f0:	a2 0f       	add	r26, r18
    25f2:	b3 1f       	adc	r27, r19
    25f4:	ec 81       	ldd	r30, Y+4	; 0x04
    25f6:	fd 81       	ldd	r31, Y+5	; 0x05
    25f8:	80 81       	ld	r24, Z
    25fa:	8c 93       	st	X, r24
		i++;
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
    25fe:	8f 5f       	subi	r24, 0xFF	; 255
    2600:	89 83       	std	Y+1, r24	; 0x01
		string_Ptr++;
    2602:	8c 81       	ldd	r24, Y+4	; 0x04
    2604:	9d 81       	ldd	r25, Y+5	; 0x05
    2606:	01 96       	adiw	r24, 0x01	; 1
    2608:	9d 83       	std	Y+5, r25	; 0x05
    260a:	8c 83       	std	Y+4, r24	; 0x04

}
static void LCD_concatWith(uint8* a_mainStr,uint8 * string_Ptr,uint8 * string_Ptr2,uint8 a_symb)
{
	uint8 i=0;
	while(*string_Ptr !='\0')
    260c:	ec 81       	ldd	r30, Y+4	; 0x04
    260e:	fd 81       	ldd	r31, Y+5	; 0x05
    2610:	80 81       	ld	r24, Z
    2612:	88 23       	and	r24, r24
    2614:	39 f7       	brne	.-50     	; 0x25e4 <LCD_concatWith+0x26>
		*(a_mainStr+i) = *(string_Ptr);
		i++;
		string_Ptr++;
	}

	*(a_mainStr+i)=a_symb;
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	28 2f       	mov	r18, r24
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	8a 81       	ldd	r24, Y+2	; 0x02
    261e:	9b 81       	ldd	r25, Y+3	; 0x03
    2620:	fc 01       	movw	r30, r24
    2622:	e2 0f       	add	r30, r18
    2624:	f3 1f       	adc	r31, r19
    2626:	88 85       	ldd	r24, Y+8	; 0x08
    2628:	80 83       	st	Z, r24
	i++;
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	8f 5f       	subi	r24, 0xFF	; 255
    262e:	89 83       	std	Y+1, r24	; 0x01
    2630:	14 c0       	rjmp	.+40     	; 0x265a <LCD_concatWith+0x9c>
	while(*string_Ptr2 !='\0')
		{
			*(a_mainStr+i) = *(string_Ptr2);
    2632:	89 81       	ldd	r24, Y+1	; 0x01
    2634:	28 2f       	mov	r18, r24
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	8a 81       	ldd	r24, Y+2	; 0x02
    263a:	9b 81       	ldd	r25, Y+3	; 0x03
    263c:	dc 01       	movw	r26, r24
    263e:	a2 0f       	add	r26, r18
    2640:	b3 1f       	adc	r27, r19
    2642:	ee 81       	ldd	r30, Y+6	; 0x06
    2644:	ff 81       	ldd	r31, Y+7	; 0x07
    2646:	80 81       	ld	r24, Z
    2648:	8c 93       	st	X, r24
			string_Ptr2++;
    264a:	8e 81       	ldd	r24, Y+6	; 0x06
    264c:	9f 81       	ldd	r25, Y+7	; 0x07
    264e:	01 96       	adiw	r24, 0x01	; 1
    2650:	9f 83       	std	Y+7, r25	; 0x07
    2652:	8e 83       	std	Y+6, r24	; 0x06
			i++;
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	8f 5f       	subi	r24, 0xFF	; 255
    2658:	89 83       	std	Y+1, r24	; 0x01
		string_Ptr++;
	}

	*(a_mainStr+i)=a_symb;
	i++;
	while(*string_Ptr2 !='\0')
    265a:	ee 81       	ldd	r30, Y+6	; 0x06
    265c:	ff 81       	ldd	r31, Y+7	; 0x07
    265e:	80 81       	ld	r24, Z
    2660:	88 23       	and	r24, r24
    2662:	39 f7       	brne	.-50     	; 0x2632 <LCD_concatWith+0x74>
		{
			*(a_mainStr+i) = *(string_Ptr2);
			string_Ptr2++;
			i++;
		}
	*(a_mainStr+i)='\0';
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	28 2f       	mov	r18, r24
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	8a 81       	ldd	r24, Y+2	; 0x02
    266c:	9b 81       	ldd	r25, Y+3	; 0x03
    266e:	fc 01       	movw	r30, r24
    2670:	e2 0f       	add	r30, r18
    2672:	f3 1f       	adc	r31, r19
    2674:	10 82       	st	Z, r1


}
    2676:	28 96       	adiw	r28, 0x08	; 8
    2678:	0f b6       	in	r0, 0x3f	; 63
    267a:	f8 94       	cli
    267c:	de bf       	out	0x3e, r29	; 62
    267e:	0f be       	out	0x3f, r0	; 63
    2680:	cd bf       	out	0x3d, r28	; 61
    2682:	cf 91       	pop	r28
    2684:	df 91       	pop	r29
    2686:	08 95       	ret

00002688 <__udivmodsi4>:
    2688:	a1 e2       	ldi	r26, 0x21	; 33
    268a:	1a 2e       	mov	r1, r26
    268c:	aa 1b       	sub	r26, r26
    268e:	bb 1b       	sub	r27, r27
    2690:	fd 01       	movw	r30, r26
    2692:	0d c0       	rjmp	.+26     	; 0x26ae <__udivmodsi4_ep>

00002694 <__udivmodsi4_loop>:
    2694:	aa 1f       	adc	r26, r26
    2696:	bb 1f       	adc	r27, r27
    2698:	ee 1f       	adc	r30, r30
    269a:	ff 1f       	adc	r31, r31
    269c:	a2 17       	cp	r26, r18
    269e:	b3 07       	cpc	r27, r19
    26a0:	e4 07       	cpc	r30, r20
    26a2:	f5 07       	cpc	r31, r21
    26a4:	20 f0       	brcs	.+8      	; 0x26ae <__udivmodsi4_ep>
    26a6:	a2 1b       	sub	r26, r18
    26a8:	b3 0b       	sbc	r27, r19
    26aa:	e4 0b       	sbc	r30, r20
    26ac:	f5 0b       	sbc	r31, r21

000026ae <__udivmodsi4_ep>:
    26ae:	66 1f       	adc	r22, r22
    26b0:	77 1f       	adc	r23, r23
    26b2:	88 1f       	adc	r24, r24
    26b4:	99 1f       	adc	r25, r25
    26b6:	1a 94       	dec	r1
    26b8:	69 f7       	brne	.-38     	; 0x2694 <__udivmodsi4_loop>
    26ba:	60 95       	com	r22
    26bc:	70 95       	com	r23
    26be:	80 95       	com	r24
    26c0:	90 95       	com	r25
    26c2:	9b 01       	movw	r18, r22
    26c4:	ac 01       	movw	r20, r24
    26c6:	bd 01       	movw	r22, r26
    26c8:	cf 01       	movw	r24, r30
    26ca:	08 95       	ret

000026cc <__prologue_saves__>:
    26cc:	2f 92       	push	r2
    26ce:	3f 92       	push	r3
    26d0:	4f 92       	push	r4
    26d2:	5f 92       	push	r5
    26d4:	6f 92       	push	r6
    26d6:	7f 92       	push	r7
    26d8:	8f 92       	push	r8
    26da:	9f 92       	push	r9
    26dc:	af 92       	push	r10
    26de:	bf 92       	push	r11
    26e0:	cf 92       	push	r12
    26e2:	df 92       	push	r13
    26e4:	ef 92       	push	r14
    26e6:	ff 92       	push	r15
    26e8:	0f 93       	push	r16
    26ea:	1f 93       	push	r17
    26ec:	cf 93       	push	r28
    26ee:	df 93       	push	r29
    26f0:	cd b7       	in	r28, 0x3d	; 61
    26f2:	de b7       	in	r29, 0x3e	; 62
    26f4:	ca 1b       	sub	r28, r26
    26f6:	db 0b       	sbc	r29, r27
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	f8 94       	cli
    26fc:	de bf       	out	0x3e, r29	; 62
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	cd bf       	out	0x3d, r28	; 61
    2702:	09 94       	ijmp

00002704 <__epilogue_restores__>:
    2704:	2a 88       	ldd	r2, Y+18	; 0x12
    2706:	39 88       	ldd	r3, Y+17	; 0x11
    2708:	48 88       	ldd	r4, Y+16	; 0x10
    270a:	5f 84       	ldd	r5, Y+15	; 0x0f
    270c:	6e 84       	ldd	r6, Y+14	; 0x0e
    270e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2710:	8c 84       	ldd	r8, Y+12	; 0x0c
    2712:	9b 84       	ldd	r9, Y+11	; 0x0b
    2714:	aa 84       	ldd	r10, Y+10	; 0x0a
    2716:	b9 84       	ldd	r11, Y+9	; 0x09
    2718:	c8 84       	ldd	r12, Y+8	; 0x08
    271a:	df 80       	ldd	r13, Y+7	; 0x07
    271c:	ee 80       	ldd	r14, Y+6	; 0x06
    271e:	fd 80       	ldd	r15, Y+5	; 0x05
    2720:	0c 81       	ldd	r16, Y+4	; 0x04
    2722:	1b 81       	ldd	r17, Y+3	; 0x03
    2724:	aa 81       	ldd	r26, Y+2	; 0x02
    2726:	b9 81       	ldd	r27, Y+1	; 0x01
    2728:	ce 0f       	add	r28, r30
    272a:	d1 1d       	adc	r29, r1
    272c:	0f b6       	in	r0, 0x3f	; 63
    272e:	f8 94       	cli
    2730:	de bf       	out	0x3e, r29	; 62
    2732:	0f be       	out	0x3f, r0	; 63
    2734:	cd bf       	out	0x3d, r28	; 61
    2736:	ed 01       	movw	r28, r26
    2738:	08 95       	ret

0000273a <_exit>:
    273a:	f8 94       	cli

0000273c <__stop_program>:
    273c:	ff cf       	rjmp	.-2      	; 0x273c <__stop_program>
